use std::env;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;

fn main() {
    println!("cargo:rerun-if-changed=memory.x");
    println!("cargo:rerun-if-changed=custom.x");
    
    let out: &PathBuf = &PathBuf::from(env::var_os("OUT_DIR").unwrap());
    
    // Copy memory.x to the output directory
    File::create(out.join("memory.x"))
        .unwrap()
        .write_all(include_bytes!("memory.x"))
        .unwrap();
        
    // Create custom.x for our additional sections
    File::create(out.join("custom.x"))
        .unwrap()
        .write_all(include_bytes!("custom.x"))
        .unwrap();
    
    // Generate a Rust file with precomputed header values
    let updater_addr: i32 = 0x08008000;
    let header_size: i32 = 0x200;
    let vector_addr: i32 = updater_addr + header_size;
    
    let header_rs: String = format!(
        r#"
        // This file is generated by build.rs
        
        // Memory addresses
        pub const UPDATER_ADDRESS: u32 = {:#x};
        pub const HEADER_SIZE: u32 = {:#x};
        pub const VECTOR_TABLE_ADDRESS: u32 = {:#x};
        
        // Create preinitialized header
        #[no_mangle]
        #[link_section = ".image_hdr"]
        pub static mut IMAGE_HEADER: ::misc::image::ImageHeader = ::misc::image::ImageHeader {{
            image_magic: ::misc::image::IMAGE_MAGIC_UPDATER,
            image_hdr_version: ::misc::image::IMAGE_VERSION_CURRENT,
            image_type: ::misc::image::IMAGE_TYPE_UPDATER,
            version_major: 1,
            version_minor: 0,
            version_patch: 0,
            _padding: 0,
            vector_addr: {:#x},
            crc: 0,
            data_size: 0,
        }};
        "#,
        updater_addr,
        header_size,
        vector_addr,
        vector_addr
    );
    
    File::create(out.join("header_values.rs"))
        .unwrap()
        .write_all(header_rs.as_bytes())
        .unwrap();
    
    println!("cargo:rustc-link-search={}", out.display());
}