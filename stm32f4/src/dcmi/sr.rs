# [doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ; # [doc = "Field `HSYNC` reader - HSYNC"] pub type HsyncR = crate :: BitReader ; # [doc = "Field `VSYNC` reader - VSYNC"] pub type VsyncR = crate :: BitReader ; # [doc = "Field `FNE` reader - FIFO not empty"] pub type FneR = crate :: BitReader ; impl R { # [doc = "Bit 0 - HSYNC"] # [inline (always)] pub fn hsync (& self) -> HsyncR { HsyncR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - VSYNC"] # [inline (always)] pub fn vsync (& self) -> VsyncR { VsyncR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - FIFO not empty"] # [inline (always)] pub fn fne (& self) -> FneR { FneR :: new (((self . bits >> 2) & 1) != 0) } } # [doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { } # [doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { }