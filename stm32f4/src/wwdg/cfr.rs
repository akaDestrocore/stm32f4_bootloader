# [doc = "Register `CFR` reader"] pub type R = crate :: R < CfrSpec > ; # [doc = "Register `CFR` writer"] pub type W = crate :: W < CfrSpec > ; # [doc = "Field `W` reader - 7-bit window value"] pub type WR = crate :: FieldReader ; # [doc = "Field `W` writer - 7-bit window value"] pub type WW < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 , u8 , crate :: Safe > ; # [doc = "Timer base\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Wdgtb { # [doc = "0: Counter clock (PCLK1 div 4096) div 1"] Div1 = 0 , # [doc = "1: Counter clock (PCLK1 div 4096) div 2"] Div2 = 1 , # [doc = "2: Counter clock (PCLK1 div 4096) div 4"] Div4 = 2 , # [doc = "3: Counter clock (PCLK1 div 4096) div 8"] Div8 = 3 , } impl From < Wdgtb > for u8 { # [inline (always)] fn from (variant : Wdgtb) -> Self { variant as _ } } impl crate :: FieldSpec for Wdgtb { type Ux = u8 ; } impl crate :: IsEnum for Wdgtb { } # [doc = "Field `WDGTB` reader - Timer base"] pub type WdgtbR = crate :: FieldReader < Wdgtb > ; impl WdgtbR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Wdgtb { match self . bits { 0 => Wdgtb :: Div1 , 1 => Wdgtb :: Div2 , 2 => Wdgtb :: Div4 , 3 => Wdgtb :: Div8 , _ => unreachable ! () , } } # [doc = "Counter clock (PCLK1 div 4096) div 1"] # [inline (always)] pub fn is_div1 (& self) -> bool { * self == Wdgtb :: Div1 } # [doc = "Counter clock (PCLK1 div 4096) div 2"] # [inline (always)] pub fn is_div2 (& self) -> bool { * self == Wdgtb :: Div2 } # [doc = "Counter clock (PCLK1 div 4096) div 4"] # [inline (always)] pub fn is_div4 (& self) -> bool { * self == Wdgtb :: Div4 } # [doc = "Counter clock (PCLK1 div 4096) div 8"] # [inline (always)] pub fn is_div8 (& self) -> bool { * self == Wdgtb :: Div8 } } # [doc = "Field `WDGTB` writer - Timer base"] pub type WdgtbW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , Wdgtb , crate :: Safe > ; impl < 'a , REG > WdgtbW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "Counter clock (PCLK1 div 4096) div 1"] # [inline (always)] pub fn div1 (self) -> & 'a mut crate :: W < REG > { self . variant (Wdgtb :: Div1) } # [doc = "Counter clock (PCLK1 div 4096) div 2"] # [inline (always)] pub fn div2 (self) -> & 'a mut crate :: W < REG > { self . variant (Wdgtb :: Div2) } # [doc = "Counter clock (PCLK1 div 4096) div 4"] # [inline (always)] pub fn div4 (self) -> & 'a mut crate :: W < REG > { self . variant (Wdgtb :: Div4) } # [doc = "Counter clock (PCLK1 div 4096) div 8"] # [inline (always)] pub fn div8 (self) -> & 'a mut crate :: W < REG > { self . variant (Wdgtb :: Div8) } } # [doc = "Early wakeup interrupt\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ewiw { # [doc = "1: interrupt occurs whenever the counter reaches the value 0x40"] Enable = 1 , } impl From < Ewiw > for bool { # [inline (always)] fn from (variant : Ewiw) -> Self { variant as u8 != 0 } } # [doc = "Field `EWI` reader - Early wakeup interrupt"] pub type EwiR = crate :: BitReader < Ewiw > ; impl EwiR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Ewiw > { match self . bits { true => Some (Ewiw :: Enable) , _ => None , } } # [doc = "interrupt occurs whenever the counter reaches the value 0x40"] # [inline (always)] pub fn is_enable (& self) -> bool { * self == Ewiw :: Enable } } # [doc = "Field `EWI` writer - Early wakeup interrupt"] pub type EwiW < 'a , REG > = crate :: BitWriter < 'a , REG , Ewiw > ; impl < 'a , REG > EwiW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "interrupt occurs whenever the counter reaches the value 0x40"] # [inline (always)] pub fn enable (self) -> & 'a mut crate :: W < REG > { self . variant (Ewiw :: Enable) } } impl R { # [doc = "Bits 0:6 - 7-bit window value"] # [inline (always)] pub fn w (& self) -> WR { WR :: new ((self . bits & 0x7f) as u8) } # [doc = "Bits 7:8 - Timer base"] # [inline (always)] pub fn wdgtb (& self) -> WdgtbR { WdgtbR :: new (((self . bits >> 7) & 3) as u8) } # [doc = "Bit 9 - Early wakeup interrupt"] # [inline (always)] pub fn ewi (& self) -> EwiR { EwiR :: new (((self . bits >> 9) & 1) != 0) } } impl W { # [doc = "Bits 0:6 - 7-bit window value"] # [inline (always)] pub fn w (& mut self) -> WW < CfrSpec > { WW :: new (self , 0) } # [doc = "Bits 7:8 - Timer base"] # [inline (always)] pub fn wdgtb (& mut self) -> WdgtbW < CfrSpec > { WdgtbW :: new (self , 7) } # [doc = "Bit 9 - Early wakeup interrupt"] # [inline (always)] pub fn ewi (& mut self) -> EwiW < CfrSpec > { EwiW :: new (self , 9) } } # [doc = "Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CfrSpec ; impl crate :: RegisterSpec for CfrSpec { type Ux = u16 ; } # [doc = "`read()` method returns [`cfr::R`](R) reader structure"] impl crate :: Readable for CfrSpec { } # [doc = "`write(|w| ..)` method takes [`cfr::W`](W) writer structure"] impl crate :: Writable for CfrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CFR to value 0x7f"] impl crate :: Resettable for CfrSpec { const RESET_VALUE : u16 = 0x7f ; }