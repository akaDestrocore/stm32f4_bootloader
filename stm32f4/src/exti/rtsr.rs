# [doc = "Register `RTSR` reader"] pub type R = crate :: R < RtsrSpec > ; # [doc = "Register `RTSR` writer"] pub type W = crate :: W < RtsrSpec > ; # [doc = "Rising trigger event configuration of line %s\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum RisingTrigger { # [doc = "0: Rising edge trigger is disabled"] Disabled = 0 , # [doc = "1: Rising edge trigger is enabled"] Enabled = 1 , } impl From < RisingTrigger > for bool { # [inline (always)] fn from (variant : RisingTrigger) -> Self { variant as u8 != 0 } } # [doc = "Field `TR(0-22)` reader - Rising trigger event configuration of line %s"] pub type TrR = crate :: BitReader < RisingTrigger > ; impl TrR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> RisingTrigger { match self . bits { false => RisingTrigger :: Disabled , true => RisingTrigger :: Enabled , } } # [doc = "Rising edge trigger is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == RisingTrigger :: Disabled } # [doc = "Rising edge trigger is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == RisingTrigger :: Enabled } } # [doc = "Field `TR(0-22)` writer - Rising trigger event configuration of line %s"] pub type TrW < 'a , REG > = crate :: BitWriter < 'a , REG , RisingTrigger > ; impl < 'a , REG > TrW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Rising edge trigger is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (RisingTrigger :: Disabled) } # [doc = "Rising edge trigger is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (RisingTrigger :: Enabled) } } impl R { # [doc = "Rising trigger event configuration of line (0-22)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `TR0` field.</div>"] # [inline (always)] pub fn tr (& self , n : u8) -> TrR { # [allow (clippy :: no_effect)] [() ; 23] [n as usize] ; TrR :: new (((self . bits >> n) & 1) != 0) } # [doc = "Iterator for array of:"] # [doc = "Rising trigger event configuration of line (0-22)"] # [inline (always)] pub fn tr_iter (& self) -> impl Iterator < Item = TrR > + '_ { (0 .. 23) . map (move | n | TrR :: new (((self . bits >> n) & 1) != 0)) } # [doc = "Bit 0 - Rising trigger event configuration of line 0"] # [inline (always)] pub fn tr0 (& self) -> TrR { TrR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Rising trigger event configuration of line 1"] # [inline (always)] pub fn tr1 (& self) -> TrR { TrR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Rising trigger event configuration of line 2"] # [inline (always)] pub fn tr2 (& self) -> TrR { TrR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Rising trigger event configuration of line 3"] # [inline (always)] pub fn tr3 (& self) -> TrR { TrR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Rising trigger event configuration of line 4"] # [inline (always)] pub fn tr4 (& self) -> TrR { TrR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Rising trigger event configuration of line 5"] # [inline (always)] pub fn tr5 (& self) -> TrR { TrR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Rising trigger event configuration of line 6"] # [inline (always)] pub fn tr6 (& self) -> TrR { TrR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Rising trigger event configuration of line 7"] # [inline (always)] pub fn tr7 (& self) -> TrR { TrR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Rising trigger event configuration of line 8"] # [inline (always)] pub fn tr8 (& self) -> TrR { TrR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Rising trigger event configuration of line 9"] # [inline (always)] pub fn tr9 (& self) -> TrR { TrR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Rising trigger event configuration of line 10"] # [inline (always)] pub fn tr10 (& self) -> TrR { TrR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Rising trigger event configuration of line 11"] # [inline (always)] pub fn tr11 (& self) -> TrR { TrR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Rising trigger event configuration of line 12"] # [inline (always)] pub fn tr12 (& self) -> TrR { TrR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Rising trigger event configuration of line 13"] # [inline (always)] pub fn tr13 (& self) -> TrR { TrR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Rising trigger event configuration of line 14"] # [inline (always)] pub fn tr14 (& self) -> TrR { TrR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Rising trigger event configuration of line 15"] # [inline (always)] pub fn tr15 (& self) -> TrR { TrR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Rising trigger event configuration of line 16"] # [inline (always)] pub fn tr16 (& self) -> TrR { TrR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - Rising trigger event configuration of line 17"] # [inline (always)] pub fn tr17 (& self) -> TrR { TrR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - Rising trigger event configuration of line 18"] # [inline (always)] pub fn tr18 (& self) -> TrR { TrR :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - Rising trigger event configuration of line 19"] # [inline (always)] pub fn tr19 (& self) -> TrR { TrR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - Rising trigger event configuration of line 20"] # [inline (always)] pub fn tr20 (& self) -> TrR { TrR :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - Rising trigger event configuration of line 21"] # [inline (always)] pub fn tr21 (& self) -> TrR { TrR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - Rising trigger event configuration of line 22"] # [inline (always)] pub fn tr22 (& self) -> TrR { TrR :: new (((self . bits >> 22) & 1) != 0) } } impl W { # [doc = "Rising trigger event configuration of line (0-22)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `TR0` field.</div>"] # [inline (always)] pub fn tr (& mut self , n : u8) -> TrW < RtsrSpec > { # [allow (clippy :: no_effect)] [() ; 23] [n as usize] ; TrW :: new (self , n) } # [doc = "Bit 0 - Rising trigger event configuration of line 0"] # [inline (always)] pub fn tr0 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 0) } # [doc = "Bit 1 - Rising trigger event configuration of line 1"] # [inline (always)] pub fn tr1 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 1) } # [doc = "Bit 2 - Rising trigger event configuration of line 2"] # [inline (always)] pub fn tr2 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 2) } # [doc = "Bit 3 - Rising trigger event configuration of line 3"] # [inline (always)] pub fn tr3 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 3) } # [doc = "Bit 4 - Rising trigger event configuration of line 4"] # [inline (always)] pub fn tr4 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 4) } # [doc = "Bit 5 - Rising trigger event configuration of line 5"] # [inline (always)] pub fn tr5 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 5) } # [doc = "Bit 6 - Rising trigger event configuration of line 6"] # [inline (always)] pub fn tr6 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 6) } # [doc = "Bit 7 - Rising trigger event configuration of line 7"] # [inline (always)] pub fn tr7 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 7) } # [doc = "Bit 8 - Rising trigger event configuration of line 8"] # [inline (always)] pub fn tr8 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 8) } # [doc = "Bit 9 - Rising trigger event configuration of line 9"] # [inline (always)] pub fn tr9 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 9) } # [doc = "Bit 10 - Rising trigger event configuration of line 10"] # [inline (always)] pub fn tr10 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 10) } # [doc = "Bit 11 - Rising trigger event configuration of line 11"] # [inline (always)] pub fn tr11 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 11) } # [doc = "Bit 12 - Rising trigger event configuration of line 12"] # [inline (always)] pub fn tr12 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 12) } # [doc = "Bit 13 - Rising trigger event configuration of line 13"] # [inline (always)] pub fn tr13 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 13) } # [doc = "Bit 14 - Rising trigger event configuration of line 14"] # [inline (always)] pub fn tr14 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 14) } # [doc = "Bit 15 - Rising trigger event configuration of line 15"] # [inline (always)] pub fn tr15 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 15) } # [doc = "Bit 16 - Rising trigger event configuration of line 16"] # [inline (always)] pub fn tr16 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 16) } # [doc = "Bit 17 - Rising trigger event configuration of line 17"] # [inline (always)] pub fn tr17 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 17) } # [doc = "Bit 18 - Rising trigger event configuration of line 18"] # [inline (always)] pub fn tr18 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 18) } # [doc = "Bit 19 - Rising trigger event configuration of line 19"] # [inline (always)] pub fn tr19 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 19) } # [doc = "Bit 20 - Rising trigger event configuration of line 20"] # [inline (always)] pub fn tr20 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 20) } # [doc = "Bit 21 - Rising trigger event configuration of line 21"] # [inline (always)] pub fn tr21 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 21) } # [doc = "Bit 22 - Rising trigger event configuration of line 22"] # [inline (always)] pub fn tr22 (& mut self) -> TrW < RtsrSpec > { TrW :: new (self , 22) } } # [doc = "Rising Trigger selection register (EXTI_RTSR)\n\nYou can [`read`](crate::Reg::read) this register and get [`rtsr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rtsr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RtsrSpec ; impl crate :: RegisterSpec for RtsrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`rtsr::R`](R) reader structure"] impl crate :: Readable for RtsrSpec { } # [doc = "`write(|w| ..)` method takes [`rtsr::W`](W) writer structure"] impl crate :: Writable for RtsrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets RTSR to value 0"] impl crate :: Resettable for RtsrSpec { }