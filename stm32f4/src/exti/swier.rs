# [doc = "Register `SWIER` reader"] pub type R = crate :: R < SwierSpec > ; # [doc = "Register `SWIER` writer"] pub type W = crate :: W < SwierSpec > ; # [doc = "Software Interrupt on line %s\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum SoftwareInterrupt { # [doc = "1: Generates an interrupt request"] Pend = 1 , } impl From < SoftwareInterrupt > for bool { # [inline (always)] fn from (variant : SoftwareInterrupt) -> Self { variant as u8 != 0 } } # [doc = "Field `SWIER(0-22)` reader - Software Interrupt on line %s"] pub type SwierR = crate :: BitReader < SoftwareInterrupt > ; impl SwierR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < SoftwareInterrupt > { match self . bits { true => Some (SoftwareInterrupt :: Pend) , _ => None , } } # [doc = "Generates an interrupt request"] # [inline (always)] pub fn is_pend (& self) -> bool { * self == SoftwareInterrupt :: Pend } } # [doc = "Field `SWIER(0-22)` writer - Software Interrupt on line %s"] pub type SwierW < 'a , REG > = crate :: BitWriter < 'a , REG , SoftwareInterrupt > ; impl < 'a , REG > SwierW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Generates an interrupt request"] # [inline (always)] pub fn pend (self) -> & 'a mut crate :: W < REG > { self . variant (SoftwareInterrupt :: Pend) } } impl R { # [doc = "Software Interrupt on line (0-22)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `SWIER0` field.</div>"] # [inline (always)] pub fn swier (& self , n : u8) -> SwierR { # [allow (clippy :: no_effect)] [() ; 23] [n as usize] ; SwierR :: new (((self . bits >> n) & 1) != 0) } # [doc = "Iterator for array of:"] # [doc = "Software Interrupt on line (0-22)"] # [inline (always)] pub fn swier_iter (& self) -> impl Iterator < Item = SwierR > + '_ { (0 .. 23) . map (move | n | SwierR :: new (((self . bits >> n) & 1) != 0)) } # [doc = "Bit 0 - Software Interrupt on line 0"] # [inline (always)] pub fn swier0 (& self) -> SwierR { SwierR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Software Interrupt on line 1"] # [inline (always)] pub fn swier1 (& self) -> SwierR { SwierR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Software Interrupt on line 2"] # [inline (always)] pub fn swier2 (& self) -> SwierR { SwierR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Software Interrupt on line 3"] # [inline (always)] pub fn swier3 (& self) -> SwierR { SwierR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Software Interrupt on line 4"] # [inline (always)] pub fn swier4 (& self) -> SwierR { SwierR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Software Interrupt on line 5"] # [inline (always)] pub fn swier5 (& self) -> SwierR { SwierR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Software Interrupt on line 6"] # [inline (always)] pub fn swier6 (& self) -> SwierR { SwierR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Software Interrupt on line 7"] # [inline (always)] pub fn swier7 (& self) -> SwierR { SwierR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Software Interrupt on line 8"] # [inline (always)] pub fn swier8 (& self) -> SwierR { SwierR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Software Interrupt on line 9"] # [inline (always)] pub fn swier9 (& self) -> SwierR { SwierR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Software Interrupt on line 10"] # [inline (always)] pub fn swier10 (& self) -> SwierR { SwierR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Software Interrupt on line 11"] # [inline (always)] pub fn swier11 (& self) -> SwierR { SwierR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Software Interrupt on line 12"] # [inline (always)] pub fn swier12 (& self) -> SwierR { SwierR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Software Interrupt on line 13"] # [inline (always)] pub fn swier13 (& self) -> SwierR { SwierR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Software Interrupt on line 14"] # [inline (always)] pub fn swier14 (& self) -> SwierR { SwierR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Software Interrupt on line 15"] # [inline (always)] pub fn swier15 (& self) -> SwierR { SwierR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Software Interrupt on line 16"] # [inline (always)] pub fn swier16 (& self) -> SwierR { SwierR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - Software Interrupt on line 17"] # [inline (always)] pub fn swier17 (& self) -> SwierR { SwierR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - Software Interrupt on line 18"] # [inline (always)] pub fn swier18 (& self) -> SwierR { SwierR :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - Software Interrupt on line 19"] # [inline (always)] pub fn swier19 (& self) -> SwierR { SwierR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - Software Interrupt on line 20"] # [inline (always)] pub fn swier20 (& self) -> SwierR { SwierR :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - Software Interrupt on line 21"] # [inline (always)] pub fn swier21 (& self) -> SwierR { SwierR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - Software Interrupt on line 22"] # [inline (always)] pub fn swier22 (& self) -> SwierR { SwierR :: new (((self . bits >> 22) & 1) != 0) } } impl W { # [doc = "Software Interrupt on line (0-22)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `SWIER0` field.</div>"] # [inline (always)] pub fn swier (& mut self , n : u8) -> SwierW < SwierSpec > { # [allow (clippy :: no_effect)] [() ; 23] [n as usize] ; SwierW :: new (self , n) } # [doc = "Bit 0 - Software Interrupt on line 0"] # [inline (always)] pub fn swier0 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 0) } # [doc = "Bit 1 - Software Interrupt on line 1"] # [inline (always)] pub fn swier1 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 1) } # [doc = "Bit 2 - Software Interrupt on line 2"] # [inline (always)] pub fn swier2 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 2) } # [doc = "Bit 3 - Software Interrupt on line 3"] # [inline (always)] pub fn swier3 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 3) } # [doc = "Bit 4 - Software Interrupt on line 4"] # [inline (always)] pub fn swier4 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 4) } # [doc = "Bit 5 - Software Interrupt on line 5"] # [inline (always)] pub fn swier5 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 5) } # [doc = "Bit 6 - Software Interrupt on line 6"] # [inline (always)] pub fn swier6 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 6) } # [doc = "Bit 7 - Software Interrupt on line 7"] # [inline (always)] pub fn swier7 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 7) } # [doc = "Bit 8 - Software Interrupt on line 8"] # [inline (always)] pub fn swier8 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 8) } # [doc = "Bit 9 - Software Interrupt on line 9"] # [inline (always)] pub fn swier9 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 9) } # [doc = "Bit 10 - Software Interrupt on line 10"] # [inline (always)] pub fn swier10 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 10) } # [doc = "Bit 11 - Software Interrupt on line 11"] # [inline (always)] pub fn swier11 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 11) } # [doc = "Bit 12 - Software Interrupt on line 12"] # [inline (always)] pub fn swier12 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 12) } # [doc = "Bit 13 - Software Interrupt on line 13"] # [inline (always)] pub fn swier13 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 13) } # [doc = "Bit 14 - Software Interrupt on line 14"] # [inline (always)] pub fn swier14 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 14) } # [doc = "Bit 15 - Software Interrupt on line 15"] # [inline (always)] pub fn swier15 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 15) } # [doc = "Bit 16 - Software Interrupt on line 16"] # [inline (always)] pub fn swier16 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 16) } # [doc = "Bit 17 - Software Interrupt on line 17"] # [inline (always)] pub fn swier17 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 17) } # [doc = "Bit 18 - Software Interrupt on line 18"] # [inline (always)] pub fn swier18 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 18) } # [doc = "Bit 19 - Software Interrupt on line 19"] # [inline (always)] pub fn swier19 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 19) } # [doc = "Bit 20 - Software Interrupt on line 20"] # [inline (always)] pub fn swier20 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 20) } # [doc = "Bit 21 - Software Interrupt on line 21"] # [inline (always)] pub fn swier21 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 21) } # [doc = "Bit 22 - Software Interrupt on line 22"] # [inline (always)] pub fn swier22 (& mut self) -> SwierW < SwierSpec > { SwierW :: new (self , 22) } } # [doc = "Software interrupt event register (EXTI_SWIER)\n\nYou can [`read`](crate::Reg::read) this register and get [`swier::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swier::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SwierSpec ; impl crate :: RegisterSpec for SwierSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`swier::R`](R) reader structure"] impl crate :: Readable for SwierSpec { } # [doc = "`write(|w| ..)` method takes [`swier::W`](W) writer structure"] impl crate :: Writable for SwierSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets SWIER to value 0"] impl crate :: Resettable for SwierSpec { }