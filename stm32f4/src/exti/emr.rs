# [doc = "Register `EMR` reader"] pub type R = crate :: R < EmrSpec > ; # [doc = "Register `EMR` writer"] pub type W = crate :: W < EmrSpec > ; # [doc = "Event Mask on line %s\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum EventMask { # [doc = "0: Event request line is masked"] Masked = 0 , # [doc = "1: Event request line is unmasked"] Unmasked = 1 , } impl From < EventMask > for bool { # [inline (always)] fn from (variant : EventMask) -> Self { variant as u8 != 0 } } # [doc = "Field `MR(0-22)` reader - Event Mask on line %s"] pub type MrR = crate :: BitReader < EventMask > ; impl MrR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> EventMask { match self . bits { false => EventMask :: Masked , true => EventMask :: Unmasked , } } # [doc = "Event request line is masked"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == EventMask :: Masked } # [doc = "Event request line is unmasked"] # [inline (always)] pub fn is_unmasked (& self) -> bool { * self == EventMask :: Unmasked } } # [doc = "Field `MR(0-22)` writer - Event Mask on line %s"] pub type MrW < 'a , REG > = crate :: BitWriter < 'a , REG , EventMask > ; impl < 'a , REG > MrW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Event request line is masked"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (EventMask :: Masked) } # [doc = "Event request line is unmasked"] # [inline (always)] pub fn unmasked (self) -> & 'a mut crate :: W < REG > { self . variant (EventMask :: Unmasked) } } impl R { # [doc = "Event Mask on line (0-22)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `MR0` field.</div>"] # [inline (always)] pub fn mr (& self , n : u8) -> MrR { # [allow (clippy :: no_effect)] [() ; 23] [n as usize] ; MrR :: new (((self . bits >> n) & 1) != 0) } # [doc = "Iterator for array of:"] # [doc = "Event Mask on line (0-22)"] # [inline (always)] pub fn mr_iter (& self) -> impl Iterator < Item = MrR > + '_ { (0 .. 23) . map (move | n | MrR :: new (((self . bits >> n) & 1) != 0)) } # [doc = "Bit 0 - Event Mask on line 0"] # [inline (always)] pub fn mr0 (& self) -> MrR { MrR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Event Mask on line 1"] # [inline (always)] pub fn mr1 (& self) -> MrR { MrR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Event Mask on line 2"] # [inline (always)] pub fn mr2 (& self) -> MrR { MrR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Event Mask on line 3"] # [inline (always)] pub fn mr3 (& self) -> MrR { MrR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Event Mask on line 4"] # [inline (always)] pub fn mr4 (& self) -> MrR { MrR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Event Mask on line 5"] # [inline (always)] pub fn mr5 (& self) -> MrR { MrR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Event Mask on line 6"] # [inline (always)] pub fn mr6 (& self) -> MrR { MrR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Event Mask on line 7"] # [inline (always)] pub fn mr7 (& self) -> MrR { MrR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Event Mask on line 8"] # [inline (always)] pub fn mr8 (& self) -> MrR { MrR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Event Mask on line 9"] # [inline (always)] pub fn mr9 (& self) -> MrR { MrR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Event Mask on line 10"] # [inline (always)] pub fn mr10 (& self) -> MrR { MrR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Event Mask on line 11"] # [inline (always)] pub fn mr11 (& self) -> MrR { MrR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Event Mask on line 12"] # [inline (always)] pub fn mr12 (& self) -> MrR { MrR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Event Mask on line 13"] # [inline (always)] pub fn mr13 (& self) -> MrR { MrR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Event Mask on line 14"] # [inline (always)] pub fn mr14 (& self) -> MrR { MrR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Event Mask on line 15"] # [inline (always)] pub fn mr15 (& self) -> MrR { MrR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Event Mask on line 16"] # [inline (always)] pub fn mr16 (& self) -> MrR { MrR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - Event Mask on line 17"] # [inline (always)] pub fn mr17 (& self) -> MrR { MrR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - Event Mask on line 18"] # [inline (always)] pub fn mr18 (& self) -> MrR { MrR :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - Event Mask on line 19"] # [inline (always)] pub fn mr19 (& self) -> MrR { MrR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - Event Mask on line 20"] # [inline (always)] pub fn mr20 (& self) -> MrR { MrR :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - Event Mask on line 21"] # [inline (always)] pub fn mr21 (& self) -> MrR { MrR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - Event Mask on line 22"] # [inline (always)] pub fn mr22 (& self) -> MrR { MrR :: new (((self . bits >> 22) & 1) != 0) } } impl W { # [doc = "Event Mask on line (0-22)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `MR0` field.</div>"] # [inline (always)] pub fn mr (& mut self , n : u8) -> MrW < EmrSpec > { # [allow (clippy :: no_effect)] [() ; 23] [n as usize] ; MrW :: new (self , n) } # [doc = "Bit 0 - Event Mask on line 0"] # [inline (always)] pub fn mr0 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 0) } # [doc = "Bit 1 - Event Mask on line 1"] # [inline (always)] pub fn mr1 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 1) } # [doc = "Bit 2 - Event Mask on line 2"] # [inline (always)] pub fn mr2 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 2) } # [doc = "Bit 3 - Event Mask on line 3"] # [inline (always)] pub fn mr3 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 3) } # [doc = "Bit 4 - Event Mask on line 4"] # [inline (always)] pub fn mr4 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 4) } # [doc = "Bit 5 - Event Mask on line 5"] # [inline (always)] pub fn mr5 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 5) } # [doc = "Bit 6 - Event Mask on line 6"] # [inline (always)] pub fn mr6 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 6) } # [doc = "Bit 7 - Event Mask on line 7"] # [inline (always)] pub fn mr7 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 7) } # [doc = "Bit 8 - Event Mask on line 8"] # [inline (always)] pub fn mr8 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 8) } # [doc = "Bit 9 - Event Mask on line 9"] # [inline (always)] pub fn mr9 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 9) } # [doc = "Bit 10 - Event Mask on line 10"] # [inline (always)] pub fn mr10 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 10) } # [doc = "Bit 11 - Event Mask on line 11"] # [inline (always)] pub fn mr11 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 11) } # [doc = "Bit 12 - Event Mask on line 12"] # [inline (always)] pub fn mr12 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 12) } # [doc = "Bit 13 - Event Mask on line 13"] # [inline (always)] pub fn mr13 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 13) } # [doc = "Bit 14 - Event Mask on line 14"] # [inline (always)] pub fn mr14 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 14) } # [doc = "Bit 15 - Event Mask on line 15"] # [inline (always)] pub fn mr15 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 15) } # [doc = "Bit 16 - Event Mask on line 16"] # [inline (always)] pub fn mr16 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 16) } # [doc = "Bit 17 - Event Mask on line 17"] # [inline (always)] pub fn mr17 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 17) } # [doc = "Bit 18 - Event Mask on line 18"] # [inline (always)] pub fn mr18 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 18) } # [doc = "Bit 19 - Event Mask on line 19"] # [inline (always)] pub fn mr19 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 19) } # [doc = "Bit 20 - Event Mask on line 20"] # [inline (always)] pub fn mr20 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 20) } # [doc = "Bit 21 - Event Mask on line 21"] # [inline (always)] pub fn mr21 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 21) } # [doc = "Bit 22 - Event Mask on line 22"] # [inline (always)] pub fn mr22 (& mut self) -> MrW < EmrSpec > { MrW :: new (self , 22) } } # [doc = "Event mask register (EXTI_EMR)\n\nYou can [`read`](crate::Reg::read) this register and get [`emr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`emr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EmrSpec ; impl crate :: RegisterSpec for EmrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`emr::R`](R) reader structure"] impl crate :: Readable for EmrSpec { } # [doc = "`write(|w| ..)` method takes [`emr::W`](W) writer structure"] impl crate :: Writable for EmrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets EMR to value 0"] impl crate :: Resettable for EmrSpec { }