# [doc = "Register `PR` reader"] pub type R = crate :: R < PrSpec > ; # [doc = "Register `PR` writer"] pub type W = crate :: W < PrSpec > ; # [doc = "Pending bit %s\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Pr0r { # [doc = "0: No trigger request occurred"] NotPending = 0 , # [doc = "1: Selected trigger request occurred"] Pending = 1 , } impl From < Pr0r > for bool { # [inline (always)] fn from (variant : Pr0r) -> Self { variant as u8 != 0 } } # [doc = "Field `PR(0-22)` reader - Pending bit %s"] pub type PrR = crate :: BitReader < Pr0r > ; impl PrR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Pr0r { match self . bits { false => Pr0r :: NotPending , true => Pr0r :: Pending , } } # [doc = "No trigger request occurred"] # [inline (always)] pub fn is_not_pending (& self) -> bool { * self == Pr0r :: NotPending } # [doc = "Selected trigger request occurred"] # [inline (always)] pub fn is_pending (& self) -> bool { * self == Pr0r :: Pending } } # [doc = "Pending bit %s\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Pr0wWO { # [doc = "1: Clears pending bit"] Clear = 1 , } impl From < Pr0wWO > for bool { # [inline (always)] fn from (variant : Pr0wWO) -> Self { variant as u8 != 0 } } # [doc = "Field `PR(0-22)` writer - Pending bit %s"] pub type PrW < 'a , REG > = crate :: BitWriter1C < 'a , REG , Pr0wWO > ; impl < 'a , REG > PrW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clears pending bit"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (Pr0wWO :: Clear) } } impl R { # [doc = "Pending bit (0-22)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `PR0` field.</div>"] # [inline (always)] pub fn pr (& self , n : u8) -> PrR { # [allow (clippy :: no_effect)] [() ; 23] [n as usize] ; PrR :: new (((self . bits >> n) & 1) != 0) } # [doc = "Iterator for array of:"] # [doc = "Pending bit (0-22)"] # [inline (always)] pub fn pr_iter (& self) -> impl Iterator < Item = PrR > + '_ { (0 .. 23) . map (move | n | PrR :: new (((self . bits >> n) & 1) != 0)) } # [doc = "Bit 0 - Pending bit 0"] # [inline (always)] pub fn pr0 (& self) -> PrR { PrR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Pending bit 1"] # [inline (always)] pub fn pr1 (& self) -> PrR { PrR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Pending bit 2"] # [inline (always)] pub fn pr2 (& self) -> PrR { PrR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Pending bit 3"] # [inline (always)] pub fn pr3 (& self) -> PrR { PrR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Pending bit 4"] # [inline (always)] pub fn pr4 (& self) -> PrR { PrR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Pending bit 5"] # [inline (always)] pub fn pr5 (& self) -> PrR { PrR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Pending bit 6"] # [inline (always)] pub fn pr6 (& self) -> PrR { PrR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Pending bit 7"] # [inline (always)] pub fn pr7 (& self) -> PrR { PrR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Pending bit 8"] # [inline (always)] pub fn pr8 (& self) -> PrR { PrR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Pending bit 9"] # [inline (always)] pub fn pr9 (& self) -> PrR { PrR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Pending bit 10"] # [inline (always)] pub fn pr10 (& self) -> PrR { PrR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Pending bit 11"] # [inline (always)] pub fn pr11 (& self) -> PrR { PrR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Pending bit 12"] # [inline (always)] pub fn pr12 (& self) -> PrR { PrR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Pending bit 13"] # [inline (always)] pub fn pr13 (& self) -> PrR { PrR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Pending bit 14"] # [inline (always)] pub fn pr14 (& self) -> PrR { PrR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Pending bit 15"] # [inline (always)] pub fn pr15 (& self) -> PrR { PrR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Pending bit 16"] # [inline (always)] pub fn pr16 (& self) -> PrR { PrR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - Pending bit 17"] # [inline (always)] pub fn pr17 (& self) -> PrR { PrR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - Pending bit 18"] # [inline (always)] pub fn pr18 (& self) -> PrR { PrR :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - Pending bit 19"] # [inline (always)] pub fn pr19 (& self) -> PrR { PrR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - Pending bit 20"] # [inline (always)] pub fn pr20 (& self) -> PrR { PrR :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - Pending bit 21"] # [inline (always)] pub fn pr21 (& self) -> PrR { PrR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - Pending bit 22"] # [inline (always)] pub fn pr22 (& self) -> PrR { PrR :: new (((self . bits >> 22) & 1) != 0) } } impl W { # [doc = "Pending bit (0-22)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `PR0` field.</div>"] # [inline (always)] pub fn pr (& mut self , n : u8) -> PrW < PrSpec > { # [allow (clippy :: no_effect)] [() ; 23] [n as usize] ; PrW :: new (self , n) } # [doc = "Bit 0 - Pending bit 0"] # [inline (always)] pub fn pr0 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 0) } # [doc = "Bit 1 - Pending bit 1"] # [inline (always)] pub fn pr1 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 1) } # [doc = "Bit 2 - Pending bit 2"] # [inline (always)] pub fn pr2 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 2) } # [doc = "Bit 3 - Pending bit 3"] # [inline (always)] pub fn pr3 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 3) } # [doc = "Bit 4 - Pending bit 4"] # [inline (always)] pub fn pr4 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 4) } # [doc = "Bit 5 - Pending bit 5"] # [inline (always)] pub fn pr5 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 5) } # [doc = "Bit 6 - Pending bit 6"] # [inline (always)] pub fn pr6 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 6) } # [doc = "Bit 7 - Pending bit 7"] # [inline (always)] pub fn pr7 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 7) } # [doc = "Bit 8 - Pending bit 8"] # [inline (always)] pub fn pr8 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 8) } # [doc = "Bit 9 - Pending bit 9"] # [inline (always)] pub fn pr9 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 9) } # [doc = "Bit 10 - Pending bit 10"] # [inline (always)] pub fn pr10 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 10) } # [doc = "Bit 11 - Pending bit 11"] # [inline (always)] pub fn pr11 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 11) } # [doc = "Bit 12 - Pending bit 12"] # [inline (always)] pub fn pr12 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 12) } # [doc = "Bit 13 - Pending bit 13"] # [inline (always)] pub fn pr13 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 13) } # [doc = "Bit 14 - Pending bit 14"] # [inline (always)] pub fn pr14 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 14) } # [doc = "Bit 15 - Pending bit 15"] # [inline (always)] pub fn pr15 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 15) } # [doc = "Bit 16 - Pending bit 16"] # [inline (always)] pub fn pr16 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 16) } # [doc = "Bit 17 - Pending bit 17"] # [inline (always)] pub fn pr17 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 17) } # [doc = "Bit 18 - Pending bit 18"] # [inline (always)] pub fn pr18 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 18) } # [doc = "Bit 19 - Pending bit 19"] # [inline (always)] pub fn pr19 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 19) } # [doc = "Bit 20 - Pending bit 20"] # [inline (always)] pub fn pr20 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 20) } # [doc = "Bit 21 - Pending bit 21"] # [inline (always)] pub fn pr21 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 21) } # [doc = "Bit 22 - Pending bit 22"] # [inline (always)] pub fn pr22 (& mut self) -> PrW < PrSpec > { PrW :: new (self , 22) } } # [doc = "Pending register (EXTI_PR)\n\nYou can [`read`](crate::Reg::read) this register and get [`pr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PrSpec ; impl crate :: RegisterSpec for PrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`pr::R`](R) reader structure"] impl crate :: Readable for PrSpec { } # [doc = "`write(|w| ..)` method takes [`pr::W`](W) writer structure"] impl crate :: Writable for PrSpec { type Safety = crate :: Unsafe ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0x007f_ffff ; } # [doc = "`reset()` method sets PR to value 0"] impl crate :: Resettable for PrSpec { }