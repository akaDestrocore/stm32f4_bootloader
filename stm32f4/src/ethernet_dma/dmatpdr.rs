# [doc = "Register `DMATPDR` reader"] pub type R = crate :: R < DmatpdrSpec > ; # [doc = "Register `DMATPDR` writer"] pub type W = crate :: W < DmatpdrSpec > ; # [doc = "Transmit poll demand\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u32)] pub enum Tpd { # [doc = "0: Poll the transmit descriptor list"] Poll = 0 , } impl From < Tpd > for u32 { # [inline (always)] fn from (variant : Tpd) -> Self { variant as _ } } impl crate :: FieldSpec for Tpd { type Ux = u32 ; } impl crate :: IsEnum for Tpd { } # [doc = "Field `TPD` reader - Transmit poll demand"] pub type TpdR = crate :: FieldReader < Tpd > ; impl TpdR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Tpd > { match self . bits { 0 => Some (Tpd :: Poll) , _ => None , } } # [doc = "Poll the transmit descriptor list"] # [inline (always)] pub fn is_poll (& self) -> bool { * self == Tpd :: Poll } } # [doc = "Field `TPD` writer - Transmit poll demand"] pub type TpdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , Tpd > ; impl < 'a , REG > TpdW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u32 > { # [doc = "Poll the transmit descriptor list"] # [inline (always)] pub fn poll (self) -> & 'a mut crate :: W < REG > { self . variant (Tpd :: Poll) } } impl R { # [doc = "Bits 0:31 - Transmit poll demand"] # [inline (always)] pub fn tpd (& self) -> TpdR { TpdR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - Transmit poll demand"] # [inline (always)] pub fn tpd (& mut self) -> TpdW < DmatpdrSpec > { TpdW :: new (self , 0) } } # [doc = "Ethernet DMA transmit poll demand register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmatpdr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmatpdr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmatpdrSpec ; impl crate :: RegisterSpec for DmatpdrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`dmatpdr::R`](R) reader structure"] impl crate :: Readable for DmatpdrSpec { } # [doc = "`write(|w| ..)` method takes [`dmatpdr::W`](W) writer structure"] impl crate :: Writable for DmatpdrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets DMATPDR to value 0"] impl crate :: Resettable for DmatpdrSpec { }