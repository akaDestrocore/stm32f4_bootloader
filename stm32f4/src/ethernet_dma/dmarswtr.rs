# [doc = "Register `DMARSWTR` reader"] pub type R = crate :: R < DmarswtrSpec > ; # [doc = "Register `DMARSWTR` writer"] pub type W = crate :: W < DmarswtrSpec > ; # [doc = "Field `RSWTC` reader - Receive status watchdog timer count"] pub type RswtcR = crate :: FieldReader ; # [doc = "Field `RSWTC` writer - Receive status watchdog timer count"] pub type RswtcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 , u8 , crate :: Safe > ; impl R { # [doc = "Bits 0:7 - Receive status watchdog timer count"] # [inline (always)] pub fn rswtc (& self) -> RswtcR { RswtcR :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7 - Receive status watchdog timer count"] # [inline (always)] pub fn rswtc (& mut self) -> RswtcW < DmarswtrSpec > { RswtcW :: new (self , 0) } } # [doc = "Ethernet DMA receive status watchdog timer register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmarswtr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmarswtr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmarswtrSpec ; impl crate :: RegisterSpec for DmarswtrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`dmarswtr::R`](R) reader structure"] impl crate :: Readable for DmarswtrSpec { } # [doc = "`write(|w| ..)` method takes [`dmarswtr::W`](W) writer structure"] impl crate :: Writable for DmarswtrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets DMARSWTR to value 0"] impl crate :: Resettable for DmarswtrSpec { }