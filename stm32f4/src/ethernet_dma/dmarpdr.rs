# [doc = "Register `DMARPDR` reader"] pub type R = crate :: R < DmarpdrSpec > ; # [doc = "Register `DMARPDR` writer"] pub type W = crate :: W < DmarpdrSpec > ; # [doc = "Receive poll demand\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u32)] pub enum Rpd { # [doc = "0: Poll the receive descriptor list"] Poll = 0 , } impl From < Rpd > for u32 { # [inline (always)] fn from (variant : Rpd) -> Self { variant as _ } } impl crate :: FieldSpec for Rpd { type Ux = u32 ; } impl crate :: IsEnum for Rpd { } # [doc = "Field `RPD` reader - Receive poll demand"] pub type RpdR = crate :: FieldReader < Rpd > ; impl RpdR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Rpd > { match self . bits { 0 => Some (Rpd :: Poll) , _ => None , } } # [doc = "Poll the receive descriptor list"] # [inline (always)] pub fn is_poll (& self) -> bool { * self == Rpd :: Poll } } # [doc = "Field `RPD` writer - Receive poll demand"] pub type RpdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , Rpd > ; impl < 'a , REG > RpdW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u32 > { # [doc = "Poll the receive descriptor list"] # [inline (always)] pub fn poll (self) -> & 'a mut crate :: W < REG > { self . variant (Rpd :: Poll) } } impl R { # [doc = "Bits 0:31 - Receive poll demand"] # [inline (always)] pub fn rpd (& self) -> RpdR { RpdR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - Receive poll demand"] # [inline (always)] pub fn rpd (& mut self) -> RpdW < DmarpdrSpec > { RpdW :: new (self , 0) } } # [doc = "EHERNET DMA receive poll demand register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmarpdr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmarpdr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmarpdrSpec ; impl crate :: RegisterSpec for DmarpdrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`dmarpdr::R`](R) reader structure"] impl crate :: Readable for DmarpdrSpec { } # [doc = "`write(|w| ..)` method takes [`dmarpdr::W`](W) writer structure"] impl crate :: Writable for DmarpdrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets DMARPDR to value 0"] impl crate :: Resettable for DmarpdrSpec { }