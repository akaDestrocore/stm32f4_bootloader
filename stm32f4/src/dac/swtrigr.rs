# [doc = "Register `SWTRIGR` writer"] pub type W = crate :: W < SwtrigrSpec > ; # [doc = "DAC channel1 software trigger\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Swtrig1 { # [doc = "0: DAC channel X software trigger disabled"] Disabled = 0 , # [doc = "1: DAC channel X software trigger enabled"] Enabled = 1 , } impl From < Swtrig1 > for bool { # [inline (always)] fn from (variant : Swtrig1) -> Self { variant as u8 != 0 } } # [doc = "Field `SWTRIG1` writer - DAC channel1 software trigger"] pub type Swtrig1W < 'a , REG > = crate :: BitWriter < 'a , REG , Swtrig1 > ; impl < 'a , REG > Swtrig1W < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "DAC channel X software trigger disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Swtrig1 :: Disabled) } # [doc = "DAC channel X software trigger enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Swtrig1 :: Enabled) } } # [doc = "Field `SWTRIG2` writer - DAC channel2 software trigger"] pub use Swtrig1W as Swtrig2W ; impl W { # [doc = "Bit 0 - DAC channel1 software trigger"] # [inline (always)] pub fn swtrig1 (& mut self) -> Swtrig1W < SwtrigrSpec > { Swtrig1W :: new (self , 0) } # [doc = "Bit 1 - DAC channel2 software trigger"] # [inline (always)] pub fn swtrig2 (& mut self) -> Swtrig2W < SwtrigrSpec > { Swtrig2W :: new (self , 1) } } # [doc = "software trigger register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swtrigr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SwtrigrSpec ; impl crate :: RegisterSpec for SwtrigrSpec { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`swtrigr::W`](W) writer structure"] impl crate :: Writable for SwtrigrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets SWTRIGR to value 0"] impl crate :: Resettable for SwtrigrSpec { }