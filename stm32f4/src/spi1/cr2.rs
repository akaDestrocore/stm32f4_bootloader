# [doc = "Register `CR2` reader"] pub type R = crate :: R < Cr2Spec > ; # [doc = "Register `CR2` writer"] pub type W = crate :: W < Cr2Spec > ; # [doc = "Rx buffer DMA enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Rxdmaen { # [doc = "0: Rx buffer DMA disabled"] Disabled = 0 , # [doc = "1: Rx buffer DMA enabled"] Enabled = 1 , } impl From < Rxdmaen > for bool { # [inline (always)] fn from (variant : Rxdmaen) -> Self { variant as u8 != 0 } } # [doc = "Field `RXDMAEN` reader - Rx buffer DMA enable"] pub type RxdmaenR = crate :: BitReader < Rxdmaen > ; impl RxdmaenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Rxdmaen { match self . bits { false => Rxdmaen :: Disabled , true => Rxdmaen :: Enabled , } } # [doc = "Rx buffer DMA disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Rxdmaen :: Disabled } # [doc = "Rx buffer DMA enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Rxdmaen :: Enabled } } # [doc = "Field `RXDMAEN` writer - Rx buffer DMA enable"] pub type RxdmaenW < 'a , REG > = crate :: BitWriter < 'a , REG , Rxdmaen > ; impl < 'a , REG > RxdmaenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Rx buffer DMA disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Rxdmaen :: Disabled) } # [doc = "Rx buffer DMA enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Rxdmaen :: Enabled) } } # [doc = "Tx buffer DMA enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Txdmaen { # [doc = "0: Tx buffer DMA disabled"] Disabled = 0 , # [doc = "1: Tx buffer DMA enabled"] Enabled = 1 , } impl From < Txdmaen > for bool { # [inline (always)] fn from (variant : Txdmaen) -> Self { variant as u8 != 0 } } # [doc = "Field `TXDMAEN` reader - Tx buffer DMA enable"] pub type TxdmaenR = crate :: BitReader < Txdmaen > ; impl TxdmaenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Txdmaen { match self . bits { false => Txdmaen :: Disabled , true => Txdmaen :: Enabled , } } # [doc = "Tx buffer DMA disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Txdmaen :: Disabled } # [doc = "Tx buffer DMA enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Txdmaen :: Enabled } } # [doc = "Field `TXDMAEN` writer - Tx buffer DMA enable"] pub type TxdmaenW < 'a , REG > = crate :: BitWriter < 'a , REG , Txdmaen > ; impl < 'a , REG > TxdmaenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Tx buffer DMA disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Txdmaen :: Disabled) } # [doc = "Tx buffer DMA enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Txdmaen :: Enabled) } } # [doc = "SS output enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ssoe { # [doc = "0: SS output is disabled in master mode"] Disabled = 0 , # [doc = "1: SS output is enabled in master mode"] Enabled = 1 , } impl From < Ssoe > for bool { # [inline (always)] fn from (variant : Ssoe) -> Self { variant as u8 != 0 } } # [doc = "Field `SSOE` reader - SS output enable"] pub type SsoeR = crate :: BitReader < Ssoe > ; impl SsoeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Ssoe { match self . bits { false => Ssoe :: Disabled , true => Ssoe :: Enabled , } } # [doc = "SS output is disabled in master mode"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Ssoe :: Disabled } # [doc = "SS output is enabled in master mode"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Ssoe :: Enabled } } # [doc = "Field `SSOE` writer - SS output enable"] pub type SsoeW < 'a , REG > = crate :: BitWriter < 'a , REG , Ssoe > ; impl < 'a , REG > SsoeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "SS output is disabled in master mode"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Ssoe :: Disabled) } # [doc = "SS output is enabled in master mode"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Ssoe :: Enabled) } } # [doc = "Frame format\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Frf { # [doc = "0: SPI Motorola mode"] Motorola = 0 , # [doc = "1: SPI TI mode"] Ti = 1 , } impl From < Frf > for bool { # [inline (always)] fn from (variant : Frf) -> Self { variant as u8 != 0 } } # [doc = "Field `FRF` reader - Frame format"] pub type FrfR = crate :: BitReader < Frf > ; impl FrfR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Frf { match self . bits { false => Frf :: Motorola , true => Frf :: Ti , } } # [doc = "SPI Motorola mode"] # [inline (always)] pub fn is_motorola (& self) -> bool { * self == Frf :: Motorola } # [doc = "SPI TI mode"] # [inline (always)] pub fn is_ti (& self) -> bool { * self == Frf :: Ti } } # [doc = "Field `FRF` writer - Frame format"] pub type FrfW < 'a , REG > = crate :: BitWriter < 'a , REG , Frf > ; impl < 'a , REG > FrfW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "SPI Motorola mode"] # [inline (always)] pub fn motorola (self) -> & 'a mut crate :: W < REG > { self . variant (Frf :: Motorola) } # [doc = "SPI TI mode"] # [inline (always)] pub fn ti (self) -> & 'a mut crate :: W < REG > { self . variant (Frf :: Ti) } } # [doc = "Error interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Errie { # [doc = "0: Error interrupt masked"] Masked = 0 , # [doc = "1: Error interrupt not masked"] NotMasked = 1 , } impl From < Errie > for bool { # [inline (always)] fn from (variant : Errie) -> Self { variant as u8 != 0 } } # [doc = "Field `ERRIE` reader - Error interrupt enable"] pub type ErrieR = crate :: BitReader < Errie > ; impl ErrieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Errie { match self . bits { false => Errie :: Masked , true => Errie :: NotMasked , } } # [doc = "Error interrupt masked"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Errie :: Masked } # [doc = "Error interrupt not masked"] # [inline (always)] pub fn is_not_masked (& self) -> bool { * self == Errie :: NotMasked } } # [doc = "Field `ERRIE` writer - Error interrupt enable"] pub type ErrieW < 'a , REG > = crate :: BitWriter < 'a , REG , Errie > ; impl < 'a , REG > ErrieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Error interrupt masked"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Errie :: Masked) } # [doc = "Error interrupt not masked"] # [inline (always)] pub fn not_masked (self) -> & 'a mut crate :: W < REG > { self . variant (Errie :: NotMasked) } } # [doc = "RX buffer not empty interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Rxneie { # [doc = "0: RXE interrupt masked"] Masked = 0 , # [doc = "1: RXE interrupt not masked"] NotMasked = 1 , } impl From < Rxneie > for bool { # [inline (always)] fn from (variant : Rxneie) -> Self { variant as u8 != 0 } } # [doc = "Field `RXNEIE` reader - RX buffer not empty interrupt enable"] pub type RxneieR = crate :: BitReader < Rxneie > ; impl RxneieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Rxneie { match self . bits { false => Rxneie :: Masked , true => Rxneie :: NotMasked , } } # [doc = "RXE interrupt masked"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Rxneie :: Masked } # [doc = "RXE interrupt not masked"] # [inline (always)] pub fn is_not_masked (& self) -> bool { * self == Rxneie :: NotMasked } } # [doc = "Field `RXNEIE` writer - RX buffer not empty interrupt enable"] pub type RxneieW < 'a , REG > = crate :: BitWriter < 'a , REG , Rxneie > ; impl < 'a , REG > RxneieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "RXE interrupt masked"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Rxneie :: Masked) } # [doc = "RXE interrupt not masked"] # [inline (always)] pub fn not_masked (self) -> & 'a mut crate :: W < REG > { self . variant (Rxneie :: NotMasked) } } # [doc = "Tx buffer empty interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Txeie { # [doc = "0: TXE interrupt masked"] Masked = 0 , # [doc = "1: TXE interrupt not masked"] NotMasked = 1 , } impl From < Txeie > for bool { # [inline (always)] fn from (variant : Txeie) -> Self { variant as u8 != 0 } } # [doc = "Field `TXEIE` reader - Tx buffer empty interrupt enable"] pub type TxeieR = crate :: BitReader < Txeie > ; impl TxeieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Txeie { match self . bits { false => Txeie :: Masked , true => Txeie :: NotMasked , } } # [doc = "TXE interrupt masked"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Txeie :: Masked } # [doc = "TXE interrupt not masked"] # [inline (always)] pub fn is_not_masked (& self) -> bool { * self == Txeie :: NotMasked } } # [doc = "Field `TXEIE` writer - Tx buffer empty interrupt enable"] pub type TxeieW < 'a , REG > = crate :: BitWriter < 'a , REG , Txeie > ; impl < 'a , REG > TxeieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "TXE interrupt masked"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Txeie :: Masked) } # [doc = "TXE interrupt not masked"] # [inline (always)] pub fn not_masked (self) -> & 'a mut crate :: W < REG > { self . variant (Txeie :: NotMasked) } } impl R { # [doc = "Bit 0 - Rx buffer DMA enable"] # [inline (always)] pub fn rxdmaen (& self) -> RxdmaenR { RxdmaenR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Tx buffer DMA enable"] # [inline (always)] pub fn txdmaen (& self) -> TxdmaenR { TxdmaenR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - SS output enable"] # [inline (always)] pub fn ssoe (& self) -> SsoeR { SsoeR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 4 - Frame format"] # [inline (always)] pub fn frf (& self) -> FrfR { FrfR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Error interrupt enable"] # [inline (always)] pub fn errie (& self) -> ErrieR { ErrieR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - RX buffer not empty interrupt enable"] # [inline (always)] pub fn rxneie (& self) -> RxneieR { RxneieR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Tx buffer empty interrupt enable"] # [inline (always)] pub fn txeie (& self) -> TxeieR { TxeieR :: new (((self . bits >> 7) & 1) != 0) } } impl W { # [doc = "Bit 0 - Rx buffer DMA enable"] # [inline (always)] pub fn rxdmaen (& mut self) -> RxdmaenW < Cr2Spec > { RxdmaenW :: new (self , 0) } # [doc = "Bit 1 - Tx buffer DMA enable"] # [inline (always)] pub fn txdmaen (& mut self) -> TxdmaenW < Cr2Spec > { TxdmaenW :: new (self , 1) } # [doc = "Bit 2 - SS output enable"] # [inline (always)] pub fn ssoe (& mut self) -> SsoeW < Cr2Spec > { SsoeW :: new (self , 2) } # [doc = "Bit 4 - Frame format"] # [inline (always)] pub fn frf (& mut self) -> FrfW < Cr2Spec > { FrfW :: new (self , 4) } # [doc = "Bit 5 - Error interrupt enable"] # [inline (always)] pub fn errie (& mut self) -> ErrieW < Cr2Spec > { ErrieW :: new (self , 5) } # [doc = "Bit 6 - RX buffer not empty interrupt enable"] # [inline (always)] pub fn rxneie (& mut self) -> RxneieW < Cr2Spec > { RxneieW :: new (self , 6) } # [doc = "Bit 7 - Tx buffer empty interrupt enable"] # [inline (always)] pub fn txeie (& mut self) -> TxeieW < Cr2Spec > { TxeieW :: new (self , 7) } } # [doc = "control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr2Spec ; impl crate :: RegisterSpec for Cr2Spec { type Ux = u16 ; } # [doc = "`read()` method returns [`cr2::R`](R) reader structure"] impl crate :: Readable for Cr2Spec { } # [doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"] impl crate :: Writable for Cr2Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CR2 to value 0"] impl crate :: Resettable for Cr2Spec { }