# [doc = "Register `I2SPR` reader"] pub type R = crate :: R < I2sprSpec > ; # [doc = "Register `I2SPR` writer"] pub type W = crate :: W < I2sprSpec > ; # [doc = "Field `I2SDIV` reader - I2S Linear prescaler"] pub type I2sdivR = crate :: FieldReader ; # [doc = "Field `I2SDIV` writer - I2S Linear prescaler"] pub type I2sdivW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; # [doc = "Odd factor for the prescaler\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Odd { # [doc = "0: Real divider value is I2SDIV * 2"] Even = 0 , # [doc = "1: Real divider value is (I2SDIV * 2) + 1"] Odd = 1 , } impl From < Odd > for bool { # [inline (always)] fn from (variant : Odd) -> Self { variant as u8 != 0 } } # [doc = "Field `ODD` reader - Odd factor for the prescaler"] pub type OddR = crate :: BitReader < Odd > ; impl OddR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Odd { match self . bits { false => Odd :: Even , true => Odd :: Odd , } } # [doc = "Real divider value is I2SDIV * 2"] # [inline (always)] pub fn is_even (& self) -> bool { * self == Odd :: Even } # [doc = "Real divider value is (I2SDIV * 2) + 1"] # [inline (always)] pub fn is_odd (& self) -> bool { * self == Odd :: Odd } } # [doc = "Field `ODD` writer - Odd factor for the prescaler"] pub type OddW < 'a , REG > = crate :: BitWriter < 'a , REG , Odd > ; impl < 'a , REG > OddW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Real divider value is I2SDIV * 2"] # [inline (always)] pub fn even (self) -> & 'a mut crate :: W < REG > { self . variant (Odd :: Even) } # [doc = "Real divider value is (I2SDIV * 2) + 1"] # [inline (always)] pub fn odd (self) -> & 'a mut crate :: W < REG > { self . variant (Odd :: Odd) } } # [doc = "Master clock output enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Mckoe { # [doc = "0: Master clock output is disabled"] Disabled = 0 , # [doc = "1: Master clock output is enabled"] Enabled = 1 , } impl From < Mckoe > for bool { # [inline (always)] fn from (variant : Mckoe) -> Self { variant as u8 != 0 } } # [doc = "Field `MCKOE` reader - Master clock output enable"] pub type MckoeR = crate :: BitReader < Mckoe > ; impl MckoeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Mckoe { match self . bits { false => Mckoe :: Disabled , true => Mckoe :: Enabled , } } # [doc = "Master clock output is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Mckoe :: Disabled } # [doc = "Master clock output is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Mckoe :: Enabled } } # [doc = "Field `MCKOE` writer - Master clock output enable"] pub type MckoeW < 'a , REG > = crate :: BitWriter < 'a , REG , Mckoe > ; impl < 'a , REG > MckoeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Master clock output is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Mckoe :: Disabled) } # [doc = "Master clock output is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Mckoe :: Enabled) } } impl R { # [doc = "Bits 0:7 - I2S Linear prescaler"] # [inline (always)] pub fn i2sdiv (& self) -> I2sdivR { I2sdivR :: new ((self . bits & 0xff) as u8) } # [doc = "Bit 8 - Odd factor for the prescaler"] # [inline (always)] pub fn odd (& self) -> OddR { OddR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Master clock output enable"] # [inline (always)] pub fn mckoe (& self) -> MckoeR { MckoeR :: new (((self . bits >> 9) & 1) != 0) } } impl W { # [doc = "Bits 0:7 - I2S Linear prescaler"] # [inline (always)] pub fn i2sdiv (& mut self) -> I2sdivW < I2sprSpec > { I2sdivW :: new (self , 0) } # [doc = "Bit 8 - Odd factor for the prescaler"] # [inline (always)] pub fn odd (& mut self) -> OddW < I2sprSpec > { OddW :: new (self , 8) } # [doc = "Bit 9 - Master clock output enable"] # [inline (always)] pub fn mckoe (& mut self) -> MckoeW < I2sprSpec > { MckoeW :: new (self , 9) } } # [doc = "I2S prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`i2spr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`i2spr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct I2sprSpec ; impl crate :: RegisterSpec for I2sprSpec { type Ux = u16 ; } # [doc = "`read()` method returns [`i2spr::R`](R) reader structure"] impl crate :: Readable for I2sprSpec { } # [doc = "`write(|w| ..)` method takes [`i2spr::W`](W) writer structure"] impl crate :: Writable for I2sprSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets I2SPR to value 0x0a"] impl crate :: Resettable for I2sprSpec { const RESET_VALUE : u16 = 0x0a ; }