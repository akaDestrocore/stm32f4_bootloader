# [doc = "Register `DR8` reader"] pub type R = crate :: R < Dr8Spec > ; # [doc = "Register `DR8` writer"] pub type W = crate :: W < Dr8Spec > ; # [doc = "Field `DR` reader - Data register"] pub type DrR = crate :: FieldReader ; # [doc = "Field `DR` writer - Data register"] pub type DrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 , u8 , crate :: Safe > ; impl R { # [doc = "Bits 0:7 - Data register"] # [inline (always)] pub fn dr (& self) -> DrR { DrR :: new (self . bits) } } impl W { # [doc = "Bits 0:7 - Data register"] # [inline (always)] pub fn dr (& mut self) -> DrW < Dr8Spec > { DrW :: new (self , 0) } } # [doc = "Direct 8-bit access to data register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr8::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr8::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Dr8Spec ; impl crate :: RegisterSpec for Dr8Spec { type Ux = u8 ; } # [doc = "`read()` method returns [`dr8::R`](R) reader structure"] impl crate :: Readable for Dr8Spec { } # [doc = "`write(|w| ..)` method takes [`dr8::W`](W) writer structure"] impl crate :: Writable for Dr8Spec { type Safety = crate :: Safe ; } # [doc = "`reset()` method sets DR8 to value 0"] impl crate :: Resettable for Dr8Spec { }