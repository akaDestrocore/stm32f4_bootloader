# [doc = "Register `FA1R` reader"] pub type R = crate :: R < Fa1rSpec > ; # [doc = "Register `FA1R` writer"] pub type W = crate :: W < Fa1rSpec > ; # [doc = "Field `FACT(0-27)` reader - Filter active"] pub type FactR = crate :: BitReader ; # [doc = "Field `FACT(0-27)` writer - Filter active"] pub type FactW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R { # [doc = "Filter active"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `FACT0` field.</div>"] # [inline (always)] pub fn fact (& self , n : u8) -> FactR { # [allow (clippy :: no_effect)] [() ; 28] [n as usize] ; FactR :: new (((self . bits >> n) & 1) != 0) } # [doc = "Iterator for array of:"] # [doc = "Filter active"] # [inline (always)] pub fn fact_iter (& self) -> impl Iterator < Item = FactR > + '_ { (0 .. 28) . map (move | n | FactR :: new (((self . bits >> n) & 1) != 0)) } # [doc = "Bit 0 - Filter active"] # [inline (always)] pub fn fact0 (& self) -> FactR { FactR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Filter active"] # [inline (always)] pub fn fact1 (& self) -> FactR { FactR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Filter active"] # [inline (always)] pub fn fact2 (& self) -> FactR { FactR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Filter active"] # [inline (always)] pub fn fact3 (& self) -> FactR { FactR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Filter active"] # [inline (always)] pub fn fact4 (& self) -> FactR { FactR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Filter active"] # [inline (always)] pub fn fact5 (& self) -> FactR { FactR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Filter active"] # [inline (always)] pub fn fact6 (& self) -> FactR { FactR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Filter active"] # [inline (always)] pub fn fact7 (& self) -> FactR { FactR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Filter active"] # [inline (always)] pub fn fact8 (& self) -> FactR { FactR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Filter active"] # [inline (always)] pub fn fact9 (& self) -> FactR { FactR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Filter active"] # [inline (always)] pub fn fact10 (& self) -> FactR { FactR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Filter active"] # [inline (always)] pub fn fact11 (& self) -> FactR { FactR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Filter active"] # [inline (always)] pub fn fact12 (& self) -> FactR { FactR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Filter active"] # [inline (always)] pub fn fact13 (& self) -> FactR { FactR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Filter active"] # [inline (always)] pub fn fact14 (& self) -> FactR { FactR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Filter active"] # [inline (always)] pub fn fact15 (& self) -> FactR { FactR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Filter active"] # [inline (always)] pub fn fact16 (& self) -> FactR { FactR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - Filter active"] # [inline (always)] pub fn fact17 (& self) -> FactR { FactR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - Filter active"] # [inline (always)] pub fn fact18 (& self) -> FactR { FactR :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - Filter active"] # [inline (always)] pub fn fact19 (& self) -> FactR { FactR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - Filter active"] # [inline (always)] pub fn fact20 (& self) -> FactR { FactR :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - Filter active"] # [inline (always)] pub fn fact21 (& self) -> FactR { FactR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - Filter active"] # [inline (always)] pub fn fact22 (& self) -> FactR { FactR :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - Filter active"] # [inline (always)] pub fn fact23 (& self) -> FactR { FactR :: new (((self . bits >> 23) & 1) != 0) } # [doc = "Bit 24 - Filter active"] # [inline (always)] pub fn fact24 (& self) -> FactR { FactR :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - Filter active"] # [inline (always)] pub fn fact25 (& self) -> FactR { FactR :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - Filter active"] # [inline (always)] pub fn fact26 (& self) -> FactR { FactR :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 27 - Filter active"] # [inline (always)] pub fn fact27 (& self) -> FactR { FactR :: new (((self . bits >> 27) & 1) != 0) } } impl W { # [doc = "Filter active"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `FACT0` field.</div>"] # [inline (always)] pub fn fact (& mut self , n : u8) -> FactW < Fa1rSpec > { # [allow (clippy :: no_effect)] [() ; 28] [n as usize] ; FactW :: new (self , n) } # [doc = "Bit 0 - Filter active"] # [inline (always)] pub fn fact0 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 0) } # [doc = "Bit 1 - Filter active"] # [inline (always)] pub fn fact1 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 1) } # [doc = "Bit 2 - Filter active"] # [inline (always)] pub fn fact2 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 2) } # [doc = "Bit 3 - Filter active"] # [inline (always)] pub fn fact3 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 3) } # [doc = "Bit 4 - Filter active"] # [inline (always)] pub fn fact4 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 4) } # [doc = "Bit 5 - Filter active"] # [inline (always)] pub fn fact5 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 5) } # [doc = "Bit 6 - Filter active"] # [inline (always)] pub fn fact6 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 6) } # [doc = "Bit 7 - Filter active"] # [inline (always)] pub fn fact7 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 7) } # [doc = "Bit 8 - Filter active"] # [inline (always)] pub fn fact8 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 8) } # [doc = "Bit 9 - Filter active"] # [inline (always)] pub fn fact9 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 9) } # [doc = "Bit 10 - Filter active"] # [inline (always)] pub fn fact10 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 10) } # [doc = "Bit 11 - Filter active"] # [inline (always)] pub fn fact11 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 11) } # [doc = "Bit 12 - Filter active"] # [inline (always)] pub fn fact12 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 12) } # [doc = "Bit 13 - Filter active"] # [inline (always)] pub fn fact13 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 13) } # [doc = "Bit 14 - Filter active"] # [inline (always)] pub fn fact14 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 14) } # [doc = "Bit 15 - Filter active"] # [inline (always)] pub fn fact15 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 15) } # [doc = "Bit 16 - Filter active"] # [inline (always)] pub fn fact16 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 16) } # [doc = "Bit 17 - Filter active"] # [inline (always)] pub fn fact17 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 17) } # [doc = "Bit 18 - Filter active"] # [inline (always)] pub fn fact18 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 18) } # [doc = "Bit 19 - Filter active"] # [inline (always)] pub fn fact19 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 19) } # [doc = "Bit 20 - Filter active"] # [inline (always)] pub fn fact20 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 20) } # [doc = "Bit 21 - Filter active"] # [inline (always)] pub fn fact21 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 21) } # [doc = "Bit 22 - Filter active"] # [inline (always)] pub fn fact22 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 22) } # [doc = "Bit 23 - Filter active"] # [inline (always)] pub fn fact23 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 23) } # [doc = "Bit 24 - Filter active"] # [inline (always)] pub fn fact24 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 24) } # [doc = "Bit 25 - Filter active"] # [inline (always)] pub fn fact25 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 25) } # [doc = "Bit 26 - Filter active"] # [inline (always)] pub fn fact26 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 26) } # [doc = "Bit 27 - Filter active"] # [inline (always)] pub fn fact27 (& mut self) -> FactW < Fa1rSpec > { FactW :: new (self , 27) } } # [doc = "filter activation register\n\nYou can [`read`](crate::Reg::read) this register and get [`fa1r::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fa1r::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Fa1rSpec ; impl crate :: RegisterSpec for Fa1rSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`fa1r::R`](R) reader structure"] impl crate :: Readable for Fa1rSpec { } # [doc = "`write(|w| ..)` method takes [`fa1r::W`](W) writer structure"] impl crate :: Writable for Fa1rSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets FA1R to value 0"] impl crate :: Resettable for Fa1rSpec { }