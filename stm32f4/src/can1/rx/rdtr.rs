# [doc = "Register `RDTR` reader"] pub type R = crate :: R < RdtrSpec > ; # [doc = "Field `DLC` reader - DLC"] pub type DlcR = crate :: FieldReader ; # [doc = "Field `FMI` reader - FMI"] pub type FmiR = crate :: FieldReader ; # [doc = "Field `TIME` reader - TIME"] pub type TimeR = crate :: FieldReader < u16 > ; impl R { # [doc = "Bits 0:3 - DLC"] # [inline (always)] pub fn dlc (& self) -> DlcR { DlcR :: new ((self . bits & 0x0f) as u8) } # [doc = "Bits 8:15 - FMI"] # [inline (always)] pub fn fmi (& self) -> FmiR { FmiR :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:31 - TIME"] # [inline (always)] pub fn time (& self) -> TimeR { TimeR :: new (((self . bits >> 16) & 0xffff) as u16) } } # [doc = "mailbox data high register\n\nYou can [`read`](crate::Reg::read) this register and get [`rdtr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct RdtrSpec ; impl crate :: RegisterSpec for RdtrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`rdtr::R`](R) reader structure"] impl crate :: Readable for RdtrSpec { } # [doc = "`reset()` method sets RDTR to value 0"] impl crate :: Resettable for RdtrSpec { }