# [doc = "Register `TDLR` reader"] pub type R = crate :: R < TdlrSpec > ; # [doc = "Register `TDLR` writer"] pub type W = crate :: W < TdlrSpec > ; # [doc = "Field `DATA(0-3)` reader - DATA%s"] pub type DataR = crate :: FieldReader ; # [doc = "Field `DATA(0-3)` writer - DATA%s"] pub type DataW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R { # [doc = "DATA(0-3)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `DATA0` field.</div>"] # [inline (always)] pub fn data (& self , n : u8) -> DataR { # [allow (clippy :: no_effect)] [() ; 4] [n as usize] ; DataR :: new (((self . bits >> (n * 8)) & 0xff) as u8) } # [doc = "Iterator for array of:"] # [doc = "DATA(0-3)"] # [inline (always)] pub fn data_iter (& self) -> impl Iterator < Item = DataR > + '_ { (0 .. 4) . map (move | n | DataR :: new (((self . bits >> (n * 8)) & 0xff) as u8)) } # [doc = "Bits 0:7 - DATA0"] # [inline (always)] pub fn data0 (& self) -> DataR { DataR :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - DATA1"] # [inline (always)] pub fn data1 (& self) -> DataR { DataR :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:23 - DATA2"] # [inline (always)] pub fn data2 (& self) -> DataR { DataR :: new (((self . bits >> 16) & 0xff) as u8) } # [doc = "Bits 24:31 - DATA3"] # [inline (always)] pub fn data3 (& self) -> DataR { DataR :: new (((self . bits >> 24) & 0xff) as u8) } } impl W { # [doc = "DATA(0-3)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `DATA0` field.</div>"] # [inline (always)] pub fn data (& mut self , n : u8) -> DataW < TdlrSpec > { # [allow (clippy :: no_effect)] [() ; 4] [n as usize] ; DataW :: new (self , n * 8) } # [doc = "Bits 0:7 - DATA0"] # [inline (always)] pub fn data0 (& mut self) -> DataW < TdlrSpec > { DataW :: new (self , 0) } # [doc = "Bits 8:15 - DATA1"] # [inline (always)] pub fn data1 (& mut self) -> DataW < TdlrSpec > { DataW :: new (self , 8) } # [doc = "Bits 16:23 - DATA2"] # [inline (always)] pub fn data2 (& mut self) -> DataW < TdlrSpec > { DataW :: new (self , 16) } # [doc = "Bits 24:31 - DATA3"] # [inline (always)] pub fn data3 (& mut self) -> DataW < TdlrSpec > { DataW :: new (self , 24) } } # [doc = "mailbox data low register\n\nYou can [`read`](crate::Reg::read) this register and get [`tdlr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tdlr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TdlrSpec ; impl crate :: RegisterSpec for TdlrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`tdlr::R`](R) reader structure"] impl crate :: Readable for TdlrSpec { } # [doc = "`write(|w| ..)` method takes [`tdlr::W`](W) writer structure"] impl crate :: Writable for TdlrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets TDLR to value 0"] impl crate :: Resettable for TdlrSpec { }