# [doc = "Register `TIR` reader"] pub type R = crate :: R < TirSpec > ; # [doc = "Register `TIR` writer"] pub type W = crate :: W < TirSpec > ; # [doc = "Field `TXRQ` reader - TXRQ"] pub type TxrqR = crate :: BitReader ; # [doc = "Field `TXRQ` writer - TXRQ"] pub type TxrqW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "RTR\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Rtr { # [doc = "0: Data frame"] Data = 0 , # [doc = "1: Remote frame"] Remote = 1 , } impl From < Rtr > for bool { # [inline (always)] fn from (variant : Rtr) -> Self { variant as u8 != 0 } } # [doc = "Field `RTR` reader - RTR"] pub type RtrR = crate :: BitReader < Rtr > ; impl RtrR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Rtr { match self . bits { false => Rtr :: Data , true => Rtr :: Remote , } } # [doc = "Data frame"] # [inline (always)] pub fn is_data (& self) -> bool { * self == Rtr :: Data } # [doc = "Remote frame"] # [inline (always)] pub fn is_remote (& self) -> bool { * self == Rtr :: Remote } } # [doc = "Field `RTR` writer - RTR"] pub type RtrW < 'a , REG > = crate :: BitWriter < 'a , REG , Rtr > ; impl < 'a , REG > RtrW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Data frame"] # [inline (always)] pub fn data (self) -> & 'a mut crate :: W < REG > { self . variant (Rtr :: Data) } # [doc = "Remote frame"] # [inline (always)] pub fn remote (self) -> & 'a mut crate :: W < REG > { self . variant (Rtr :: Remote) } } # [doc = "IDE\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ide { # [doc = "0: Standard identifier"] Standard = 0 , # [doc = "1: Extended identifier"] Extended = 1 , } impl From < Ide > for bool { # [inline (always)] fn from (variant : Ide) -> Self { variant as u8 != 0 } } # [doc = "Field `IDE` reader - IDE"] pub type IdeR = crate :: BitReader < Ide > ; impl IdeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Ide { match self . bits { false => Ide :: Standard , true => Ide :: Extended , } } # [doc = "Standard identifier"] # [inline (always)] pub fn is_standard (& self) -> bool { * self == Ide :: Standard } # [doc = "Extended identifier"] # [inline (always)] pub fn is_extended (& self) -> bool { * self == Ide :: Extended } } # [doc = "Field `IDE` writer - IDE"] pub type IdeW < 'a , REG > = crate :: BitWriter < 'a , REG , Ide > ; impl < 'a , REG > IdeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Standard identifier"] # [inline (always)] pub fn standard (self) -> & 'a mut crate :: W < REG > { self . variant (Ide :: Standard) } # [doc = "Extended identifier"] # [inline (always)] pub fn extended (self) -> & 'a mut crate :: W < REG > { self . variant (Ide :: Extended) } } # [doc = "Field `EXID` reader - EXID"] pub type ExidR = crate :: FieldReader < u32 > ; # [doc = "Field `EXID` writer - EXID"] pub type ExidW < 'a , REG > = crate :: FieldWriter < 'a , REG , 18 , u32 > ; # [doc = "Field `STID` reader - STID"] pub type StidR = crate :: FieldReader < u16 > ; # [doc = "Field `STID` writer - STID"] pub type StidW < 'a , REG > = crate :: FieldWriter < 'a , REG , 11 , u16 > ; impl R { # [doc = "Bit 0 - TXRQ"] # [inline (always)] pub fn txrq (& self) -> TxrqR { TxrqR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - RTR"] # [inline (always)] pub fn rtr (& self) -> RtrR { RtrR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - IDE"] # [inline (always)] pub fn ide (& self) -> IdeR { IdeR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bits 3:20 - EXID"] # [inline (always)] pub fn exid (& self) -> ExidR { ExidR :: new ((self . bits >> 3) & 0x0003_ffff) } # [doc = "Bits 21:31 - STID"] # [inline (always)] pub fn stid (& self) -> StidR { StidR :: new (((self . bits >> 21) & 0x07ff) as u16) } } impl W { # [doc = "Bit 0 - TXRQ"] # [inline (always)] pub fn txrq (& mut self) -> TxrqW < TirSpec > { TxrqW :: new (self , 0) } # [doc = "Bit 1 - RTR"] # [inline (always)] pub fn rtr (& mut self) -> RtrW < TirSpec > { RtrW :: new (self , 1) } # [doc = "Bit 2 - IDE"] # [inline (always)] pub fn ide (& mut self) -> IdeW < TirSpec > { IdeW :: new (self , 2) } # [doc = "Bits 3:20 - EXID"] # [inline (always)] pub fn exid (& mut self) -> ExidW < TirSpec > { ExidW :: new (self , 3) } # [doc = "Bits 21:31 - STID"] # [inline (always)] pub fn stid (& mut self) -> StidW < TirSpec > { StidW :: new (self , 21) } } # [doc = "TX mailbox identifier register\n\nYou can [`read`](crate::Reg::read) this register and get [`tir::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tir::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TirSpec ; impl crate :: RegisterSpec for TirSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`tir::R`](R) reader structure"] impl crate :: Readable for TirSpec { } # [doc = "`write(|w| ..)` method takes [`tir::W`](W) writer structure"] impl crate :: Writable for TirSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets TIR to value 0"] impl crate :: Resettable for TirSpec { }