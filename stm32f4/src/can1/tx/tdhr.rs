# [doc = "Register `TDHR` reader"] pub type R = crate :: R < TdhrSpec > ; # [doc = "Register `TDHR` writer"] pub type W = crate :: W < TdhrSpec > ; # [doc = "Field `DATA(4-7)` reader - DATA%s"] pub type DataR = crate :: FieldReader ; # [doc = "Field `DATA(4-7)` writer - DATA%s"] pub type DataW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R { # [doc = "DATA(4-7)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `DATA4` field.</div>"] # [inline (always)] pub fn data (& self , n : u8) -> DataR { # [allow (clippy :: no_effect)] [() ; 4] [n as usize] ; DataR :: new (((self . bits >> (n * 8)) & 0xff) as u8) } # [doc = "Iterator for array of:"] # [doc = "DATA(4-7)"] # [inline (always)] pub fn data_iter (& self) -> impl Iterator < Item = DataR > + '_ { (0 .. 4) . map (move | n | DataR :: new (((self . bits >> (n * 8)) & 0xff) as u8)) } # [doc = "Bits 0:7 - DATA4"] # [inline (always)] pub fn data4 (& self) -> DataR { DataR :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - DATA5"] # [inline (always)] pub fn data5 (& self) -> DataR { DataR :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:23 - DATA6"] # [inline (always)] pub fn data6 (& self) -> DataR { DataR :: new (((self . bits >> 16) & 0xff) as u8) } # [doc = "Bits 24:31 - DATA7"] # [inline (always)] pub fn data7 (& self) -> DataR { DataR :: new (((self . bits >> 24) & 0xff) as u8) } } impl W { # [doc = "DATA(4-7)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `DATA4` field.</div>"] # [inline (always)] pub fn data (& mut self , n : u8) -> DataW < TdhrSpec > { # [allow (clippy :: no_effect)] [() ; 4] [n as usize] ; DataW :: new (self , n * 8) } # [doc = "Bits 0:7 - DATA4"] # [inline (always)] pub fn data4 (& mut self) -> DataW < TdhrSpec > { DataW :: new (self , 0) } # [doc = "Bits 8:15 - DATA5"] # [inline (always)] pub fn data5 (& mut self) -> DataW < TdhrSpec > { DataW :: new (self , 8) } # [doc = "Bits 16:23 - DATA6"] # [inline (always)] pub fn data6 (& mut self) -> DataW < TdhrSpec > { DataW :: new (self , 16) } # [doc = "Bits 24:31 - DATA7"] # [inline (always)] pub fn data7 (& mut self) -> DataW < TdhrSpec > { DataW :: new (self , 24) } } # [doc = "mailbox data high register\n\nYou can [`read`](crate::Reg::read) this register and get [`tdhr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tdhr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct TdhrSpec ; impl crate :: RegisterSpec for TdhrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`tdhr::R`](R) reader structure"] impl crate :: Readable for TdhrSpec { } # [doc = "`write(|w| ..)` method takes [`tdhr::W`](W) writer structure"] impl crate :: Writable for TdhrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets TDHR to value 0"] impl crate :: Resettable for TdhrSpec { }