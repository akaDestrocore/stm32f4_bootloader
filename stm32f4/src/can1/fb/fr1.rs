# [doc = "Register `FR1` reader"] pub type R = crate :: R < Fr1Spec > ; # [doc = "Register `FR1` writer"] pub type W = crate :: W < Fr1Spec > ; # [doc = "Field `FB` reader - Filter bits"] pub type FbR = crate :: FieldReader < u32 > ; # [doc = "Field `FB` writer - Filter bits"] pub type FbW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R { # [doc = "Bits 0:31 - Filter bits"] # [inline (always)] pub fn fb (& self) -> FbR { FbR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - Filter bits"] # [inline (always)] pub fn fb (& mut self) -> FbW < Fr1Spec > { FbW :: new (self , 0) } } # [doc = "Filter bank x register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`fr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Fr1Spec ; impl crate :: RegisterSpec for Fr1Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`fr1::R`](R) reader structure"] impl crate :: Readable for Fr1Spec { } # [doc = "`write(|w| ..)` method takes [`fr1::W`](W) writer structure"] impl crate :: Writable for Fr1Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets FR1 to value 0"] impl crate :: Resettable for Fr1Spec { }