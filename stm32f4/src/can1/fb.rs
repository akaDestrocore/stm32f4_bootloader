# [repr (C)] # [doc = "CAN Filter Bank cluster"] # [doc (alias = "FB")] pub struct Fb { fr1 : Fr1 , fr2 : Fr2 , } impl Fb { # [doc = "0x00 - Filter bank x register 1"] # [inline (always)] pub const fn fr1 (& self) -> & Fr1 { & self . fr1 } # [doc = "0x04 - Filter bank x register 2"] # [inline (always)] pub const fn fr2 (& self) -> & Fr2 { & self . fr2 } } # [doc = "FR1 (rw) register accessor: Filter bank x register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`fr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fr1`] module"] # [doc (alias = "FR1")] pub type Fr1 = crate :: Reg < fr1 :: Fr1Spec > ; # [doc = "Filter bank x register 1"] pub mod fr1 ; # [doc = "FR2 (rw) register accessor: Filter bank x register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`fr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fr2`] module"] # [doc (alias = "FR2")] pub type Fr2 = crate :: Reg < fr2 :: Fr2Spec > ; # [doc = "Filter bank x register 2"] pub mod fr2 ;