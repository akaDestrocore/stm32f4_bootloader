# [doc = "Register `EGR` writer"] pub type W = crate :: W < EgrSpec > ; # [doc = "Update generation\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ug { # [doc = "1: Re-initializes the timer counter and generates an update of the registers."] Update = 1 , } impl From < Ug > for bool { # [inline (always)] fn from (variant : Ug) -> Self { variant as u8 != 0 } } # [doc = "Field `UG` writer - Update generation"] pub type UgW < 'a , REG > = crate :: BitWriter < 'a , REG , Ug > ; impl < 'a , REG > UgW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Re-initializes the timer counter and generates an update of the registers."] # [inline (always)] pub fn update (self) -> & 'a mut crate :: W < REG > { self . variant (Ug :: Update) } } # [doc = "Capture/compare %s generation\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Cc1gw { # [doc = "1: If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."] Trigger = 1 , } impl From < Cc1gw > for bool { # [inline (always)] fn from (variant : Cc1gw) -> Self { variant as u8 != 0 } } # [doc = "Field `CCG(1-1)` writer - Capture/compare %s generation"] pub type CcgW < 'a , REG > = crate :: BitWriter < 'a , REG , Cc1gw > ; impl < 'a , REG > CcgW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "If CC1 is an output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If CC1 is an input: The current value of the counter is captured in TIMx_CCR1 register."] # [inline (always)] pub fn trigger (self) -> & 'a mut crate :: W < REG > { self . variant (Cc1gw :: Trigger) } } impl W { # [doc = "Bit 0 - Update generation"] # [inline (always)] pub fn ug (& mut self) -> UgW < EgrSpec > { UgW :: new (self , 0) } # [doc = "Capture/compare (1-1) generation"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `CC1G` field.</div>"] # [inline (always)] pub fn ccg (& mut self , n : u8) -> CcgW < EgrSpec > { # [allow (clippy :: no_effect)] [() ; 1] [n as usize] ; CcgW :: new (self , n * 0 + 1) } # [doc = "Bit 1 - Capture/compare 1 generation"] # [inline (always)] pub fn cc1g (& mut self) -> CcgW < EgrSpec > { CcgW :: new (self , 1) } } # [doc = "event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EgrSpec ; impl crate :: RegisterSpec for EgrSpec { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`egr::W`](W) writer structure"] impl crate :: Writable for EgrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets EGR to value 0"] impl crate :: Resettable for EgrSpec { }