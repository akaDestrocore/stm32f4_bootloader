# [doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ; # [doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ; # [doc = "Update interrupt flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Uifr { # [doc = "0: No update occurred"] NoUpdateOccurred = 0 , # [doc = "1: Update interrupt pending"] UpdatePending = 1 , } impl From < Uifr > for bool { # [inline (always)] fn from (variant : Uifr) -> Self { variant as u8 != 0 } } # [doc = "Field `UIF` reader - Update interrupt flag"] pub type UifR = crate :: BitReader < Uifr > ; impl UifR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Uifr { match self . bits { false => Uifr :: NoUpdateOccurred , true => Uifr :: UpdatePending , } } # [doc = "No update occurred"] # [inline (always)] pub fn is_no_update_occurred (& self) -> bool { * self == Uifr :: NoUpdateOccurred } # [doc = "Update interrupt pending"] # [inline (always)] pub fn is_update_pending (& self) -> bool { * self == Uifr :: UpdatePending } } # [doc = "Update interrupt flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum UifwWO { # [doc = "0: Clear flag"] Clear = 0 , } impl From < UifwWO > for bool { # [inline (always)] fn from (variant : UifwWO) -> Self { variant as u8 != 0 } } # [doc = "Field `UIF` writer - Update interrupt flag"] pub type UifW < 'a , REG > = crate :: BitWriter0C < 'a , REG , UifwWO > ; impl < 'a , REG > UifW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (UifwWO :: Clear) } } impl R { # [doc = "Bit 0 - Update interrupt flag"] # [inline (always)] pub fn uif (& self) -> UifR { UifR :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Update interrupt flag"] # [inline (always)] pub fn uif (& mut self) -> UifW < SrSpec > { UifW :: new (self , 0) } } # [doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { } # [doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0x01 ; } # [doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { }