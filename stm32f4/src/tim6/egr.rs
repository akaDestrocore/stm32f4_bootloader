# [doc = "Register `EGR` writer"] pub type W = crate :: W < EgrSpec > ; # [doc = "Update generation\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ug { # [doc = "1: Re-initializes the timer counter and generates an update of the registers."] Update = 1 , } impl From < Ug > for bool { # [inline (always)] fn from (variant : Ug) -> Self { variant as u8 != 0 } } # [doc = "Field `UG` writer - Update generation"] pub type UgW < 'a , REG > = crate :: BitWriter < 'a , REG , Ug > ; impl < 'a , REG > UgW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Re-initializes the timer counter and generates an update of the registers."] # [inline (always)] pub fn update (self) -> & 'a mut crate :: W < REG > { self . variant (Ug :: Update) } } impl W { # [doc = "Bit 0 - Update generation"] # [inline (always)] pub fn ug (& mut self) -> UgW < EgrSpec > { UgW :: new (self , 0) } } # [doc = "event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`egr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct EgrSpec ; impl crate :: RegisterSpec for EgrSpec { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`egr::W`](W) writer structure"] impl crate :: Writable for EgrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets EGR to value 0"] impl crate :: Resettable for EgrSpec { }