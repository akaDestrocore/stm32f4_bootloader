# [doc = "Register `CR3` reader"] pub type R = crate :: R < Cr3Spec > ; # [doc = "Register `CR3` writer"] pub type W = crate :: W < Cr3Spec > ; # [doc = "Error interrupt enable"] pub use crate :: usart1 :: cr3 :: Eie as Eie ; # [doc = "Field `EIE` reader - Error interrupt enable"] pub use crate :: usart1 :: cr3 :: EieR as EieR ; # [doc = "Field `EIE` writer - Error interrupt enable"] pub use crate :: usart1 :: cr3 :: EieW as EieW ; # [doc = "IrDA mode enable"] pub use crate :: usart1 :: cr3 :: Iren as Iren ; # [doc = "Field `IREN` reader - IrDA mode enable"] pub use crate :: usart1 :: cr3 :: IrenR as IrenR ; # [doc = "Field `IREN` writer - IrDA mode enable"] pub use crate :: usart1 :: cr3 :: IrenW as IrenW ; # [doc = "IrDA low-power"] pub use crate :: usart1 :: cr3 :: Irlp as Irlp ; # [doc = "Field `IRLP` reader - IrDA low-power"] pub use crate :: usart1 :: cr3 :: IrlpR as IrlpR ; # [doc = "Field `IRLP` writer - IrDA low-power"] pub use crate :: usart1 :: cr3 :: IrlpW as IrlpW ; # [doc = "Half-duplex selection"] pub use crate :: usart1 :: cr3 :: Hdsel as Hdsel ; # [doc = "Field `HDSEL` reader - Half-duplex selection"] pub use crate :: usart1 :: cr3 :: HdselR as HdselR ; # [doc = "Field `HDSEL` writer - Half-duplex selection"] pub use crate :: usart1 :: cr3 :: HdselW as HdselW ; # [doc = "DMA enable receiver"] pub use crate :: usart1 :: cr3 :: Dmar as Dmar ; # [doc = "Field `DMAR` reader - DMA enable receiver"] pub use crate :: usart1 :: cr3 :: DmarR as DmarR ; # [doc = "Field `DMAR` writer - DMA enable receiver"] pub use crate :: usart1 :: cr3 :: DmarW as DmarW ; # [doc = "DMA enable transmitter"] pub use crate :: usart1 :: cr3 :: Dmat as Dmat ; # [doc = "Field `DMAT` reader - DMA enable transmitter"] pub use crate :: usart1 :: cr3 :: DmatR as DmatR ; # [doc = "Field `DMAT` writer - DMA enable transmitter"] pub use crate :: usart1 :: cr3 :: DmatW as DmatW ; # [doc = "One sample bit method enable"] pub use crate :: usart1 :: cr3 :: Onebit as Onebit ; # [doc = "Field `ONEBIT` reader - One sample bit method enable"] pub use crate :: usart1 :: cr3 :: OnebitR as OnebitR ; # [doc = "Field `ONEBIT` writer - One sample bit method enable"] pub use crate :: usart1 :: cr3 :: OnebitW as OnebitW ; impl R { # [doc = "Bit 0 - Error interrupt enable"] # [inline (always)] pub fn eie (& self) -> EieR { EieR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - IrDA mode enable"] # [inline (always)] pub fn iren (& self) -> IrenR { IrenR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - IrDA low-power"] # [inline (always)] pub fn irlp (& self) -> IrlpR { IrlpR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Half-duplex selection"] # [inline (always)] pub fn hdsel (& self) -> HdselR { HdselR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 6 - DMA enable receiver"] # [inline (always)] pub fn dmar (& self) -> DmarR { DmarR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - DMA enable transmitter"] # [inline (always)] pub fn dmat (& self) -> DmatR { DmatR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 11 - One sample bit method enable"] # [inline (always)] pub fn onebit (& self) -> OnebitR { OnebitR :: new (((self . bits >> 11) & 1) != 0) } } impl W { # [doc = "Bit 0 - Error interrupt enable"] # [inline (always)] pub fn eie (& mut self) -> EieW < Cr3Spec > { EieW :: new (self , 0) } # [doc = "Bit 1 - IrDA mode enable"] # [inline (always)] pub fn iren (& mut self) -> IrenW < Cr3Spec > { IrenW :: new (self , 1) } # [doc = "Bit 2 - IrDA low-power"] # [inline (always)] pub fn irlp (& mut self) -> IrlpW < Cr3Spec > { IrlpW :: new (self , 2) } # [doc = "Bit 3 - Half-duplex selection"] # [inline (always)] pub fn hdsel (& mut self) -> HdselW < Cr3Spec > { HdselW :: new (self , 3) } # [doc = "Bit 6 - DMA enable receiver"] # [inline (always)] pub fn dmar (& mut self) -> DmarW < Cr3Spec > { DmarW :: new (self , 6) } # [doc = "Bit 7 - DMA enable transmitter"] # [inline (always)] pub fn dmat (& mut self) -> DmatW < Cr3Spec > { DmatW :: new (self , 7) } # [doc = "Bit 11 - One sample bit method enable"] # [inline (always)] pub fn onebit (& mut self) -> OnebitW < Cr3Spec > { OnebitW :: new (self , 11) } } # [doc = "Control register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`cr3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr3Spec ; impl crate :: RegisterSpec for Cr3Spec { type Ux = u16 ; } # [doc = "`read()` method returns [`cr3::R`](R) reader structure"] impl crate :: Readable for Cr3Spec { } # [doc = "`write(|w| ..)` method takes [`cr3::W`](W) writer structure"] impl crate :: Writable for Cr3Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CR3 to value 0"] impl crate :: Resettable for Cr3Spec { }