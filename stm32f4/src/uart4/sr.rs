# [doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ; # [doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ; # [doc = "Parity error"] pub use crate :: usart1 :: sr :: Pe as Pe ; # [doc = "Field `PE` reader - Parity error"] pub use crate :: usart1 :: sr :: PeR as PeR ; # [doc = "Framing error"] pub use crate :: usart1 :: sr :: Fe as Fe ; # [doc = "Field `FE` reader - Framing error"] pub use crate :: usart1 :: sr :: FeR as FeR ; # [doc = "Noise detected flag"] pub use crate :: usart1 :: sr :: Nf as Nf ; # [doc = "Field `NF` reader - Noise detected flag"] pub use crate :: usart1 :: sr :: NfR as NfR ; # [doc = "Overrun error"] pub use crate :: usart1 :: sr :: Ore as Ore ; # [doc = "Field `ORE` reader - Overrun error"] pub use crate :: usart1 :: sr :: OreR as OreR ; # [doc = "IDLE line detected"] pub use crate :: usart1 :: sr :: Idle as Idle ; # [doc = "Field `IDLE` reader - IDLE line detected"] pub use crate :: usart1 :: sr :: IdleR as IdleR ; # [doc = "Read data register not empty"] pub use crate :: usart1 :: sr :: Rxner as Rxner ; # [doc = "Field `RXNE` reader - Read data register not empty"] pub use crate :: usart1 :: sr :: RxneR as RxneR ; # [doc = "Read data register not empty"] pub use crate :: usart1 :: sr :: RxnewWO as RxnewWO ; # [doc = "Field `RXNE` writer - Read data register not empty"] pub use crate :: usart1 :: sr :: RxneW as RxneW ; # [doc = "Transmission complete"] pub use crate :: usart1 :: sr :: Tcr as Tcr ; # [doc = "Field `TC` reader - Transmission complete"] pub use crate :: usart1 :: sr :: TcR as TcR ; # [doc = "Transmission complete"] pub use crate :: usart1 :: sr :: TcwWO as TcwWO ; # [doc = "Field `TC` writer - Transmission complete"] pub use crate :: usart1 :: sr :: TcW as TcW ; # [doc = "Transmit data register empty"] pub use crate :: usart1 :: sr :: Txe as Txe ; # [doc = "Field `TXE` reader - Transmit data register empty"] pub use crate :: usart1 :: sr :: TxeR as TxeR ; # [doc = "LIN break detection flag"] pub use crate :: usart1 :: sr :: Lbdr as Lbdr ; # [doc = "Field `LBD` reader - LIN break detection flag"] pub use crate :: usart1 :: sr :: LbdR as LbdR ; # [doc = "LIN break detection flag"] pub use crate :: usart1 :: sr :: LbdwWO as LbdwWO ; # [doc = "Field `LBD` writer - LIN break detection flag"] pub use crate :: usart1 :: sr :: LbdW as LbdW ; impl R { # [doc = "Bit 0 - Parity error"] # [inline (always)] pub fn pe (& self) -> PeR { PeR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Framing error"] # [inline (always)] pub fn fe (& self) -> FeR { FeR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Noise detected flag"] # [inline (always)] pub fn nf (& self) -> NfR { NfR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Overrun error"] # [inline (always)] pub fn ore (& self) -> OreR { OreR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - IDLE line detected"] # [inline (always)] pub fn idle (& self) -> IdleR { IdleR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Read data register not empty"] # [inline (always)] pub fn rxne (& self) -> RxneR { RxneR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Transmission complete"] # [inline (always)] pub fn tc (& self) -> TcR { TcR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Transmit data register empty"] # [inline (always)] pub fn txe (& self) -> TxeR { TxeR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - LIN break detection flag"] # [inline (always)] pub fn lbd (& self) -> LbdR { LbdR :: new (((self . bits >> 8) & 1) != 0) } } impl W { # [doc = "Bit 5 - Read data register not empty"] # [inline (always)] pub fn rxne (& mut self) -> RxneW < SrSpec > { RxneW :: new (self , 5) } # [doc = "Bit 6 - Transmission complete"] # [inline (always)] pub fn tc (& mut self) -> TcW < SrSpec > { TcW :: new (self , 6) } # [doc = "Bit 8 - LIN break detection flag"] # [inline (always)] pub fn lbd (& mut self) -> LbdW < SrSpec > { LbdW :: new (self , 8) } } # [doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u16 ; } # [doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { } # [doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u16 = 0x0160 ; } # [doc = "`reset()` method sets SR to value 0xc0"] impl crate :: Resettable for SrSpec { const RESET_VALUE : u16 = 0xc0 ; }