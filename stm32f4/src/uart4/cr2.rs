# [doc = "Register `CR2` reader"] pub type R = crate :: R < Cr2Spec > ; # [doc = "Register `CR2` writer"] pub type W = crate :: W < Cr2Spec > ; # [doc = "Field `ADD` reader - Address of the USART node"] pub type AddR = crate :: FieldReader ; # [doc = "Field `ADD` writer - Address of the USART node"] pub type AddW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 , u8 , crate :: Safe > ; # [doc = "lin break detection length"] pub use crate :: usart1 :: cr2 :: Lbdl as Lbdl ; # [doc = "Field `LBDL` reader - lin break detection length"] pub use crate :: usart1 :: cr2 :: LbdlR as LbdlR ; # [doc = "Field `LBDL` writer - lin break detection length"] pub use crate :: usart1 :: cr2 :: LbdlW as LbdlW ; # [doc = "LIN break detection interrupt enable"] pub use crate :: usart1 :: cr2 :: Lbdie as Lbdie ; # [doc = "Field `LBDIE` reader - LIN break detection interrupt enable"] pub use crate :: usart1 :: cr2 :: LbdieR as LbdieR ; # [doc = "Field `LBDIE` writer - LIN break detection interrupt enable"] pub use crate :: usart1 :: cr2 :: LbdieW as LbdieW ; # [doc = "STOP bits\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Stop { # [doc = "0: 1 stop bit"] Stop1 = 0 , # [doc = "2: 2 stop bits"] Stop2 = 2 , } impl From < Stop > for u8 { # [inline (always)] fn from (variant : Stop) -> Self { variant as _ } } impl crate :: FieldSpec for Stop { type Ux = u8 ; } impl crate :: IsEnum for Stop { } # [doc = "Field `STOP` reader - STOP bits"] pub type StopR = crate :: FieldReader < Stop > ; impl StopR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Stop > { match self . bits { 0 => Some (Stop :: Stop1) , 2 => Some (Stop :: Stop2) , _ => None , } } # [doc = "1 stop bit"] # [inline (always)] pub fn is_stop1 (& self) -> bool { * self == Stop :: Stop1 } # [doc = "2 stop bits"] # [inline (always)] pub fn is_stop2 (& self) -> bool { * self == Stop :: Stop2 } } # [doc = "Field `STOP` writer - STOP bits"] pub type StopW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , Stop > ; impl < 'a , REG > StopW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "1 stop bit"] # [inline (always)] pub fn stop1 (self) -> & 'a mut crate :: W < REG > { self . variant (Stop :: Stop1) } # [doc = "2 stop bits"] # [inline (always)] pub fn stop2 (self) -> & 'a mut crate :: W < REG > { self . variant (Stop :: Stop2) } } # [doc = "LIN mode enable"] pub use crate :: usart1 :: cr2 :: Linen as Linen ; # [doc = "Field `LINEN` reader - LIN mode enable"] pub use crate :: usart1 :: cr2 :: LinenR as LinenR ; # [doc = "Field `LINEN` writer - LIN mode enable"] pub use crate :: usart1 :: cr2 :: LinenW as LinenW ; impl R { # [doc = "Bits 0:3 - Address of the USART node"] # [inline (always)] pub fn add (& self) -> AddR { AddR :: new ((self . bits & 0x0f) as u8) } # [doc = "Bit 5 - lin break detection length"] # [inline (always)] pub fn lbdl (& self) -> LbdlR { LbdlR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - LIN break detection interrupt enable"] # [inline (always)] pub fn lbdie (& self) -> LbdieR { LbdieR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bits 12:13 - STOP bits"] # [inline (always)] pub fn stop (& self) -> StopR { StopR :: new (((self . bits >> 12) & 3) as u8) } # [doc = "Bit 14 - LIN mode enable"] # [inline (always)] pub fn linen (& self) -> LinenR { LinenR :: new (((self . bits >> 14) & 1) != 0) } } impl W { # [doc = "Bits 0:3 - Address of the USART node"] # [inline (always)] pub fn add (& mut self) -> AddW < Cr2Spec > { AddW :: new (self , 0) } # [doc = "Bit 5 - lin break detection length"] # [inline (always)] pub fn lbdl (& mut self) -> LbdlW < Cr2Spec > { LbdlW :: new (self , 5) } # [doc = "Bit 6 - LIN break detection interrupt enable"] # [inline (always)] pub fn lbdie (& mut self) -> LbdieW < Cr2Spec > { LbdieW :: new (self , 6) } # [doc = "Bits 12:13 - STOP bits"] # [inline (always)] pub fn stop (& mut self) -> StopW < Cr2Spec > { StopW :: new (self , 12) } # [doc = "Bit 14 - LIN mode enable"] # [inline (always)] pub fn linen (& mut self) -> LinenW < Cr2Spec > { LinenW :: new (self , 14) } } # [doc = "Control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr2Spec ; impl crate :: RegisterSpec for Cr2Spec { type Ux = u16 ; } # [doc = "`read()` method returns [`cr2::R`](R) reader structure"] impl crate :: Readable for Cr2Spec { } # [doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"] impl crate :: Writable for Cr2Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CR2 to value 0"] impl crate :: Resettable for Cr2Spec { }