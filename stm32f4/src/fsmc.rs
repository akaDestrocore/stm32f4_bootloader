# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { bcr1 : Bcr1 , btr : () , _reserved2 : [u8 ; 0x04] , bcr : () , _reserved3 : [u8 ; 0x58] , pcr : () , _reserved4 : [u8 ; 0x04] , sr : () , _reserved5 : [u8 ; 0x04] , pmem2 : Pmem2 , patt2 : Patt2 , _reserved7 : [u8 ; 0x04] , eccr2 : Eccr2 , _reserved8 : [u8 ; 0x10] , pmem3 : Pmem3 , patt3 : Patt3 , _reserved10 : [u8 ; 0x04] , eccr3 : Eccr3 , _reserved11 : [u8 ; 0x10] , pmem4 : Pmem4 , patt4 : Patt4 , pio4 : Pio4 , _reserved14 : [u8 ; 0x50] , bwtr : () , _reserved15 : [u8 ; 0x3c] , sdcr1 : Sdcr1 , sdcr2 : Sdcr2 , sdtr1 : Sdtr1 , sdtr2 : Sdtr2 , sdcmr : Sdcmr , sdrtr : Sdrtr , sdsr : Sdsr , } impl RegisterBlock { # [doc = "0x00 - SRAM/NOR-Flash chip-select control register 1"] # [inline (always)] pub const fn bcr1 (& self) -> & Bcr1 { & self . bcr1 } # [doc = "0x04..0x14 - SRAM/NOR-Flash chip-select timing register %s"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is the index of register in the array. `n == 0` corresponds to `BTR1` register.</div>"] # [inline (always)] pub const fn btr (& self , n : usize) -> & Btr { # [allow (clippy :: no_effect)] [() ; 4] [n] ; unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (4) . add (8 * n) . cast () } } # [doc = "Iterator for array of:"] # [doc = "0x04..0x14 - SRAM/NOR-Flash chip-select timing register %s"] # [inline (always)] pub fn btr_iter (& self) -> impl Iterator < Item = & Btr > { (0 .. 4) . map (move | n | unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (4) . add (8 * n) . cast () }) } # [doc = "0x04 - SRAM/NOR-Flash chip-select timing register 1"] # [inline (always)] pub const fn btr1 (& self) -> & Btr { self . btr (0) } # [doc = "0x0c - SRAM/NOR-Flash chip-select timing register 2"] # [inline (always)] pub const fn btr2 (& self) -> & Btr { self . btr (1) } # [doc = "0x14 - SRAM/NOR-Flash chip-select timing register 3"] # [inline (always)] pub const fn btr3 (& self) -> & Btr { self . btr (2) } # [doc = "0x1c - SRAM/NOR-Flash chip-select timing register 4"] # [inline (always)] pub const fn btr4 (& self) -> & Btr { self . btr (3) } # [doc = "0x08..0x14 - SRAM/NOR-Flash chip-select control register %s"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is the index of register in the array. `n == 0` corresponds to `BCR2` register.</div>"] # [inline (always)] pub const fn bcr (& self , n : usize) -> & Bcr { # [allow (clippy :: no_effect)] [() ; 3] [n] ; unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (8) . add (8 * n) . cast () } } # [doc = "Iterator for array of:"] # [doc = "0x08..0x14 - SRAM/NOR-Flash chip-select control register %s"] # [inline (always)] pub fn bcr_iter (& self) -> impl Iterator < Item = & Bcr > { (0 .. 3) . map (move | n | unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (8) . add (8 * n) . cast () }) } # [doc = "0x08 - SRAM/NOR-Flash chip-select control register 2"] # [inline (always)] pub const fn bcr2 (& self) -> & Bcr { self . bcr (0) } # [doc = "0x10 - SRAM/NOR-Flash chip-select control register 3"] # [inline (always)] pub const fn bcr3 (& self) -> & Bcr { self . bcr (1) } # [doc = "0x18 - SRAM/NOR-Flash chip-select control register 4"] # [inline (always)] pub const fn bcr4 (& self) -> & Bcr { self . bcr (2) } # [doc = "0x60..0x6c - PC Card/NAND Flash control register %s"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is the index of register in the array. `n == 0` corresponds to `PCR2` register.</div>"] # [inline (always)] pub const fn pcr (& self , n : usize) -> & Pcr { # [allow (clippy :: no_effect)] [() ; 3] [n] ; unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (96) . add (32 * n) . cast () } } # [doc = "Iterator for array of:"] # [doc = "0x60..0x6c - PC Card/NAND Flash control register %s"] # [inline (always)] pub fn pcr_iter (& self) -> impl Iterator < Item = & Pcr > { (0 .. 3) . map (move | n | unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (96) . add (32 * n) . cast () }) } # [doc = "0x60 - PC Card/NAND Flash control register 2"] # [inline (always)] pub const fn pcr2 (& self) -> & Pcr { self . pcr (0) } # [doc = "0x80 - PC Card/NAND Flash control register 3"] # [inline (always)] pub const fn pcr3 (& self) -> & Pcr { self . pcr (1) } # [doc = "0xa0 - PC Card/NAND Flash control register 4"] # [inline (always)] pub const fn pcr4 (& self) -> & Pcr { self . pcr (2) } # [doc = "0x64..0x70 - FIFO status and interrupt register %s"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is the index of register in the array. `n == 0` corresponds to `SR2` register.</div>"] # [inline (always)] pub const fn sr (& self , n : usize) -> & Sr { # [allow (clippy :: no_effect)] [() ; 3] [n] ; unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (100) . add (32 * n) . cast () } } # [doc = "Iterator for array of:"] # [doc = "0x64..0x70 - FIFO status and interrupt register %s"] # [inline (always)] pub fn sr_iter (& self) -> impl Iterator < Item = & Sr > { (0 .. 3) . map (move | n | unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (100) . add (32 * n) . cast () }) } # [doc = "0x64 - FIFO status and interrupt register 2"] # [inline (always)] pub const fn sr2 (& self) -> & Sr { self . sr (0) } # [doc = "0x84 - FIFO status and interrupt register 3"] # [inline (always)] pub const fn sr3 (& self) -> & Sr { self . sr (1) } # [doc = "0xa4 - FIFO status and interrupt register 4"] # [inline (always)] pub const fn sr4 (& self) -> & Sr { self . sr (2) } # [doc = "0x68 - Common memory space timing register 2"] # [inline (always)] pub const fn pmem2 (& self) -> & Pmem2 { & self . pmem2 } # [doc = "0x6c - Attribute memory space timing register 2"] # [inline (always)] pub const fn patt2 (& self) -> & Patt2 { & self . patt2 } # [doc = "0x74 - ECC result register 2"] # [inline (always)] pub const fn eccr2 (& self) -> & Eccr2 { & self . eccr2 } # [doc = "0x88 - Common memory space timing register 3"] # [inline (always)] pub const fn pmem3 (& self) -> & Pmem3 { & self . pmem3 } # [doc = "0x8c - Attribute memory space timing register 3"] # [inline (always)] pub const fn patt3 (& self) -> & Patt3 { & self . patt3 } # [doc = "0x94 - ECC result register 3"] # [inline (always)] pub const fn eccr3 (& self) -> & Eccr3 { & self . eccr3 } # [doc = "0xa8 - Common memory space timing register 4"] # [inline (always)] pub const fn pmem4 (& self) -> & Pmem4 { & self . pmem4 } # [doc = "0xac - Attribute memory space timing register 4"] # [inline (always)] pub const fn patt4 (& self) -> & Patt4 { & self . patt4 } # [doc = "0xb0 - I/O space timing register 4"] # [inline (always)] pub const fn pio4 (& self) -> & Pio4 { & self . pio4 } # [doc = "0x104..0x114 - SRAM/NOR-Flash write timing registers %s"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is the index of register in the array. `n == 0` corresponds to `BWTR1` register.</div>"] # [inline (always)] pub const fn bwtr (& self , n : usize) -> & Bwtr { # [allow (clippy :: no_effect)] [() ; 4] [n] ; unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (260) . add (8 * n) . cast () } } # [doc = "Iterator for array of:"] # [doc = "0x104..0x114 - SRAM/NOR-Flash write timing registers %s"] # [inline (always)] pub fn bwtr_iter (& self) -> impl Iterator < Item = & Bwtr > { (0 .. 4) . map (move | n | unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (260) . add (8 * n) . cast () }) } # [doc = "0x104 - SRAM/NOR-Flash write timing registers 1"] # [inline (always)] pub const fn bwtr1 (& self) -> & Bwtr { self . bwtr (0) } # [doc = "0x10c - SRAM/NOR-Flash write timing registers 2"] # [inline (always)] pub const fn bwtr2 (& self) -> & Bwtr { self . bwtr (1) } # [doc = "0x114 - SRAM/NOR-Flash write timing registers 3"] # [inline (always)] pub const fn bwtr3 (& self) -> & Bwtr { self . bwtr (2) } # [doc = "0x11c - SRAM/NOR-Flash write timing registers 4"] # [inline (always)] pub const fn bwtr4 (& self) -> & Bwtr { self . bwtr (3) } # [doc = "0x140 - SDRAM Control Register 1"] # [inline (always)] pub const fn sdcr1 (& self) -> & Sdcr1 { & self . sdcr1 } # [doc = "0x144 - SDRAM Control Register 2"] # [inline (always)] pub const fn sdcr2 (& self) -> & Sdcr2 { & self . sdcr2 } # [doc = "0x148 - SDRAM Timing register 1"] # [inline (always)] pub const fn sdtr1 (& self) -> & Sdtr1 { & self . sdtr1 } # [doc = "0x14c - SDRAM Timing register 2"] # [inline (always)] pub const fn sdtr2 (& self) -> & Sdtr2 { & self . sdtr2 } # [doc = "0x150 - SDRAM Command Mode register"] # [inline (always)] pub const fn sdcmr (& self) -> & Sdcmr { & self . sdcmr } # [doc = "0x154 - SDRAM Refresh Timer register"] # [inline (always)] pub const fn sdrtr (& self) -> & Sdrtr { & self . sdrtr } # [doc = "0x158 - SDRAM Status register"] # [inline (always)] pub const fn sdsr (& self) -> & Sdsr { & self . sdsr } } pub use Bcr as Bcr1 ; pub use bcr as bcr1 ; # [doc = "BTR (rw) register accessor: SRAM/NOR-Flash chip-select timing register %s\n\nYou can [`read`](crate::Reg::read) this register and get [`btr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`btr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@btr`] module"] # [doc (alias = "BTR")] pub type Btr = crate :: Reg < btr :: BtrSpec > ; # [doc = "SRAM/NOR-Flash chip-select timing register %s"] pub mod btr ; # [doc = "BCR (rw) register accessor: SRAM/NOR-Flash chip-select control register %s\n\nYou can [`read`](crate::Reg::read) this register and get [`bcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bcr`] module"] # [doc (alias = "BCR")] pub type Bcr = crate :: Reg < bcr :: BcrSpec > ; # [doc = "SRAM/NOR-Flash chip-select control register %s"] pub mod bcr ; # [doc = "PCR (rw) register accessor: PC Card/NAND Flash control register %s\n\nYou can [`read`](crate::Reg::read) this register and get [`pcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pcr`] module"] # [doc (alias = "PCR")] pub type Pcr = crate :: Reg < pcr :: PcrSpec > ; # [doc = "PC Card/NAND Flash control register %s"] pub mod pcr ; # [doc = "SR (rw) register accessor: FIFO status and interrupt register %s\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"] # [doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ; # [doc = "FIFO status and interrupt register %s"] pub mod sr ; # [doc = "PMEM2 (rw) register accessor: Common memory space timing register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`pmem2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pmem2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pmem2`] module"] # [doc (alias = "PMEM2")] pub type Pmem2 = crate :: Reg < pmem2 :: Pmem2Spec > ; # [doc = "Common memory space timing register 2"] pub mod pmem2 ; # [doc = "PATT2 (rw) register accessor: Attribute memory space timing register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`patt2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`patt2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@patt2`] module"] # [doc (alias = "PATT2")] pub type Patt2 = crate :: Reg < patt2 :: Patt2Spec > ; # [doc = "Attribute memory space timing register 2"] pub mod patt2 ; # [doc = "ECCR2 (r) register accessor: ECC result register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`eccr2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@eccr2`] module"] # [doc (alias = "ECCR2")] pub type Eccr2 = crate :: Reg < eccr2 :: Eccr2Spec > ; # [doc = "ECC result register 2"] pub mod eccr2 ; # [doc = "PMEM3 (rw) register accessor: Common memory space timing register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`pmem3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pmem3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pmem3`] module"] # [doc (alias = "PMEM3")] pub type Pmem3 = crate :: Reg < pmem3 :: Pmem3Spec > ; # [doc = "Common memory space timing register 3"] pub mod pmem3 ; # [doc = "PATT3 (rw) register accessor: Attribute memory space timing register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`patt3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`patt3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@patt3`] module"] # [doc (alias = "PATT3")] pub type Patt3 = crate :: Reg < patt3 :: Patt3Spec > ; # [doc = "Attribute memory space timing register 3"] pub mod patt3 ; # [doc = "ECCR3 (r) register accessor: ECC result register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`eccr3::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@eccr3`] module"] # [doc (alias = "ECCR3")] pub type Eccr3 = crate :: Reg < eccr3 :: Eccr3Spec > ; # [doc = "ECC result register 3"] pub mod eccr3 ; # [doc = "PMEM4 (rw) register accessor: Common memory space timing register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`pmem4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pmem4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pmem4`] module"] # [doc (alias = "PMEM4")] pub type Pmem4 = crate :: Reg < pmem4 :: Pmem4Spec > ; # [doc = "Common memory space timing register 4"] pub mod pmem4 ; # [doc = "PATT4 (rw) register accessor: Attribute memory space timing register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`patt4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`patt4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@patt4`] module"] # [doc (alias = "PATT4")] pub type Patt4 = crate :: Reg < patt4 :: Patt4Spec > ; # [doc = "Attribute memory space timing register 4"] pub mod patt4 ; # [doc = "PIO4 (rw) register accessor: I/O space timing register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`pio4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pio4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pio4`] module"] # [doc (alias = "PIO4")] pub type Pio4 = crate :: Reg < pio4 :: Pio4Spec > ; # [doc = "I/O space timing register 4"] pub mod pio4 ; # [doc = "BWTR (rw) register accessor: SRAM/NOR-Flash write timing registers %s\n\nYou can [`read`](crate::Reg::read) this register and get [`bwtr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bwtr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bwtr`] module"] # [doc (alias = "BWTR")] pub type Bwtr = crate :: Reg < bwtr :: BwtrSpec > ; # [doc = "SRAM/NOR-Flash write timing registers %s"] pub mod bwtr ; # [doc = "SDCR1 (rw) register accessor: SDRAM Control Register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`sdcr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sdcr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sdcr1`] module"] # [doc (alias = "SDCR1")] pub type Sdcr1 = crate :: Reg < sdcr1 :: Sdcr1Spec > ; # [doc = "SDRAM Control Register 1"] pub mod sdcr1 ; # [doc = "SDCR2 (rw) register accessor: SDRAM Control Register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`sdcr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sdcr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sdcr2`] module"] # [doc (alias = "SDCR2")] pub type Sdcr2 = crate :: Reg < sdcr2 :: Sdcr2Spec > ; # [doc = "SDRAM Control Register 2"] pub mod sdcr2 ; # [doc = "SDTR1 (rw) register accessor: SDRAM Timing register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`sdtr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sdtr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sdtr1`] module"] # [doc (alias = "SDTR1")] pub type Sdtr1 = crate :: Reg < sdtr1 :: Sdtr1Spec > ; # [doc = "SDRAM Timing register 1"] pub mod sdtr1 ; # [doc = "SDTR2 (rw) register accessor: SDRAM Timing register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`sdtr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sdtr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sdtr2`] module"] # [doc (alias = "SDTR2")] pub type Sdtr2 = crate :: Reg < sdtr2 :: Sdtr2Spec > ; # [doc = "SDRAM Timing register 2"] pub mod sdtr2 ; # [doc = "SDCMR (rw) register accessor: SDRAM Command Mode register\n\nYou can [`read`](crate::Reg::read) this register and get [`sdcmr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sdcmr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sdcmr`] module"] # [doc (alias = "SDCMR")] pub type Sdcmr = crate :: Reg < sdcmr :: SdcmrSpec > ; # [doc = "SDRAM Command Mode register"] pub mod sdcmr ; # [doc = "SDRTR (rw) register accessor: SDRAM Refresh Timer register\n\nYou can [`read`](crate::Reg::read) this register and get [`sdrtr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sdrtr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sdrtr`] module"] # [doc (alias = "SDRTR")] pub type Sdrtr = crate :: Reg < sdrtr :: SdrtrSpec > ; # [doc = "SDRAM Refresh Timer register"] pub mod sdrtr ; # [doc = "SDSR (r) register accessor: SDRAM Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sdsr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sdsr`] module"] # [doc (alias = "SDSR")] pub type Sdsr = crate :: Reg < sdsr :: SdsrSpec > ; # [doc = "SDRAM Status register"] pub mod sdsr ;