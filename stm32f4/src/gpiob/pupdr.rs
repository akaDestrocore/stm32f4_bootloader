# [doc = "Register `PUPDR` reader"] pub type R = crate :: R < PupdrSpec > ; # [doc = "Register `PUPDR` writer"] pub type W = crate :: W < PupdrSpec > ; # [doc = "Port x configuration pin %s"] pub use crate :: gpioa :: pupdr :: Pull as Pull ; # [doc = "Field `PUPDR(0-15)` reader - Port x configuration pin %s"] pub use crate :: gpioa :: pupdr :: PupdrR as PupdrR ; # [doc = "Field `PUPDR(0-15)` writer - Port x configuration pin %s"] pub use crate :: gpioa :: pupdr :: PupdrW as PupdrW ; impl R { # [doc = "Port x configuration pin (0-15)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `PUPDR0` field.</div>"] # [inline (always)] pub fn pupdr (& self , n : u8) -> PupdrR { # [allow (clippy :: no_effect)] [() ; 16] [n as usize] ; PupdrR :: new (((self . bits >> (n * 2)) & 3) as u8) } # [doc = "Iterator for array of:"] # [doc = "Port x configuration pin (0-15)"] # [inline (always)] pub fn pupdr_iter (& self) -> impl Iterator < Item = PupdrR > + '_ { (0 .. 16) . map (move | n | PupdrR :: new (((self . bits >> (n * 2)) & 3) as u8)) } # [doc = "Bits 0:1 - Port x configuration pin 0"] # [inline (always)] pub fn pupdr0 (& self) -> PupdrR { PupdrR :: new ((self . bits & 3) as u8) } # [doc = "Bits 2:3 - Port x configuration pin 1"] # [inline (always)] pub fn pupdr1 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 2) & 3) as u8) } # [doc = "Bits 4:5 - Port x configuration pin 2"] # [inline (always)] pub fn pupdr2 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 4) & 3) as u8) } # [doc = "Bits 6:7 - Port x configuration pin 3"] # [inline (always)] pub fn pupdr3 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 6) & 3) as u8) } # [doc = "Bits 8:9 - Port x configuration pin 4"] # [inline (always)] pub fn pupdr4 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 8) & 3) as u8) } # [doc = "Bits 10:11 - Port x configuration pin 5"] # [inline (always)] pub fn pupdr5 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 10) & 3) as u8) } # [doc = "Bits 12:13 - Port x configuration pin 6"] # [inline (always)] pub fn pupdr6 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 12) & 3) as u8) } # [doc = "Bits 14:15 - Port x configuration pin 7"] # [inline (always)] pub fn pupdr7 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 14) & 3) as u8) } # [doc = "Bits 16:17 - Port x configuration pin 8"] # [inline (always)] pub fn pupdr8 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 16) & 3) as u8) } # [doc = "Bits 18:19 - Port x configuration pin 9"] # [inline (always)] pub fn pupdr9 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 18) & 3) as u8) } # [doc = "Bits 20:21 - Port x configuration pin 10"] # [inline (always)] pub fn pupdr10 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 20) & 3) as u8) } # [doc = "Bits 22:23 - Port x configuration pin 11"] # [inline (always)] pub fn pupdr11 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 22) & 3) as u8) } # [doc = "Bits 24:25 - Port x configuration pin 12"] # [inline (always)] pub fn pupdr12 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 24) & 3) as u8) } # [doc = "Bits 26:27 - Port x configuration pin 13"] # [inline (always)] pub fn pupdr13 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 26) & 3) as u8) } # [doc = "Bits 28:29 - Port x configuration pin 14"] # [inline (always)] pub fn pupdr14 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 28) & 3) as u8) } # [doc = "Bits 30:31 - Port x configuration pin 15"] # [inline (always)] pub fn pupdr15 (& self) -> PupdrR { PupdrR :: new (((self . bits >> 30) & 3) as u8) } } impl W { # [doc = "Port x configuration pin (0-15)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `PUPDR0` field.</div>"] # [inline (always)] pub fn pupdr (& mut self , n : u8) -> PupdrW < PupdrSpec > { # [allow (clippy :: no_effect)] [() ; 16] [n as usize] ; PupdrW :: new (self , n * 2) } # [doc = "Bits 0:1 - Port x configuration pin 0"] # [inline (always)] pub fn pupdr0 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 0) } # [doc = "Bits 2:3 - Port x configuration pin 1"] # [inline (always)] pub fn pupdr1 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 2) } # [doc = "Bits 4:5 - Port x configuration pin 2"] # [inline (always)] pub fn pupdr2 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 4) } # [doc = "Bits 6:7 - Port x configuration pin 3"] # [inline (always)] pub fn pupdr3 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 6) } # [doc = "Bits 8:9 - Port x configuration pin 4"] # [inline (always)] pub fn pupdr4 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 8) } # [doc = "Bits 10:11 - Port x configuration pin 5"] # [inline (always)] pub fn pupdr5 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 10) } # [doc = "Bits 12:13 - Port x configuration pin 6"] # [inline (always)] pub fn pupdr6 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 12) } # [doc = "Bits 14:15 - Port x configuration pin 7"] # [inline (always)] pub fn pupdr7 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 14) } # [doc = "Bits 16:17 - Port x configuration pin 8"] # [inline (always)] pub fn pupdr8 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 16) } # [doc = "Bits 18:19 - Port x configuration pin 9"] # [inline (always)] pub fn pupdr9 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 18) } # [doc = "Bits 20:21 - Port x configuration pin 10"] # [inline (always)] pub fn pupdr10 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 20) } # [doc = "Bits 22:23 - Port x configuration pin 11"] # [inline (always)] pub fn pupdr11 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 22) } # [doc = "Bits 24:25 - Port x configuration pin 12"] # [inline (always)] pub fn pupdr12 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 24) } # [doc = "Bits 26:27 - Port x configuration pin 13"] # [inline (always)] pub fn pupdr13 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 26) } # [doc = "Bits 28:29 - Port x configuration pin 14"] # [inline (always)] pub fn pupdr14 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 28) } # [doc = "Bits 30:31 - Port x configuration pin 15"] # [inline (always)] pub fn pupdr15 (& mut self) -> PupdrW < PupdrSpec > { PupdrW :: new (self , 30) } } # [doc = "GPIO port pull-up/pull-down register\n\nYou can [`read`](crate::Reg::read) this register and get [`pupdr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pupdr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PupdrSpec ; impl crate :: RegisterSpec for PupdrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`pupdr::R`](R) reader structure"] impl crate :: Readable for PupdrSpec { } # [doc = "`write(|w| ..)` method takes [`pupdr::W`](W) writer structure"] impl crate :: Writable for PupdrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets PUPDR to value 0x0100"] impl crate :: Resettable for PupdrSpec { const RESET_VALUE : u32 = 0x0100 ; }