# [doc = "Register `SQR3` reader"] pub type R = crate :: R < Sqr3Spec > ; # [doc = "Register `SQR3` writer"] pub type W = crate :: W < Sqr3Spec > ; # [doc = "Field `SQ(1-6)` reader - %s conversion in regular sequence"] pub type SqR = crate :: FieldReader ; # [doc = "Field `SQ(1-6)` writer - %s conversion in regular sequence"] pub type SqW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ; impl R { # [doc = "(1-6) conversion in regular sequence"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `SQ1` field.</div>"] # [inline (always)] pub fn sq (& self , n : u8) -> SqR { # [allow (clippy :: no_effect)] [() ; 6] [n as usize] ; SqR :: new (((self . bits >> (n * 5)) & 0x1f) as u8) } # [doc = "Iterator for array of:"] # [doc = "(1-6) conversion in regular sequence"] # [inline (always)] pub fn sq_iter (& self) -> impl Iterator < Item = SqR > + '_ { (0 .. 6) . map (move | n | SqR :: new (((self . bits >> (n * 5)) & 0x1f) as u8)) } # [doc = "Bits 0:4 - 1 conversion in regular sequence"] # [inline (always)] pub fn sq1 (& self) -> SqR { SqR :: new ((self . bits & 0x1f) as u8) } # [doc = "Bits 5:9 - 2 conversion in regular sequence"] # [inline (always)] pub fn sq2 (& self) -> SqR { SqR :: new (((self . bits >> 5) & 0x1f) as u8) } # [doc = "Bits 10:14 - 3 conversion in regular sequence"] # [inline (always)] pub fn sq3 (& self) -> SqR { SqR :: new (((self . bits >> 10) & 0x1f) as u8) } # [doc = "Bits 15:19 - 4 conversion in regular sequence"] # [inline (always)] pub fn sq4 (& self) -> SqR { SqR :: new (((self . bits >> 15) & 0x1f) as u8) } # [doc = "Bits 20:24 - 5 conversion in regular sequence"] # [inline (always)] pub fn sq5 (& self) -> SqR { SqR :: new (((self . bits >> 20) & 0x1f) as u8) } # [doc = "Bits 25:29 - 6 conversion in regular sequence"] # [inline (always)] pub fn sq6 (& self) -> SqR { SqR :: new (((self . bits >> 25) & 0x1f) as u8) } } impl W { # [doc = "(1-6) conversion in regular sequence"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `SQ1` field.</div>"] # [inline (always)] pub fn sq (& mut self , n : u8) -> SqW < Sqr3Spec > { # [allow (clippy :: no_effect)] [() ; 6] [n as usize] ; SqW :: new (self , n * 5) } # [doc = "Bits 0:4 - 1 conversion in regular sequence"] # [inline (always)] pub fn sq1 (& mut self) -> SqW < Sqr3Spec > { SqW :: new (self , 0) } # [doc = "Bits 5:9 - 2 conversion in regular sequence"] # [inline (always)] pub fn sq2 (& mut self) -> SqW < Sqr3Spec > { SqW :: new (self , 5) } # [doc = "Bits 10:14 - 3 conversion in regular sequence"] # [inline (always)] pub fn sq3 (& mut self) -> SqW < Sqr3Spec > { SqW :: new (self , 10) } # [doc = "Bits 15:19 - 4 conversion in regular sequence"] # [inline (always)] pub fn sq4 (& mut self) -> SqW < Sqr3Spec > { SqW :: new (self , 15) } # [doc = "Bits 20:24 - 5 conversion in regular sequence"] # [inline (always)] pub fn sq5 (& mut self) -> SqW < Sqr3Spec > { SqW :: new (self , 20) } # [doc = "Bits 25:29 - 6 conversion in regular sequence"] # [inline (always)] pub fn sq6 (& mut self) -> SqW < Sqr3Spec > { SqW :: new (self , 25) } } # [doc = "regular sequence register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`sqr3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sqr3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Sqr3Spec ; impl crate :: RegisterSpec for Sqr3Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`sqr3::R`](R) reader structure"] impl crate :: Readable for Sqr3Spec { } # [doc = "`write(|w| ..)` method takes [`sqr3::W`](W) writer structure"] impl crate :: Writable for Sqr3Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets SQR3 to value 0"] impl crate :: Resettable for Sqr3Spec { }