# [doc = "Register `SR` reader"] pub type R = crate :: R < SrSpec > ; # [doc = "Register `SR` writer"] pub type W = crate :: W < SrSpec > ; # [doc = "Analog watchdog flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Awdr { # [doc = "0: No analog watchdog event occurred"] NoEvent = 0 , # [doc = "1: Analog watchdog event occurred"] Event = 1 , } impl From < Awdr > for bool { # [inline (always)] fn from (variant : Awdr) -> Self { variant as u8 != 0 } } # [doc = "Field `AWD` reader - Analog watchdog flag"] pub type AwdR = crate :: BitReader < Awdr > ; impl AwdR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Awdr { match self . bits { false => Awdr :: NoEvent , true => Awdr :: Event , } } # [doc = "No analog watchdog event occurred"] # [inline (always)] pub fn is_no_event (& self) -> bool { * self == Awdr :: NoEvent } # [doc = "Analog watchdog event occurred"] # [inline (always)] pub fn is_event (& self) -> bool { * self == Awdr :: Event } } # [doc = "Analog watchdog flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum AwdwWO { # [doc = "0: Clear flag"] Clear = 0 , } impl From < AwdwWO > for bool { # [inline (always)] fn from (variant : AwdwWO) -> Self { variant as u8 != 0 } } # [doc = "Field `AWD` writer - Analog watchdog flag"] pub type AwdW < 'a , REG > = crate :: BitWriter0C < 'a , REG , AwdwWO > ; impl < 'a , REG > AwdW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (AwdwWO :: Clear) } } # [doc = "Regular channel end of conversion\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Eocr { # [doc = "0: Conversion is not complete"] NotComplete = 0 , # [doc = "1: Conversion complete"] Complete = 1 , } impl From < Eocr > for bool { # [inline (always)] fn from (variant : Eocr) -> Self { variant as u8 != 0 } } # [doc = "Field `EOC` reader - Regular channel end of conversion"] pub type EocR = crate :: BitReader < Eocr > ; impl EocR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Eocr { match self . bits { false => Eocr :: NotComplete , true => Eocr :: Complete , } } # [doc = "Conversion is not complete"] # [inline (always)] pub fn is_not_complete (& self) -> bool { * self == Eocr :: NotComplete } # [doc = "Conversion complete"] # [inline (always)] pub fn is_complete (& self) -> bool { * self == Eocr :: Complete } } # [doc = "Regular channel end of conversion\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum EocwWO { # [doc = "0: Clear flag"] Clear = 0 , } impl From < EocwWO > for bool { # [inline (always)] fn from (variant : EocwWO) -> Self { variant as u8 != 0 } } # [doc = "Field `EOC` writer - Regular channel end of conversion"] pub type EocW < 'a , REG > = crate :: BitWriter0C < 'a , REG , EocwWO > ; impl < 'a , REG > EocW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (EocwWO :: Clear) } } # [doc = "Injected channel end of conversion\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Jeocr { # [doc = "0: Conversion is not complete"] NotComplete = 0 , # [doc = "1: Conversion complete"] Complete = 1 , } impl From < Jeocr > for bool { # [inline (always)] fn from (variant : Jeocr) -> Self { variant as u8 != 0 } } # [doc = "Field `JEOC` reader - Injected channel end of conversion"] pub type JeocR = crate :: BitReader < Jeocr > ; impl JeocR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Jeocr { match self . bits { false => Jeocr :: NotComplete , true => Jeocr :: Complete , } } # [doc = "Conversion is not complete"] # [inline (always)] pub fn is_not_complete (& self) -> bool { * self == Jeocr :: NotComplete } # [doc = "Conversion complete"] # [inline (always)] pub fn is_complete (& self) -> bool { * self == Jeocr :: Complete } } # [doc = "Injected channel end of conversion\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum JeocwWO { # [doc = "0: Clear flag"] Clear = 0 , } impl From < JeocwWO > for bool { # [inline (always)] fn from (variant : JeocwWO) -> Self { variant as u8 != 0 } } # [doc = "Field `JEOC` writer - Injected channel end of conversion"] pub type JeocW < 'a , REG > = crate :: BitWriter0C < 'a , REG , JeocwWO > ; impl < 'a , REG > JeocW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (JeocwWO :: Clear) } } # [doc = "Injected channel start flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Jstrtr { # [doc = "0: No injected channel conversion started"] NotStarted = 0 , # [doc = "1: Injected channel conversion has started"] Started = 1 , } impl From < Jstrtr > for bool { # [inline (always)] fn from (variant : Jstrtr) -> Self { variant as u8 != 0 } } # [doc = "Field `JSTRT` reader - Injected channel start flag"] pub type JstrtR = crate :: BitReader < Jstrtr > ; impl JstrtR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Jstrtr { match self . bits { false => Jstrtr :: NotStarted , true => Jstrtr :: Started , } } # [doc = "No injected channel conversion started"] # [inline (always)] pub fn is_not_started (& self) -> bool { * self == Jstrtr :: NotStarted } # [doc = "Injected channel conversion has started"] # [inline (always)] pub fn is_started (& self) -> bool { * self == Jstrtr :: Started } } # [doc = "Injected channel start flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum JstrtwWO { # [doc = "0: Clear flag"] Clear = 0 , } impl From < JstrtwWO > for bool { # [inline (always)] fn from (variant : JstrtwWO) -> Self { variant as u8 != 0 } } # [doc = "Field `JSTRT` writer - Injected channel start flag"] pub type JstrtW < 'a , REG > = crate :: BitWriter0C < 'a , REG , JstrtwWO > ; impl < 'a , REG > JstrtW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (JstrtwWO :: Clear) } } # [doc = "Regular channel start flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Strtr { # [doc = "0: No regular channel conversion started"] NotStarted = 0 , # [doc = "1: Regular channel conversion has started"] Started = 1 , } impl From < Strtr > for bool { # [inline (always)] fn from (variant : Strtr) -> Self { variant as u8 != 0 } } # [doc = "Field `STRT` reader - Regular channel start flag"] pub type StrtR = crate :: BitReader < Strtr > ; impl StrtR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Strtr { match self . bits { false => Strtr :: NotStarted , true => Strtr :: Started , } } # [doc = "No regular channel conversion started"] # [inline (always)] pub fn is_not_started (& self) -> bool { * self == Strtr :: NotStarted } # [doc = "Regular channel conversion has started"] # [inline (always)] pub fn is_started (& self) -> bool { * self == Strtr :: Started } } # [doc = "Regular channel start flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum StrtwWO { # [doc = "0: Clear flag"] Clear = 0 , } impl From < StrtwWO > for bool { # [inline (always)] fn from (variant : StrtwWO) -> Self { variant as u8 != 0 } } # [doc = "Field `STRT` writer - Regular channel start flag"] pub type StrtW < 'a , REG > = crate :: BitWriter0C < 'a , REG , StrtwWO > ; impl < 'a , REG > StrtW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (StrtwWO :: Clear) } } # [doc = "Overrun\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ovrr { # [doc = "0: No overrun occurred"] NoOverrun = 0 , # [doc = "1: Overrun occurred"] Overrun = 1 , } impl From < Ovrr > for bool { # [inline (always)] fn from (variant : Ovrr) -> Self { variant as u8 != 0 } } # [doc = "Field `OVR` reader - Overrun"] pub type OvrR = crate :: BitReader < Ovrr > ; impl OvrR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Ovrr { match self . bits { false => Ovrr :: NoOverrun , true => Ovrr :: Overrun , } } # [doc = "No overrun occurred"] # [inline (always)] pub fn is_no_overrun (& self) -> bool { * self == Ovrr :: NoOverrun } # [doc = "Overrun occurred"] # [inline (always)] pub fn is_overrun (& self) -> bool { * self == Ovrr :: Overrun } } # [doc = "Overrun\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum OvrwWO { # [doc = "0: Clear flag"] Clear = 0 , } impl From < OvrwWO > for bool { # [inline (always)] fn from (variant : OvrwWO) -> Self { variant as u8 != 0 } } # [doc = "Field `OVR` writer - Overrun"] pub type OvrW < 'a , REG > = crate :: BitWriter0C < 'a , REG , OvrwWO > ; impl < 'a , REG > OvrW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (OvrwWO :: Clear) } } impl R { # [doc = "Bit 0 - Analog watchdog flag"] # [inline (always)] pub fn awd (& self) -> AwdR { AwdR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Regular channel end of conversion"] # [inline (always)] pub fn eoc (& self) -> EocR { EocR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Injected channel end of conversion"] # [inline (always)] pub fn jeoc (& self) -> JeocR { JeocR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Injected channel start flag"] # [inline (always)] pub fn jstrt (& self) -> JstrtR { JstrtR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Regular channel start flag"] # [inline (always)] pub fn strt (& self) -> StrtR { StrtR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Overrun"] # [inline (always)] pub fn ovr (& self) -> OvrR { OvrR :: new (((self . bits >> 5) & 1) != 0) } } impl W { # [doc = "Bit 0 - Analog watchdog flag"] # [inline (always)] pub fn awd (& mut self) -> AwdW < SrSpec > { AwdW :: new (self , 0) } # [doc = "Bit 1 - Regular channel end of conversion"] # [inline (always)] pub fn eoc (& mut self) -> EocW < SrSpec > { EocW :: new (self , 1) } # [doc = "Bit 2 - Injected channel end of conversion"] # [inline (always)] pub fn jeoc (& mut self) -> JeocW < SrSpec > { JeocW :: new (self , 2) } # [doc = "Bit 3 - Injected channel start flag"] # [inline (always)] pub fn jstrt (& mut self) -> JstrtW < SrSpec > { JstrtW :: new (self , 3) } # [doc = "Bit 4 - Regular channel start flag"] # [inline (always)] pub fn strt (& mut self) -> StrtW < SrSpec > { StrtW :: new (self , 4) } # [doc = "Bit 5 - Overrun"] # [inline (always)] pub fn ovr (& mut self) -> OvrW < SrSpec > { OvrW :: new (self , 5) } } # [doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SrSpec ; impl crate :: RegisterSpec for SrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`sr::R`](R) reader structure"] impl crate :: Readable for SrSpec { } # [doc = "`write(|w| ..)` method takes [`sr::W`](W) writer structure"] impl crate :: Writable for SrSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0x3f ; } # [doc = "`reset()` method sets SR to value 0"] impl crate :: Resettable for SrSpec { }