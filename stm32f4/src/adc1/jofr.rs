# [doc = "Register `JOFR%s` reader"] pub type R = crate :: R < JofrSpec > ; # [doc = "Register `JOFR%s` writer"] pub type W = crate :: W < JofrSpec > ; # [doc = "Field `JOFFSET` reader - Data offset for injected channel"] pub type JoffsetR = crate :: FieldReader < u16 > ; # [doc = "Field `JOFFSET` writer - Data offset for injected channel"] pub type JoffsetW < 'a , REG > = crate :: FieldWriter < 'a , REG , 12 , u16 , crate :: Safe > ; impl R { # [doc = "Bits 0:11 - Data offset for injected channel"] # [inline (always)] pub fn joffset (& self) -> JoffsetR { JoffsetR :: new ((self . bits & 0x0fff) as u16) } } impl W { # [doc = "Bits 0:11 - Data offset for injected channel"] # [inline (always)] pub fn joffset (& mut self) -> JoffsetW < JofrSpec > { JoffsetW :: new (self , 0) } } # [doc = "injected channel data offset register %s\n\nYou can [`read`](crate::Reg::read) this register and get [`jofr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`jofr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct JofrSpec ; impl crate :: RegisterSpec for JofrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`jofr::R`](R) reader structure"] impl crate :: Readable for JofrSpec { } # [doc = "`write(|w| ..)` method takes [`jofr::W`](W) writer structure"] impl crate :: Writable for JofrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets JOFR%s to value 0"] impl crate :: Resettable for JofrSpec { }