# [doc = "Register `JSQR` reader"] pub type R = crate :: R < JsqrSpec > ; # [doc = "Register `JSQR` writer"] pub type W = crate :: W < JsqrSpec > ; # [doc = "Field `JSQ(1-4)` reader - %s conversion in injected sequence"] pub type JsqR = crate :: FieldReader ; # [doc = "Field `JSQ(1-4)` writer - %s conversion in injected sequence"] pub type JsqW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ; # [doc = "Field `JL` reader - Injected sequence length"] pub type JlR = crate :: FieldReader ; # [doc = "Field `JL` writer - Injected sequence length"] pub type JlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , u8 , crate :: Safe > ; impl R { # [doc = "(1-4) conversion in injected sequence"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `JSQ1` field.</div>"] # [inline (always)] pub fn jsq (& self , n : u8) -> JsqR { # [allow (clippy :: no_effect)] [() ; 4] [n as usize] ; JsqR :: new (((self . bits >> (n * 5)) & 0x1f) as u8) } # [doc = "Iterator for array of:"] # [doc = "(1-4) conversion in injected sequence"] # [inline (always)] pub fn jsq_iter (& self) -> impl Iterator < Item = JsqR > + '_ { (0 .. 4) . map (move | n | JsqR :: new (((self . bits >> (n * 5)) & 0x1f) as u8)) } # [doc = "Bits 0:4 - 1 conversion in injected sequence"] # [inline (always)] pub fn jsq1 (& self) -> JsqR { JsqR :: new ((self . bits & 0x1f) as u8) } # [doc = "Bits 5:9 - 2 conversion in injected sequence"] # [inline (always)] pub fn jsq2 (& self) -> JsqR { JsqR :: new (((self . bits >> 5) & 0x1f) as u8) } # [doc = "Bits 10:14 - 3 conversion in injected sequence"] # [inline (always)] pub fn jsq3 (& self) -> JsqR { JsqR :: new (((self . bits >> 10) & 0x1f) as u8) } # [doc = "Bits 15:19 - 4 conversion in injected sequence"] # [inline (always)] pub fn jsq4 (& self) -> JsqR { JsqR :: new (((self . bits >> 15) & 0x1f) as u8) } # [doc = "Bits 20:21 - Injected sequence length"] # [inline (always)] pub fn jl (& self) -> JlR { JlR :: new (((self . bits >> 20) & 3) as u8) } } impl W { # [doc = "(1-4) conversion in injected sequence"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `JSQ1` field.</div>"] # [inline (always)] pub fn jsq (& mut self , n : u8) -> JsqW < JsqrSpec > { # [allow (clippy :: no_effect)] [() ; 4] [n as usize] ; JsqW :: new (self , n * 5) } # [doc = "Bits 0:4 - 1 conversion in injected sequence"] # [inline (always)] pub fn jsq1 (& mut self) -> JsqW < JsqrSpec > { JsqW :: new (self , 0) } # [doc = "Bits 5:9 - 2 conversion in injected sequence"] # [inline (always)] pub fn jsq2 (& mut self) -> JsqW < JsqrSpec > { JsqW :: new (self , 5) } # [doc = "Bits 10:14 - 3 conversion in injected sequence"] # [inline (always)] pub fn jsq3 (& mut self) -> JsqW < JsqrSpec > { JsqW :: new (self , 10) } # [doc = "Bits 15:19 - 4 conversion in injected sequence"] # [inline (always)] pub fn jsq4 (& mut self) -> JsqW < JsqrSpec > { JsqW :: new (self , 15) } # [doc = "Bits 20:21 - Injected sequence length"] # [inline (always)] pub fn jl (& mut self) -> JlW < JsqrSpec > { JlW :: new (self , 20) } } # [doc = "injected sequence register\n\nYou can [`read`](crate::Reg::read) this register and get [`jsqr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`jsqr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct JsqrSpec ; impl crate :: RegisterSpec for JsqrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`jsqr::R`](R) reader structure"] impl crate :: Readable for JsqrSpec { } # [doc = "`write(|w| ..)` method takes [`jsqr::W`](W) writer structure"] impl crate :: Writable for JsqrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets JSQR to value 0"] impl crate :: Resettable for JsqrSpec { }