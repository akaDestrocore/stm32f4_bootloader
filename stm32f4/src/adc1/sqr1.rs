# [doc = "Register `SQR1` reader"] pub type R = crate :: R < Sqr1Spec > ; # [doc = "Register `SQR1` writer"] pub type W = crate :: W < Sqr1Spec > ; # [doc = "Field `SQ(13-16)` reader - %s conversion in regular sequence"] pub type SqR = crate :: FieldReader ; # [doc = "Field `SQ(13-16)` writer - %s conversion in regular sequence"] pub type SqW < 'a , REG > = crate :: FieldWriter < 'a , REG , 5 > ; # [doc = "Field `L` reader - Regular channel sequence length"] pub type LR = crate :: FieldReader ; # [doc = "Field `L` writer - Regular channel sequence length"] pub type LW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 , u8 , crate :: Safe > ; impl R { # [doc = "(13-16) conversion in regular sequence"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `SQ13` field.</div>"] # [inline (always)] pub fn sq (& self , n : u8) -> SqR { # [allow (clippy :: no_effect)] [() ; 4] [n as usize] ; SqR :: new (((self . bits >> (n * 5)) & 0x1f) as u8) } # [doc = "Iterator for array of:"] # [doc = "(13-16) conversion in regular sequence"] # [inline (always)] pub fn sq_iter (& self) -> impl Iterator < Item = SqR > + '_ { (0 .. 4) . map (move | n | SqR :: new (((self . bits >> (n * 5)) & 0x1f) as u8)) } # [doc = "Bits 0:4 - 13 conversion in regular sequence"] # [inline (always)] pub fn sq13 (& self) -> SqR { SqR :: new ((self . bits & 0x1f) as u8) } # [doc = "Bits 5:9 - 14 conversion in regular sequence"] # [inline (always)] pub fn sq14 (& self) -> SqR { SqR :: new (((self . bits >> 5) & 0x1f) as u8) } # [doc = "Bits 10:14 - 15 conversion in regular sequence"] # [inline (always)] pub fn sq15 (& self) -> SqR { SqR :: new (((self . bits >> 10) & 0x1f) as u8) } # [doc = "Bits 15:19 - 16 conversion in regular sequence"] # [inline (always)] pub fn sq16 (& self) -> SqR { SqR :: new (((self . bits >> 15) & 0x1f) as u8) } # [doc = "Bits 20:23 - Regular channel sequence length"] # [inline (always)] pub fn l (& self) -> LR { LR :: new (((self . bits >> 20) & 0x0f) as u8) } } impl W { # [doc = "(13-16) conversion in regular sequence"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `SQ13` field.</div>"] # [inline (always)] pub fn sq (& mut self , n : u8) -> SqW < Sqr1Spec > { # [allow (clippy :: no_effect)] [() ; 4] [n as usize] ; SqW :: new (self , n * 5) } # [doc = "Bits 0:4 - 13 conversion in regular sequence"] # [inline (always)] pub fn sq13 (& mut self) -> SqW < Sqr1Spec > { SqW :: new (self , 0) } # [doc = "Bits 5:9 - 14 conversion in regular sequence"] # [inline (always)] pub fn sq14 (& mut self) -> SqW < Sqr1Spec > { SqW :: new (self , 5) } # [doc = "Bits 10:14 - 15 conversion in regular sequence"] # [inline (always)] pub fn sq15 (& mut self) -> SqW < Sqr1Spec > { SqW :: new (self , 10) } # [doc = "Bits 15:19 - 16 conversion in regular sequence"] # [inline (always)] pub fn sq16 (& mut self) -> SqW < Sqr1Spec > { SqW :: new (self , 15) } # [doc = "Bits 20:23 - Regular channel sequence length"] # [inline (always)] pub fn l (& mut self) -> LW < Sqr1Spec > { LW :: new (self , 20) } } # [doc = "regular sequence register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`sqr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sqr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Sqr1Spec ; impl crate :: RegisterSpec for Sqr1Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`sqr1::R`](R) reader structure"] impl crate :: Readable for Sqr1Spec { } # [doc = "`write(|w| ..)` method takes [`sqr1::W`](W) writer structure"] impl crate :: Writable for Sqr1Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets SQR1 to value 0"] impl crate :: Resettable for Sqr1Spec { }