# [doc = "Register `CR2` reader"] pub type R = crate :: R < Cr2Spec > ; # [doc = "Register `CR2` writer"] pub type W = crate :: W < Cr2Spec > ; # [doc = "Capture/compare DMA selection\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ccds { # [doc = "0: CCx DMA request sent when CCx event occurs"] OnCompare = 0 , # [doc = "1: CCx DMA request sent when update event occurs"] OnUpdate = 1 , } impl From < Ccds > for bool { # [inline (always)] fn from (variant : Ccds) -> Self { variant as u8 != 0 } } # [doc = "Field `CCDS` reader - Capture/compare DMA selection"] pub type CcdsR = crate :: BitReader < Ccds > ; impl CcdsR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Ccds { match self . bits { false => Ccds :: OnCompare , true => Ccds :: OnUpdate , } } # [doc = "CCx DMA request sent when CCx event occurs"] # [inline (always)] pub fn is_on_compare (& self) -> bool { * self == Ccds :: OnCompare } # [doc = "CCx DMA request sent when update event occurs"] # [inline (always)] pub fn is_on_update (& self) -> bool { * self == Ccds :: OnUpdate } } # [doc = "Field `CCDS` writer - Capture/compare DMA selection"] pub type CcdsW < 'a , REG > = crate :: BitWriter < 'a , REG , Ccds > ; impl < 'a , REG > CcdsW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CCx DMA request sent when CCx event occurs"] # [inline (always)] pub fn on_compare (self) -> & 'a mut crate :: W < REG > { self . variant (Ccds :: OnCompare) } # [doc = "CCx DMA request sent when update event occurs"] # [inline (always)] pub fn on_update (self) -> & 'a mut crate :: W < REG > { self . variant (Ccds :: OnUpdate) } } # [doc = "Master mode selection\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Mms { # [doc = "0: The UG bit from the TIMx_EGR register is used as trigger output"] Reset = 0 , # [doc = "1: The counter enable signal, CNT_EN, is used as trigger output"] Enable = 1 , # [doc = "2: The update event is selected as trigger output"] Update = 2 , # [doc = "3: The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"] ComparePulse = 3 , # [doc = "4: OC1REF signal is used as trigger output"] CompareOc1 = 4 , # [doc = "5: OC2REF signal is used as trigger output"] CompareOc2 = 5 , # [doc = "6: OC3REF signal is used as trigger output"] CompareOc3 = 6 , # [doc = "7: OC4REF signal is used as trigger output"] CompareOc4 = 7 , } impl From < Mms > for u8 { # [inline (always)] fn from (variant : Mms) -> Self { variant as _ } } impl crate :: FieldSpec for Mms { type Ux = u8 ; } impl crate :: IsEnum for Mms { } # [doc = "Field `MMS` reader - Master mode selection"] pub type MmsR = crate :: FieldReader < Mms > ; impl MmsR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Mms { match self . bits { 0 => Mms :: Reset , 1 => Mms :: Enable , 2 => Mms :: Update , 3 => Mms :: ComparePulse , 4 => Mms :: CompareOc1 , 5 => Mms :: CompareOc2 , 6 => Mms :: CompareOc3 , 7 => Mms :: CompareOc4 , _ => unreachable ! () , } } # [doc = "The UG bit from the TIMx_EGR register is used as trigger output"] # [inline (always)] pub fn is_reset (& self) -> bool { * self == Mms :: Reset } # [doc = "The counter enable signal, CNT_EN, is used as trigger output"] # [inline (always)] pub fn is_enable (& self) -> bool { * self == Mms :: Enable } # [doc = "The update event is selected as trigger output"] # [inline (always)] pub fn is_update (& self) -> bool { * self == Mms :: Update } # [doc = "The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"] # [inline (always)] pub fn is_compare_pulse (& self) -> bool { * self == Mms :: ComparePulse } # [doc = "OC1REF signal is used as trigger output"] # [inline (always)] pub fn is_compare_oc1 (& self) -> bool { * self == Mms :: CompareOc1 } # [doc = "OC2REF signal is used as trigger output"] # [inline (always)] pub fn is_compare_oc2 (& self) -> bool { * self == Mms :: CompareOc2 } # [doc = "OC3REF signal is used as trigger output"] # [inline (always)] pub fn is_compare_oc3 (& self) -> bool { * self == Mms :: CompareOc3 } # [doc = "OC4REF signal is used as trigger output"] # [inline (always)] pub fn is_compare_oc4 (& self) -> bool { * self == Mms :: CompareOc4 } } # [doc = "Field `MMS` writer - Master mode selection"] pub type MmsW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 , Mms , crate :: Safe > ; impl < 'a , REG > MmsW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "The UG bit from the TIMx_EGR register is used as trigger output"] # [inline (always)] pub fn reset (self) -> & 'a mut crate :: W < REG > { self . variant (Mms :: Reset) } # [doc = "The counter enable signal, CNT_EN, is used as trigger output"] # [inline (always)] pub fn enable (self) -> & 'a mut crate :: W < REG > { self . variant (Mms :: Enable) } # [doc = "The update event is selected as trigger output"] # [inline (always)] pub fn update (self) -> & 'a mut crate :: W < REG > { self . variant (Mms :: Update) } # [doc = "The trigger output send a positive pulse when the CC1IF flag it to be set, as soon as a capture or a compare match occurred"] # [inline (always)] pub fn compare_pulse (self) -> & 'a mut crate :: W < REG > { self . variant (Mms :: ComparePulse) } # [doc = "OC1REF signal is used as trigger output"] # [inline (always)] pub fn compare_oc1 (self) -> & 'a mut crate :: W < REG > { self . variant (Mms :: CompareOc1) } # [doc = "OC2REF signal is used as trigger output"] # [inline (always)] pub fn compare_oc2 (self) -> & 'a mut crate :: W < REG > { self . variant (Mms :: CompareOc2) } # [doc = "OC3REF signal is used as trigger output"] # [inline (always)] pub fn compare_oc3 (self) -> & 'a mut crate :: W < REG > { self . variant (Mms :: CompareOc3) } # [doc = "OC4REF signal is used as trigger output"] # [inline (always)] pub fn compare_oc4 (self) -> & 'a mut crate :: W < REG > { self . variant (Mms :: CompareOc4) } } # [doc = "TI1 selection\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ti1s { # [doc = "0: The TIMx_CH1 pin is connected to TI1 input"] Normal = 0 , # [doc = "1: The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"] Xor = 1 , } impl From < Ti1s > for bool { # [inline (always)] fn from (variant : Ti1s) -> Self { variant as u8 != 0 } } # [doc = "Field `TI1S` reader - TI1 selection"] pub type Ti1sR = crate :: BitReader < Ti1s > ; impl Ti1sR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Ti1s { match self . bits { false => Ti1s :: Normal , true => Ti1s :: Xor , } } # [doc = "The TIMx_CH1 pin is connected to TI1 input"] # [inline (always)] pub fn is_normal (& self) -> bool { * self == Ti1s :: Normal } # [doc = "The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"] # [inline (always)] pub fn is_xor (& self) -> bool { * self == Ti1s :: Xor } } # [doc = "Field `TI1S` writer - TI1 selection"] pub type Ti1sW < 'a , REG > = crate :: BitWriter < 'a , REG , Ti1s > ; impl < 'a , REG > Ti1sW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "The TIMx_CH1 pin is connected to TI1 input"] # [inline (always)] pub fn normal (self) -> & 'a mut crate :: W < REG > { self . variant (Ti1s :: Normal) } # [doc = "The TIMx_CH1, CH2, CH3 pins are connected to TI1 input"] # [inline (always)] pub fn xor (self) -> & 'a mut crate :: W < REG > { self . variant (Ti1s :: Xor) } } impl R { # [doc = "Bit 3 - Capture/compare DMA selection"] # [inline (always)] pub fn ccds (& self) -> CcdsR { CcdsR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bits 4:6 - Master mode selection"] # [inline (always)] pub fn mms (& self) -> MmsR { MmsR :: new (((self . bits >> 4) & 7) as u8) } # [doc = "Bit 7 - TI1 selection"] # [inline (always)] pub fn ti1s (& self) -> Ti1sR { Ti1sR :: new (((self . bits >> 7) & 1) != 0) } } impl W { # [doc = "Bit 3 - Capture/compare DMA selection"] # [inline (always)] pub fn ccds (& mut self) -> CcdsW < Cr2Spec > { CcdsW :: new (self , 3) } # [doc = "Bits 4:6 - Master mode selection"] # [inline (always)] pub fn mms (& mut self) -> MmsW < Cr2Spec > { MmsW :: new (self , 4) } # [doc = "Bit 7 - TI1 selection"] # [inline (always)] pub fn ti1s (& mut self) -> Ti1sW < Cr2Spec > { Ti1sW :: new (self , 7) } } # [doc = "control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Cr2Spec ; impl crate :: RegisterSpec for Cr2Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`cr2::R`](R) reader structure"] impl crate :: Readable for Cr2Spec { } # [doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"] impl crate :: Writable for Cr2Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CR2 to value 0"] impl crate :: Resettable for Cr2Spec { }