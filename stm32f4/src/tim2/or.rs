# [doc = "Register `OR` reader"] pub type R = crate :: R < OrSpec > ; # [doc = "Register `OR` writer"] pub type W = crate :: W < OrSpec > ; # [doc = "Timer Input 4 remap\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Itr1Rmp { # [doc = "0: TIM8 trigger output is connected to TIM2_ITR1 input"] Tim8Trgout = 0 , # [doc = "1: Ethernet PTP clock is connected to TIM2_ITR1 input"] Ptp = 1 , # [doc = "2: OTG FS SOF is connected to the TIM2_ITR1 input"] OtgFsSof = 2 , # [doc = "3: OTG HS SOF is connected to the TIM2_ITR1 input"] OtgHsSof = 3 , } impl From < Itr1Rmp > for u8 { # [inline (always)] fn from (variant : Itr1Rmp) -> Self { variant as _ } } impl crate :: FieldSpec for Itr1Rmp { type Ux = u8 ; } impl crate :: IsEnum for Itr1Rmp { } # [doc = "Field `ITR1_RMP` reader - Timer Input 4 remap"] pub type Itr1RmpR = crate :: FieldReader < Itr1Rmp > ; impl Itr1RmpR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Itr1Rmp { match self . bits { 0 => Itr1Rmp :: Tim8Trgout , 1 => Itr1Rmp :: Ptp , 2 => Itr1Rmp :: OtgFsSof , 3 => Itr1Rmp :: OtgHsSof , _ => unreachable ! () , } } # [doc = "TIM8 trigger output is connected to TIM2_ITR1 input"] # [inline (always)] pub fn is_tim8_trgout (& self) -> bool { * self == Itr1Rmp :: Tim8Trgout } # [doc = "Ethernet PTP clock is connected to TIM2_ITR1 input"] # [inline (always)] pub fn is_ptp (& self) -> bool { * self == Itr1Rmp :: Ptp } # [doc = "OTG FS SOF is connected to the TIM2_ITR1 input"] # [inline (always)] pub fn is_otg_fs_sof (& self) -> bool { * self == Itr1Rmp :: OtgFsSof } # [doc = "OTG HS SOF is connected to the TIM2_ITR1 input"] # [inline (always)] pub fn is_otg_hs_sof (& self) -> bool { * self == Itr1Rmp :: OtgHsSof } } # [doc = "Field `ITR1_RMP` writer - Timer Input 4 remap"] pub type Itr1RmpW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , Itr1Rmp , crate :: Safe > ; impl < 'a , REG > Itr1RmpW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "TIM8 trigger output is connected to TIM2_ITR1 input"] # [inline (always)] pub fn tim8_trgout (self) -> & 'a mut crate :: W < REG > { self . variant (Itr1Rmp :: Tim8Trgout) } # [doc = "Ethernet PTP clock is connected to TIM2_ITR1 input"] # [inline (always)] pub fn ptp (self) -> & 'a mut crate :: W < REG > { self . variant (Itr1Rmp :: Ptp) } # [doc = "OTG FS SOF is connected to the TIM2_ITR1 input"] # [inline (always)] pub fn otg_fs_sof (self) -> & 'a mut crate :: W < REG > { self . variant (Itr1Rmp :: OtgFsSof) } # [doc = "OTG HS SOF is connected to the TIM2_ITR1 input"] # [inline (always)] pub fn otg_hs_sof (self) -> & 'a mut crate :: W < REG > { self . variant (Itr1Rmp :: OtgHsSof) } } impl R { # [doc = "Bits 10:11 - Timer Input 4 remap"] # [inline (always)] pub fn itr1_rmp (& self) -> Itr1RmpR { Itr1RmpR :: new (((self . bits >> 10) & 3) as u8) } } impl W { # [doc = "Bits 10:11 - Timer Input 4 remap"] # [inline (always)] pub fn itr1_rmp (& mut self) -> Itr1RmpW < OrSpec > { Itr1RmpW :: new (self , 10) } } # [doc = "TIM5 option register\n\nYou can [`read`](crate::Reg::read) this register and get [`or::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`or::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct OrSpec ; impl crate :: RegisterSpec for OrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`or::R`](R) reader structure"] impl crate :: Readable for OrSpec { } # [doc = "`write(|w| ..)` method takes [`or::W`](W) writer structure"] impl crate :: Writable for OrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets OR to value 0"] impl crate :: Resettable for OrSpec { }