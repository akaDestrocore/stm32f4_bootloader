# [doc = "Register `DMA` reader"] pub type R = crate :: R < DmaSpec > ; # [doc = "Register `DMA` writer"] pub type W = crate :: W < DmaSpec > ; # [doc = "Field `DMAADDR` reader - DMA address"] pub type DmaaddrR = crate :: FieldReader < u32 > ; # [doc = "Field `DMAADDR` writer - DMA address"] pub type DmaaddrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R { # [doc = "Bits 0:31 - DMA address"] # [inline (always)] pub fn dmaaddr (& self) -> DmaaddrR { DmaaddrR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - DMA address"] # [inline (always)] pub fn dmaaddr (& mut self) -> DmaaddrW < DmaSpec > { DmaaddrW :: new (self , 0) } } # [doc = "OTG_HS host channel-0 DMA address register\n\nYou can [`read`](crate::Reg::read) this register and get [`dma::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dma::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DmaSpec ; impl crate :: RegisterSpec for DmaSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`dma::R`](R) reader structure"] impl crate :: Readable for DmaSpec { } # [doc = "`write(|w| ..)` method takes [`dma::W`](W) writer structure"] impl crate :: Writable for DmaSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets DMA to value 0"] impl crate :: Resettable for DmaSpec { }