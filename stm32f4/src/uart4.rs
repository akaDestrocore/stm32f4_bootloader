# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { sr : Sr , _reserved1 : [u8 ; 0x02] , dr : Dr , _reserved2 : [u8 ; 0x02] , brr : Brr , _reserved3 : [u8 ; 0x02] , cr1 : Cr1 , _reserved4 : [u8 ; 0x02] , cr2 : Cr2 , _reserved5 : [u8 ; 0x02] , cr3 : Cr3 , _reserved6 : [u8 ; 0x02] , gtpr : Gtpr , } impl RegisterBlock { # [doc = "0x00 - Status register"] # [inline (always)] pub const fn sr (& self) -> & Sr { & self . sr } # [doc = "0x04 - Data register"] # [inline (always)] pub const fn dr (& self) -> & Dr { & self . dr } # [doc = "0x08 - Baud rate register"] # [inline (always)] pub const fn brr (& self) -> & Brr { & self . brr } # [doc = "0x0c - Control register 1"] # [inline (always)] pub const fn cr1 (& self) -> & Cr1 { & self . cr1 } # [doc = "0x10 - Control register 2"] # [inline (always)] pub const fn cr2 (& self) -> & Cr2 { & self . cr2 } # [doc = "0x14 - Control register 3"] # [inline (always)] pub const fn cr3 (& self) -> & Cr3 { & self . cr3 } # [doc = "0x18 - Guard Time and Prescaler Register"] # [inline (always)] pub const fn gtpr (& self) -> & Gtpr { & self . gtpr } } # [doc = "SR (rw) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`] module"] # [doc (alias = "SR")] pub type Sr = crate :: Reg < sr :: SrSpec > ; # [doc = "Status register"] pub mod sr ; pub use crate :: usart1 :: Dr as Dr ; pub use crate :: usart1 :: dr as dr ; pub use crate :: usart1 :: Brr as Brr ; pub use crate :: usart1 :: brr as brr ; pub use crate :: usart1 :: Cr1 as Cr1 ; pub use crate :: usart1 :: cr1 as cr1 ; # [doc = "CR2 (rw) register accessor: Control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr2`] module"] # [doc (alias = "CR2")] pub type Cr2 = crate :: Reg < cr2 :: Cr2Spec > ; # [doc = "Control register 2"] pub mod cr2 ; # [doc = "CR3 (rw) register accessor: Control register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`cr3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr3`] module"] # [doc (alias = "CR3")] pub type Cr3 = crate :: Reg < cr3 :: Cr3Spec > ; # [doc = "Control register 3"] pub mod cr3 ; # [doc = "GTPR (rw) register accessor: Guard Time and Prescaler Register\n\nYou can [`read`](crate::Reg::read) this register and get [`gtpr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gtpr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@gtpr`] module"] # [doc (alias = "GTPR")] pub type Gtpr = crate :: Reg < gtpr :: GtprSpec > ; # [doc = "Guard Time and Prescaler Register"] pub mod gtpr ;