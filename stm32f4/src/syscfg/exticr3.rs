# [doc = "Register `EXTICR3` reader"] pub type R = crate :: R < Exticr3Spec > ; # [doc = "Register `EXTICR3` writer"] pub type W = crate :: W < Exticr3Spec > ; # [doc = "EXTI x configuration (x = 8 to 11)"] pub use super :: exticr1 :: Exti0 as Exti0 ; # [doc = "Field `EXTI8` reader - EXTI x configuration (x = 8 to 11)"] pub use super :: exticr1 :: Exti0R as Exti8R ; # [doc = "Field `EXTI8` writer - EXTI x configuration (x = 8 to 11)"] pub use super :: exticr1 :: Exti0W as Exti8W ; # [doc = "Field `EXTI9` reader - EXTI x configuration (x = 8 to 11)"] pub use super :: exticr1 :: Exti0R as Exti9R ; # [doc = "Field `EXTI9` writer - EXTI x configuration (x = 8 to 11)"] pub use super :: exticr1 :: Exti0W as Exti9W ; # [doc = "Field `EXTI10` reader - EXTI10"] pub use super :: exticr1 :: Exti0R as Exti10R ; # [doc = "Field `EXTI10` writer - EXTI10"] pub use super :: exticr1 :: Exti0W as Exti10W ; # [doc = "Field `EXTI11` reader - EXTI x configuration (x = 8 to 11)"] pub use super :: exticr1 :: Exti0R as Exti11R ; # [doc = "Field `EXTI11` writer - EXTI x configuration (x = 8 to 11)"] pub use super :: exticr1 :: Exti0W as Exti11W ; impl R { # [doc = "Bits 0:3 - EXTI x configuration (x = 8 to 11)"] # [inline (always)] pub fn exti8 (& self) -> Exti8R { Exti8R :: new ((self . bits & 0x0f) as u8) } # [doc = "Bits 4:7 - EXTI x configuration (x = 8 to 11)"] # [inline (always)] pub fn exti9 (& self) -> Exti9R { Exti9R :: new (((self . bits >> 4) & 0x0f) as u8) } # [doc = "Bits 8:11 - EXTI10"] # [inline (always)] pub fn exti10 (& self) -> Exti10R { Exti10R :: new (((self . bits >> 8) & 0x0f) as u8) } # [doc = "Bits 12:15 - EXTI x configuration (x = 8 to 11)"] # [inline (always)] pub fn exti11 (& self) -> Exti11R { Exti11R :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W { # [doc = "Bits 0:3 - EXTI x configuration (x = 8 to 11)"] # [inline (always)] pub fn exti8 (& mut self) -> Exti8W < Exticr3Spec > { Exti8W :: new (self , 0) } # [doc = "Bits 4:7 - EXTI x configuration (x = 8 to 11)"] # [inline (always)] pub fn exti9 (& mut self) -> Exti9W < Exticr3Spec > { Exti9W :: new (self , 4) } # [doc = "Bits 8:11 - EXTI10"] # [inline (always)] pub fn exti10 (& mut self) -> Exti10W < Exticr3Spec > { Exti10W :: new (self , 8) } # [doc = "Bits 12:15 - EXTI x configuration (x = 8 to 11)"] # [inline (always)] pub fn exti11 (& mut self) -> Exti11W < Exticr3Spec > { Exti11W :: new (self , 12) } } # [doc = "external interrupt configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`exticr3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`exticr3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Exticr3Spec ; impl crate :: RegisterSpec for Exticr3Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`exticr3::R`](R) reader structure"] impl crate :: Readable for Exticr3Spec { } # [doc = "`write(|w| ..)` method takes [`exticr3::W`](W) writer structure"] impl crate :: Writable for Exticr3Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets EXTICR3 to value 0"] impl crate :: Resettable for Exticr3Spec { }