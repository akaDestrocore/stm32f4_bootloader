# [doc = "Register `CMPCR` reader"] pub type R = crate :: R < CmpcrSpec > ; # [doc = "Compensation cell power-down\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum CmpPd { # [doc = "0: I/O compensation cell power-down mode"] PowerDown = 0 , # [doc = "1: I/O compensation cell enabled"] Enabled = 1 , } impl From < CmpPd > for bool { # [inline (always)] fn from (variant : CmpPd) -> Self { variant as u8 != 0 } } # [doc = "Field `CMP_PD` reader - Compensation cell power-down"] pub type CmpPdR = crate :: BitReader < CmpPd > ; impl CmpPdR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> CmpPd { match self . bits { false => CmpPd :: PowerDown , true => CmpPd :: Enabled , } } # [doc = "I/O compensation cell power-down mode"] # [inline (always)] pub fn is_power_down (& self) -> bool { * self == CmpPd :: PowerDown } # [doc = "I/O compensation cell enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == CmpPd :: Enabled } } # [doc = "READY\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ready { # [doc = "0: I/O compensation cell not ready"] NotReady = 0 , # [doc = "1: I/O compensation cell ready"] Ready = 1 , } impl From < Ready > for bool { # [inline (always)] fn from (variant : Ready) -> Self { variant as u8 != 0 } } # [doc = "Field `READY` reader - READY"] pub type ReadyR = crate :: BitReader < Ready > ; impl ReadyR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Ready { match self . bits { false => Ready :: NotReady , true => Ready :: Ready , } } # [doc = "I/O compensation cell not ready"] # [inline (always)] pub fn is_not_ready (& self) -> bool { * self == Ready :: NotReady } # [doc = "I/O compensation cell ready"] # [inline (always)] pub fn is_ready (& self) -> bool { * self == Ready :: Ready } } impl R { # [doc = "Bit 0 - Compensation cell power-down"] # [inline (always)] pub fn cmp_pd (& self) -> CmpPdR { CmpPdR :: new ((self . bits & 1) != 0) } # [doc = "Bit 8 - READY"] # [inline (always)] pub fn ready (& self) -> ReadyR { ReadyR :: new (((self . bits >> 8) & 1) != 0) } } # [doc = "Compensation cell control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cmpcr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CmpcrSpec ; impl crate :: RegisterSpec for CmpcrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`cmpcr::R`](R) reader structure"] impl crate :: Readable for CmpcrSpec { } # [doc = "`reset()` method sets CMPCR to value 0"] impl crate :: Resettable for CmpcrSpec { }