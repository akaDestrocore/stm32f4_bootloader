# [doc = "Register `MEMRMP` reader"] pub type R = crate :: R < MemrmpSpec > ; # [doc = "Register `MEMRMP` writer"] pub type W = crate :: W < MemrmpSpec > ; # [doc = "MEM_MODE\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum MemMode { # [doc = "0: Main Flash memory mapped at 0x0000 0000"] MainFlash = 0 , # [doc = "1: System Flash memory mapped at 0x0000 0000"] SystemFlash = 1 , # [doc = "2: FSMC Bank1 (NOR/PSRAM 1 and 2) mapped at 0x0000 0000"] Fsmcbank1 = 2 , # [doc = "3: Embedded SRAM mapped at 0x0000 0000"] EmbeddedSram = 3 , } impl From < MemMode > for u8 { # [inline (always)] fn from (variant : MemMode) -> Self { variant as _ } } impl crate :: FieldSpec for MemMode { type Ux = u8 ; } impl crate :: IsEnum for MemMode { } # [doc = "Field `MEM_MODE` reader - MEM_MODE"] pub type MemModeR = crate :: FieldReader < MemMode > ; impl MemModeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MemMode { match self . bits { 0 => MemMode :: MainFlash , 1 => MemMode :: SystemFlash , 2 => MemMode :: Fsmcbank1 , 3 => MemMode :: EmbeddedSram , _ => unreachable ! () , } } # [doc = "Main Flash memory mapped at 0x0000 0000"] # [inline (always)] pub fn is_main_flash (& self) -> bool { * self == MemMode :: MainFlash } # [doc = "System Flash memory mapped at 0x0000 0000"] # [inline (always)] pub fn is_system_flash (& self) -> bool { * self == MemMode :: SystemFlash } # [doc = "FSMC Bank1 (NOR/PSRAM 1 and 2) mapped at 0x0000 0000"] # [inline (always)] pub fn is_fsmcbank1 (& self) -> bool { * self == MemMode :: Fsmcbank1 } # [doc = "Embedded SRAM mapped at 0x0000 0000"] # [inline (always)] pub fn is_embedded_sram (& self) -> bool { * self == MemMode :: EmbeddedSram } } # [doc = "Field `MEM_MODE` writer - MEM_MODE"] pub type MemModeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , MemMode , crate :: Safe > ; impl < 'a , REG > MemModeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "Main Flash memory mapped at 0x0000 0000"] # [inline (always)] pub fn main_flash (self) -> & 'a mut crate :: W < REG > { self . variant (MemMode :: MainFlash) } # [doc = "System Flash memory mapped at 0x0000 0000"] # [inline (always)] pub fn system_flash (self) -> & 'a mut crate :: W < REG > { self . variant (MemMode :: SystemFlash) } # [doc = "FSMC Bank1 (NOR/PSRAM 1 and 2) mapped at 0x0000 0000"] # [inline (always)] pub fn fsmcbank1 (self) -> & 'a mut crate :: W < REG > { self . variant (MemMode :: Fsmcbank1) } # [doc = "Embedded SRAM mapped at 0x0000 0000"] # [inline (always)] pub fn embedded_sram (self) -> & 'a mut crate :: W < REG > { self . variant (MemMode :: EmbeddedSram) } } impl R { # [doc = "Bits 0:1 - MEM_MODE"] # [inline (always)] pub fn mem_mode (& self) -> MemModeR { MemModeR :: new ((self . bits & 3) as u8) } } impl W { # [doc = "Bits 0:1 - MEM_MODE"] # [inline (always)] pub fn mem_mode (& mut self) -> MemModeW < MemrmpSpec > { MemModeW :: new (self , 0) } } # [doc = "memory remap register\n\nYou can [`read`](crate::Reg::read) this register and get [`memrmp::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`memrmp::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MemrmpSpec ; impl crate :: RegisterSpec for MemrmpSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`memrmp::R`](R) reader structure"] impl crate :: Readable for MemrmpSpec { } # [doc = "`write(|w| ..)` method takes [`memrmp::W`](W) writer structure"] impl crate :: Writable for MemrmpSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets MEMRMP to value 0"] impl crate :: Resettable for MemrmpSpec { }