# [doc = "Register `EXTICR1` reader"] pub type R = crate :: R < Exticr1Spec > ; # [doc = "Register `EXTICR1` writer"] pub type W = crate :: W < Exticr1Spec > ; # [doc = "EXTI x configuration (x = 0 to 3)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Exti0 { # [doc = "0: Select PAx as the source input for the EXTIx external interrupt"] Pa = 0 , # [doc = "1: Select PBx as the source input for the EXTIx external interrupt"] Pb = 1 , # [doc = "2: Select PCx as the source input for the EXTIx external interrupt"] Pc = 2 , # [doc = "3: Select PDx as the source input for the EXTIx external interrupt"] Pd = 3 , # [doc = "4: Select PEx as the source input for the EXTIx external interrupt"] Pe = 4 , # [doc = "5: Select PFx as the source input for the EXTIx external interrupt"] Pf = 5 , # [doc = "6: Select PGx as the source input for the EXTIx external interrupt"] Pg = 6 , # [doc = "7: Select PHx as the source input for the EXTIx external interrupt"] Ph = 7 , # [doc = "8: Select PIx as the source input for the EXTIx external interrupt"] Pi = 8 , } impl From < Exti0 > for u8 { # [inline (always)] fn from (variant : Exti0) -> Self { variant as _ } } impl crate :: FieldSpec for Exti0 { type Ux = u8 ; } impl crate :: IsEnum for Exti0 { } # [doc = "Field `EXTI0` reader - EXTI x configuration (x = 0 to 3)"] pub type Exti0R = crate :: FieldReader < Exti0 > ; impl Exti0R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Exti0 > { match self . bits { 0 => Some (Exti0 :: Pa) , 1 => Some (Exti0 :: Pb) , 2 => Some (Exti0 :: Pc) , 3 => Some (Exti0 :: Pd) , 4 => Some (Exti0 :: Pe) , 5 => Some (Exti0 :: Pf) , 6 => Some (Exti0 :: Pg) , 7 => Some (Exti0 :: Ph) , 8 => Some (Exti0 :: Pi) , _ => None , } } # [doc = "Select PAx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn is_pa (& self) -> bool { * self == Exti0 :: Pa } # [doc = "Select PBx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn is_pb (& self) -> bool { * self == Exti0 :: Pb } # [doc = "Select PCx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn is_pc (& self) -> bool { * self == Exti0 :: Pc } # [doc = "Select PDx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn is_pd (& self) -> bool { * self == Exti0 :: Pd } # [doc = "Select PEx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn is_pe (& self) -> bool { * self == Exti0 :: Pe } # [doc = "Select PFx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn is_pf (& self) -> bool { * self == Exti0 :: Pf } # [doc = "Select PGx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn is_pg (& self) -> bool { * self == Exti0 :: Pg } # [doc = "Select PHx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn is_ph (& self) -> bool { * self == Exti0 :: Ph } # [doc = "Select PIx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn is_pi (& self) -> bool { * self == Exti0 :: Pi } } # [doc = "Field `EXTI0` writer - EXTI x configuration (x = 0 to 3)"] pub type Exti0W < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 , Exti0 > ; impl < 'a , REG > Exti0W < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "Select PAx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn pa (self) -> & 'a mut crate :: W < REG > { self . variant (Exti0 :: Pa) } # [doc = "Select PBx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn pb (self) -> & 'a mut crate :: W < REG > { self . variant (Exti0 :: Pb) } # [doc = "Select PCx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn pc (self) -> & 'a mut crate :: W < REG > { self . variant (Exti0 :: Pc) } # [doc = "Select PDx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn pd (self) -> & 'a mut crate :: W < REG > { self . variant (Exti0 :: Pd) } # [doc = "Select PEx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn pe (self) -> & 'a mut crate :: W < REG > { self . variant (Exti0 :: Pe) } # [doc = "Select PFx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn pf (self) -> & 'a mut crate :: W < REG > { self . variant (Exti0 :: Pf) } # [doc = "Select PGx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn pg (self) -> & 'a mut crate :: W < REG > { self . variant (Exti0 :: Pg) } # [doc = "Select PHx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn ph (self) -> & 'a mut crate :: W < REG > { self . variant (Exti0 :: Ph) } # [doc = "Select PIx as the source input for the EXTIx external interrupt"] # [inline (always)] pub fn pi (self) -> & 'a mut crate :: W < REG > { self . variant (Exti0 :: Pi) } } # [doc = "Field `EXTI1` reader - EXTI x configuration (x = 0 to 3)"] pub use Exti0R as Exti1R ; # [doc = "Field `EXTI1` writer - EXTI x configuration (x = 0 to 3)"] pub use Exti0W as Exti1W ; # [doc = "Field `EXTI2` reader - EXTI x configuration (x = 0 to 3)"] pub use Exti0R as Exti2R ; # [doc = "Field `EXTI2` writer - EXTI x configuration (x = 0 to 3)"] pub use Exti0W as Exti2W ; # [doc = "Field `EXTI3` reader - EXTI x configuration (x = 0 to 3)"] pub use Exti0R as Exti3R ; # [doc = "Field `EXTI3` writer - EXTI x configuration (x = 0 to 3)"] pub use Exti0W as Exti3W ; impl R { # [doc = "Bits 0:3 - EXTI x configuration (x = 0 to 3)"] # [inline (always)] pub fn exti0 (& self) -> Exti0R { Exti0R :: new ((self . bits & 0x0f) as u8) } # [doc = "Bits 4:7 - EXTI x configuration (x = 0 to 3)"] # [inline (always)] pub fn exti1 (& self) -> Exti1R { Exti1R :: new (((self . bits >> 4) & 0x0f) as u8) } # [doc = "Bits 8:11 - EXTI x configuration (x = 0 to 3)"] # [inline (always)] pub fn exti2 (& self) -> Exti2R { Exti2R :: new (((self . bits >> 8) & 0x0f) as u8) } # [doc = "Bits 12:15 - EXTI x configuration (x = 0 to 3)"] # [inline (always)] pub fn exti3 (& self) -> Exti3R { Exti3R :: new (((self . bits >> 12) & 0x0f) as u8) } } impl W { # [doc = "Bits 0:3 - EXTI x configuration (x = 0 to 3)"] # [inline (always)] pub fn exti0 (& mut self) -> Exti0W < Exticr1Spec > { Exti0W :: new (self , 0) } # [doc = "Bits 4:7 - EXTI x configuration (x = 0 to 3)"] # [inline (always)] pub fn exti1 (& mut self) -> Exti1W < Exticr1Spec > { Exti1W :: new (self , 4) } # [doc = "Bits 8:11 - EXTI x configuration (x = 0 to 3)"] # [inline (always)] pub fn exti2 (& mut self) -> Exti2W < Exticr1Spec > { Exti2W :: new (self , 8) } # [doc = "Bits 12:15 - EXTI x configuration (x = 0 to 3)"] # [inline (always)] pub fn exti3 (& mut self) -> Exti3W < Exticr1Spec > { Exti3W :: new (self , 12) } } # [doc = "external interrupt configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`exticr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`exticr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Exticr1Spec ; impl crate :: RegisterSpec for Exticr1Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`exticr1::R`](R) reader structure"] impl crate :: Readable for Exticr1Spec { } # [doc = "`write(|w| ..)` method takes [`exticr1::W`](W) writer structure"] impl crate :: Writable for Exticr1Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets EXTICR1 to value 0"] impl crate :: Resettable for Exticr1Spec { }