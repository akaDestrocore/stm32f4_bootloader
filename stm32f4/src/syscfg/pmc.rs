# [doc = "Register `PMC` reader"] pub type R = crate :: R < PmcSpec > ; # [doc = "Register `PMC` writer"] pub type W = crate :: W < PmcSpec > ; # [doc = "Ethernet PHY interface selection\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum MiiRmiiSel { # [doc = "0: MII interface is selected"] Mii = 0 , # [doc = "1: RMII PHY interface is selected"] RmiiPhy = 1 , } impl From < MiiRmiiSel > for bool { # [inline (always)] fn from (variant : MiiRmiiSel) -> Self { variant as u8 != 0 } } # [doc = "Field `MII_RMII_SEL` reader - Ethernet PHY interface selection"] pub type MiiRmiiSelR = crate :: BitReader < MiiRmiiSel > ; impl MiiRmiiSelR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> MiiRmiiSel { match self . bits { false => MiiRmiiSel :: Mii , true => MiiRmiiSel :: RmiiPhy , } } # [doc = "MII interface is selected"] # [inline (always)] pub fn is_mii (& self) -> bool { * self == MiiRmiiSel :: Mii } # [doc = "RMII PHY interface is selected"] # [inline (always)] pub fn is_rmii_phy (& self) -> bool { * self == MiiRmiiSel :: RmiiPhy } } # [doc = "Field `MII_RMII_SEL` writer - Ethernet PHY interface selection"] pub type MiiRmiiSelW < 'a , REG > = crate :: BitWriter < 'a , REG , MiiRmiiSel > ; impl < 'a , REG > MiiRmiiSelW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "MII interface is selected"] # [inline (always)] pub fn mii (self) -> & 'a mut crate :: W < REG > { self . variant (MiiRmiiSel :: Mii) } # [doc = "RMII PHY interface is selected"] # [inline (always)] pub fn rmii_phy (self) -> & 'a mut crate :: W < REG > { self . variant (MiiRmiiSel :: RmiiPhy) } } impl R { # [doc = "Bit 23 - Ethernet PHY interface selection"] # [inline (always)] pub fn mii_rmii_sel (& self) -> MiiRmiiSelR { MiiRmiiSelR :: new (((self . bits >> 23) & 1) != 0) } } impl W { # [doc = "Bit 23 - Ethernet PHY interface selection"] # [inline (always)] pub fn mii_rmii_sel (& mut self) -> MiiRmiiSelW < PmcSpec > { MiiRmiiSelW :: new (self , 23) } } # [doc = "peripheral mode configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`pmc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pmc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PmcSpec ; impl crate :: RegisterSpec for PmcSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`pmc::R`](R) reader structure"] impl crate :: Readable for PmcSpec { } # [doc = "`write(|w| ..)` method takes [`pmc::W`](W) writer structure"] impl crate :: Writable for PmcSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets PMC to value 0"] impl crate :: Resettable for PmcSpec { }