# [doc = "Register `IVLR` reader"] pub type R = crate :: R < IvlrSpec > ; # [doc = "Register `IVLR` writer"] pub type W = crate :: W < IvlrSpec > ; # [doc = "Field `IV` reader - IV31"] pub type IvR = crate :: FieldReader < u32 > ; # [doc = "Field `IV` writer - IV31"] pub type IvW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R { # [doc = "Bits 0:31 - IV31"] # [inline (always)] pub fn iv (& self) -> IvR { IvR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - IV31"] # [inline (always)] pub fn iv (& mut self) -> IvW < IvlrSpec > { IvW :: new (self , 0) } } # [doc = "initialization vector registers\n\nYou can [`read`](crate::Reg::read) this register and get [`ivlr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ivlr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IvlrSpec ; impl crate :: RegisterSpec for IvlrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ivlr::R`](R) reader structure"] impl crate :: Readable for IvlrSpec { } # [doc = "`write(|w| ..)` method takes [`ivlr::W`](W) writer structure"] impl crate :: Writable for IvlrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets IVLR to value 0"] impl crate :: Resettable for IvlrSpec { }