# [repr (C)] # [doc = "Cluster KEY%s, containing K?LR, K?RR"] # [doc (alias = "KEY")] pub struct Key { klr : Klr , krr : Krr , } impl Key { # [doc = "0x00 - key registers"] # [inline (always)] pub const fn klr (& self) -> & Klr { & self . klr } # [doc = "0x04 - key registers"] # [inline (always)] pub const fn krr (& self) -> & Krr { & self . krr } } # [doc = "KLR (w) register accessor: key registers\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`klr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@klr`] module"] # [doc (alias = "KLR")] pub type Klr = crate :: Reg < klr :: KlrSpec > ; # [doc = "key registers"] pub mod klr ; # [doc = "KRR (w) register accessor: key registers\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`krr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@krr`] module"] # [doc (alias = "KRR")] pub type Krr = crate :: Reg < krr :: KrrSpec > ; # [doc = "key registers"] pub mod krr ;