# [doc = "Register `CSGCM%sR` reader"] pub type R = crate :: R < CsgcmrSpec > ; # [doc = "Register `CSGCM%sR` writer"] pub type W = crate :: W < CsgcmrSpec > ; # [doc = "Field `CSGCMR` reader - CSGCM0R"] pub type CsgcmrR = crate :: FieldReader < u32 > ; # [doc = "Field `CSGCMR` writer - CSGCM0R"] pub type CsgcmrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R { # [doc = "Bits 0:31 - CSGCM0R"] # [inline (always)] pub fn csgcmr (& self) -> CsgcmrR { CsgcmrR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - CSGCM0R"] # [inline (always)] pub fn csgcmr (& mut self) -> CsgcmrW < CsgcmrSpec > { CsgcmrW :: new (self , 0) } } # [doc = "context swap register\n\nYou can [`read`](crate::Reg::read) this register and get [`csgcmr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`csgcmr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CsgcmrSpec ; impl crate :: RegisterSpec for CsgcmrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`csgcmr::R`](R) reader structure"] impl crate :: Readable for CsgcmrSpec { } # [doc = "`write(|w| ..)` method takes [`csgcmr::W`](W) writer structure"] impl crate :: Writable for CsgcmrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CSGCM%sR to value 0"] impl crate :: Resettable for CsgcmrSpec { }