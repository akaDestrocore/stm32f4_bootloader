# [repr (C)] # [doc = "Cluster INIT%s, containing IV?LR, IV?RR"] # [doc (alias = "INIT")] pub struct Init { ivlr : Ivlr , ivrr : Ivrr , } impl Init { # [doc = "0x00 - initialization vector registers"] # [inline (always)] pub const fn ivlr (& self) -> & Ivlr { & self . ivlr } # [doc = "0x04 - initialization vector registers"] # [inline (always)] pub const fn ivrr (& self) -> & Ivrr { & self . ivrr } } # [doc = "IVLR (rw) register accessor: initialization vector registers\n\nYou can [`read`](crate::Reg::read) this register and get [`ivlr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ivlr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ivlr`] module"] # [doc (alias = "IVLR")] pub type Ivlr = crate :: Reg < ivlr :: IvlrSpec > ; # [doc = "initialization vector registers"] pub mod ivlr ; # [doc = "IVRR (rw) register accessor: initialization vector registers\n\nYou can [`read`](crate::Reg::read) this register and get [`ivrr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ivrr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ivrr`] module"] # [doc (alias = "IVRR")] pub type Ivrr = crate :: Reg < ivrr :: IvrrSpec > ; # [doc = "initialization vector registers"] pub mod ivrr ;