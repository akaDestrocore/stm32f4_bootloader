# [doc = "Register `DOEPMSK` reader"] pub type R = crate :: R < DoepmskSpec > ; # [doc = "Register `DOEPMSK` writer"] pub type W = crate :: W < DoepmskSpec > ; # [doc = "Field `XFRCM` reader - Transfer completed interrupt mask"] pub type XfrcmR = crate :: BitReader ; # [doc = "Field `XFRCM` writer - Transfer completed interrupt mask"] pub type XfrcmW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `EPDM` reader - Endpoint disabled interrupt mask"] pub type EpdmR = crate :: BitReader ; # [doc = "Field `EPDM` writer - Endpoint disabled interrupt mask"] pub type EpdmW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `STUPM` reader - SETUP phase done mask"] pub type StupmR = crate :: BitReader ; # [doc = "Field `STUPM` writer - SETUP phase done mask"] pub type StupmW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `OTEPDM` reader - OUT token received when endpoint disabled mask"] pub type OtepdmR = crate :: BitReader ; # [doc = "Field `OTEPDM` writer - OUT token received when endpoint disabled mask"] pub type OtepdmW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R { # [doc = "Bit 0 - Transfer completed interrupt mask"] # [inline (always)] pub fn xfrcm (& self) -> XfrcmR { XfrcmR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Endpoint disabled interrupt mask"] # [inline (always)] pub fn epdm (& self) -> EpdmR { EpdmR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 3 - SETUP phase done mask"] # [inline (always)] pub fn stupm (& self) -> StupmR { StupmR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - OUT token received when endpoint disabled mask"] # [inline (always)] pub fn otepdm (& self) -> OtepdmR { OtepdmR :: new (((self . bits >> 4) & 1) != 0) } } impl W { # [doc = "Bit 0 - Transfer completed interrupt mask"] # [inline (always)] pub fn xfrcm (& mut self) -> XfrcmW < DoepmskSpec > { XfrcmW :: new (self , 0) } # [doc = "Bit 1 - Endpoint disabled interrupt mask"] # [inline (always)] pub fn epdm (& mut self) -> EpdmW < DoepmskSpec > { EpdmW :: new (self , 1) } # [doc = "Bit 3 - SETUP phase done mask"] # [inline (always)] pub fn stupm (& mut self) -> StupmW < DoepmskSpec > { StupmW :: new (self , 3) } # [doc = "Bit 4 - OUT token received when endpoint disabled mask"] # [inline (always)] pub fn otepdm (& mut self) -> OtepdmW < DoepmskSpec > { OtepdmW :: new (self , 4) } } # [doc = "OTG_FS device OUT endpoint common interrupt mask register (OTG_FS_DOEPMSK)\n\nYou can [`read`](crate::Reg::read) this register and get [`doepmsk::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`doepmsk::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DoepmskSpec ; impl crate :: RegisterSpec for DoepmskSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`doepmsk::R`](R) reader structure"] impl crate :: Readable for DoepmskSpec { } # [doc = "`write(|w| ..)` method takes [`doepmsk::W`](W) writer structure"] impl crate :: Writable for DoepmskSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets DOEPMSK to value 0"] impl crate :: Resettable for DoepmskSpec { }