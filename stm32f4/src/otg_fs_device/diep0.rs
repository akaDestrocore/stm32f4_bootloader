# [repr (C)] # [doc = "Device IN endpoint 0"] # [doc (alias = "DIEP0")] pub struct Diep0 { ctl : Ctl , _reserved1 : [u8 ; 0x04] , int : Int , _reserved2 : [u8 ; 0x04] , tsiz : Tsiz , _reserved3 : [u8 ; 0x04] , txfsts : Txfsts , } impl Diep0 { # [doc = "0x00 - OTG_FS device control IN endpoint 0 control register (OTG_FS_DIEPCTL0)"] # [inline (always)] pub const fn ctl (& self) -> & Ctl { & self . ctl } # [doc = "0x08 - device endpoint-x interrupt register"] # [inline (always)] pub const fn int (& self) -> & Int { & self . int } # [doc = "0x10 - device endpoint-0 transfer size register"] # [inline (always)] pub const fn tsiz (& self) -> & Tsiz { & self . tsiz } # [doc = "0x18 - OTG_FS device IN endpoint transmit FIFO status register"] # [inline (always)] pub const fn txfsts (& self) -> & Txfsts { & self . txfsts } } # [doc = "CTL (rw) register accessor: OTG_FS device control IN endpoint 0 control register (OTG_FS_DIEPCTL0)\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`] module"] # [doc (alias = "CTL")] pub type Ctl = crate :: Reg < ctl :: CtlSpec > ; # [doc = "OTG_FS device control IN endpoint 0 control register (OTG_FS_DIEPCTL0)"] pub mod ctl ; # [doc = "INT (rw) register accessor: device endpoint-x interrupt register\n\nYou can [`read`](crate::Reg::read) this register and get [`int::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`int::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int`] module"] # [doc (alias = "INT")] pub type Int = crate :: Reg < int :: IntSpec > ; # [doc = "device endpoint-x interrupt register"] pub mod int ; # [doc = "TSIZ (rw) register accessor: device endpoint-0 transfer size register\n\nYou can [`read`](crate::Reg::read) this register and get [`tsiz::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tsiz::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tsiz`] module"] # [doc (alias = "TSIZ")] pub type Tsiz = crate :: Reg < tsiz :: TsizSpec > ; # [doc = "device endpoint-0 transfer size register"] pub mod tsiz ; # [doc = "TXFSTS (r) register accessor: OTG_FS device IN endpoint transmit FIFO status register\n\nYou can [`read`](crate::Reg::read) this register and get [`txfsts::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txfsts`] module"] # [doc (alias = "TXFSTS")] pub type Txfsts = crate :: Reg < txfsts :: TxfstsSpec > ; # [doc = "OTG_FS device IN endpoint transmit FIFO status register"] pub mod txfsts ;