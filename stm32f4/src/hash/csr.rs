# [doc = "Register `CSR%s` reader"] pub type R = crate :: R < CsrSpec > ; # [doc = "Register `CSR%s` writer"] pub type W = crate :: W < CsrSpec > ; # [doc = "Field `CSR` reader - CSR0"] pub type CsrR = crate :: FieldReader < u32 > ; # [doc = "Field `CSR` writer - CSR0"] pub type CsrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R { # [doc = "Bits 0:31 - CSR0"] # [inline (always)] pub fn csr (& self) -> CsrR { CsrR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - CSR0"] # [inline (always)] pub fn csr (& mut self) -> CsrW < CsrSpec > { CsrW :: new (self , 0) } } # [doc = "context swap registers\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`csr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CsrSpec ; impl crate :: RegisterSpec for CsrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`csr::R`](R) reader structure"] impl crate :: Readable for CsrSpec { } # [doc = "`write(|w| ..)` method takes [`csr::W`](W) writer structure"] impl crate :: Writable for CsrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CSR%s to value 0"] impl crate :: Resettable for CsrSpec { }