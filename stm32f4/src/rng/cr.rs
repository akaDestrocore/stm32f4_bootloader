# [doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ; # [doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ; # [doc = "Random number generator enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Rngen { # [doc = "0: Random number generator is disabled"] Disabled = 0 , # [doc = "1: Random number generator is enabled"] Enabled = 1 , } impl From < Rngen > for bool { # [inline (always)] fn from (variant : Rngen) -> Self { variant as u8 != 0 } } # [doc = "Field `RNGEN` reader - Random number generator enable"] pub type RngenR = crate :: BitReader < Rngen > ; impl RngenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Rngen { match self . bits { false => Rngen :: Disabled , true => Rngen :: Enabled , } } # [doc = "Random number generator is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Rngen :: Disabled } # [doc = "Random number generator is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Rngen :: Enabled } } # [doc = "Field `RNGEN` writer - Random number generator enable"] pub type RngenW < 'a , REG > = crate :: BitWriter < 'a , REG , Rngen > ; impl < 'a , REG > RngenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Random number generator is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Rngen :: Disabled) } # [doc = "Random number generator is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Rngen :: Enabled) } } # [doc = "Interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ie { # [doc = "0: RNG interrupt is disabled"] Disabled = 0 , # [doc = "1: RNG interrupt is enabled"] Enabled = 1 , } impl From < Ie > for bool { # [inline (always)] fn from (variant : Ie) -> Self { variant as u8 != 0 } } # [doc = "Field `IE` reader - Interrupt enable"] pub type IeR = crate :: BitReader < Ie > ; impl IeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Ie { match self . bits { false => Ie :: Disabled , true => Ie :: Enabled , } } # [doc = "RNG interrupt is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Ie :: Disabled } # [doc = "RNG interrupt is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Ie :: Enabled } } # [doc = "Field `IE` writer - Interrupt enable"] pub type IeW < 'a , REG > = crate :: BitWriter < 'a , REG , Ie > ; impl < 'a , REG > IeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "RNG interrupt is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Ie :: Disabled) } # [doc = "RNG interrupt is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Ie :: Enabled) } } impl R { # [doc = "Bit 2 - Random number generator enable"] # [inline (always)] pub fn rngen (& self) -> RngenR { RngenR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Interrupt enable"] # [inline (always)] pub fn ie (& self) -> IeR { IeR :: new (((self . bits >> 3) & 1) != 0) } } impl W { # [doc = "Bit 2 - Random number generator enable"] # [inline (always)] pub fn rngen (& mut self) -> RngenW < CrSpec > { RngenW :: new (self , 2) } # [doc = "Bit 3 - Interrupt enable"] # [inline (always)] pub fn ie (& mut self) -> IeW < CrSpec > { IeW :: new (self , 3) } } # [doc = "control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { } # [doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CR to value 0"] impl crate :: Resettable for CrSpec { }