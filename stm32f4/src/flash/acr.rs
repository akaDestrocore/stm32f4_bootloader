# [doc = "Register `ACR` reader"] pub type R = crate :: R < AcrSpec > ; # [doc = "Register `ACR` writer"] pub type W = crate :: W < AcrSpec > ; # [doc = "Latency\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Latency { # [doc = "0: 0 wait states"] Ws0 = 0 , # [doc = "1: 1 wait states"] Ws1 = 1 , # [doc = "2: 2 wait states"] Ws2 = 2 , # [doc = "3: 3 wait states"] Ws3 = 3 , # [doc = "4: 4 wait states"] Ws4 = 4 , # [doc = "5: 5 wait states"] Ws5 = 5 , # [doc = "6: 6 wait states"] Ws6 = 6 , # [doc = "7: 7 wait states"] Ws7 = 7 , } impl From < Latency > for u8 { # [inline (always)] fn from (variant : Latency) -> Self { variant as _ } } impl crate :: FieldSpec for Latency { type Ux = u8 ; } impl crate :: IsEnum for Latency { } # [doc = "Field `LATENCY` reader - Latency"] pub type LatencyR = crate :: FieldReader < Latency > ; impl LatencyR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Latency { match self . bits { 0 => Latency :: Ws0 , 1 => Latency :: Ws1 , 2 => Latency :: Ws2 , 3 => Latency :: Ws3 , 4 => Latency :: Ws4 , 5 => Latency :: Ws5 , 6 => Latency :: Ws6 , 7 => Latency :: Ws7 , _ => unreachable ! () , } } # [doc = "0 wait states"] # [inline (always)] pub fn is_ws0 (& self) -> bool { * self == Latency :: Ws0 } # [doc = "1 wait states"] # [inline (always)] pub fn is_ws1 (& self) -> bool { * self == Latency :: Ws1 } # [doc = "2 wait states"] # [inline (always)] pub fn is_ws2 (& self) -> bool { * self == Latency :: Ws2 } # [doc = "3 wait states"] # [inline (always)] pub fn is_ws3 (& self) -> bool { * self == Latency :: Ws3 } # [doc = "4 wait states"] # [inline (always)] pub fn is_ws4 (& self) -> bool { * self == Latency :: Ws4 } # [doc = "5 wait states"] # [inline (always)] pub fn is_ws5 (& self) -> bool { * self == Latency :: Ws5 } # [doc = "6 wait states"] # [inline (always)] pub fn is_ws6 (& self) -> bool { * self == Latency :: Ws6 } # [doc = "7 wait states"] # [inline (always)] pub fn is_ws7 (& self) -> bool { * self == Latency :: Ws7 } } # [doc = "Field `LATENCY` writer - Latency"] pub type LatencyW < 'a , REG > = crate :: FieldWriter < 'a , REG , 3 , Latency , crate :: Safe > ; impl < 'a , REG > LatencyW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "0 wait states"] # [inline (always)] pub fn ws0 (self) -> & 'a mut crate :: W < REG > { self . variant (Latency :: Ws0) } # [doc = "1 wait states"] # [inline (always)] pub fn ws1 (self) -> & 'a mut crate :: W < REG > { self . variant (Latency :: Ws1) } # [doc = "2 wait states"] # [inline (always)] pub fn ws2 (self) -> & 'a mut crate :: W < REG > { self . variant (Latency :: Ws2) } # [doc = "3 wait states"] # [inline (always)] pub fn ws3 (self) -> & 'a mut crate :: W < REG > { self . variant (Latency :: Ws3) } # [doc = "4 wait states"] # [inline (always)] pub fn ws4 (self) -> & 'a mut crate :: W < REG > { self . variant (Latency :: Ws4) } # [doc = "5 wait states"] # [inline (always)] pub fn ws5 (self) -> & 'a mut crate :: W < REG > { self . variant (Latency :: Ws5) } # [doc = "6 wait states"] # [inline (always)] pub fn ws6 (self) -> & 'a mut crate :: W < REG > { self . variant (Latency :: Ws6) } # [doc = "7 wait states"] # [inline (always)] pub fn ws7 (self) -> & 'a mut crate :: W < REG > { self . variant (Latency :: Ws7) } } # [doc = "Prefetch enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Prften { # [doc = "0: Prefetch is disabled"] Disabled = 0 , # [doc = "1: Prefetch is enabled"] Enabled = 1 , } impl From < Prften > for bool { # [inline (always)] fn from (variant : Prften) -> Self { variant as u8 != 0 } } # [doc = "Field `PRFTEN` reader - Prefetch enable"] pub type PrftenR = crate :: BitReader < Prften > ; impl PrftenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Prften { match self . bits { false => Prften :: Disabled , true => Prften :: Enabled , } } # [doc = "Prefetch is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Prften :: Disabled } # [doc = "Prefetch is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Prften :: Enabled } } # [doc = "Field `PRFTEN` writer - Prefetch enable"] pub type PrftenW < 'a , REG > = crate :: BitWriter < 'a , REG , Prften > ; impl < 'a , REG > PrftenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Prefetch is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Prften :: Disabled) } # [doc = "Prefetch is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Prften :: Enabled) } } # [doc = "Instruction cache enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Icen { # [doc = "0: Instruction cache is disabled"] Disabled = 0 , # [doc = "1: Instruction cache is enabled"] Enabled = 1 , } impl From < Icen > for bool { # [inline (always)] fn from (variant : Icen) -> Self { variant as u8 != 0 } } # [doc = "Field `ICEN` reader - Instruction cache enable"] pub type IcenR = crate :: BitReader < Icen > ; impl IcenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Icen { match self . bits { false => Icen :: Disabled , true => Icen :: Enabled , } } # [doc = "Instruction cache is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Icen :: Disabled } # [doc = "Instruction cache is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Icen :: Enabled } } # [doc = "Field `ICEN` writer - Instruction cache enable"] pub type IcenW < 'a , REG > = crate :: BitWriter < 'a , REG , Icen > ; impl < 'a , REG > IcenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Instruction cache is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Icen :: Disabled) } # [doc = "Instruction cache is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Icen :: Enabled) } } # [doc = "Data cache enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Dcen { # [doc = "0: Data cache is disabled"] Disabled = 0 , # [doc = "1: Data cache is enabled"] Enabled = 1 , } impl From < Dcen > for bool { # [inline (always)] fn from (variant : Dcen) -> Self { variant as u8 != 0 } } # [doc = "Field `DCEN` reader - Data cache enable"] pub type DcenR = crate :: BitReader < Dcen > ; impl DcenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Dcen { match self . bits { false => Dcen :: Disabled , true => Dcen :: Enabled , } } # [doc = "Data cache is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Dcen :: Disabled } # [doc = "Data cache is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Dcen :: Enabled } } # [doc = "Field `DCEN` writer - Data cache enable"] pub type DcenW < 'a , REG > = crate :: BitWriter < 'a , REG , Dcen > ; impl < 'a , REG > DcenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Data cache is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Dcen :: Disabled) } # [doc = "Data cache is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Dcen :: Enabled) } } # [doc = "Instruction cache reset\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Icrst { # [doc = "0: Instruction cache is not reset"] NoReset = 0 , # [doc = "1: Instruction cache is reset"] Reset = 1 , } impl From < Icrst > for bool { # [inline (always)] fn from (variant : Icrst) -> Self { variant as u8 != 0 } } # [doc = "Field `ICRST` writer - Instruction cache reset"] pub type IcrstW < 'a , REG > = crate :: BitWriter < 'a , REG , Icrst > ; impl < 'a , REG > IcrstW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Instruction cache is not reset"] # [inline (always)] pub fn no_reset (self) -> & 'a mut crate :: W < REG > { self . variant (Icrst :: NoReset) } # [doc = "Instruction cache is reset"] # [inline (always)] pub fn reset (self) -> & 'a mut crate :: W < REG > { self . variant (Icrst :: Reset) } } # [doc = "Data cache reset\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Dcrst { # [doc = "0: Data cache is not reset"] NoReset = 0 , # [doc = "1: Data cache is reset"] Reset = 1 , } impl From < Dcrst > for bool { # [inline (always)] fn from (variant : Dcrst) -> Self { variant as u8 != 0 } } # [doc = "Field `DCRST` reader - Data cache reset"] pub type DcrstR = crate :: BitReader < Dcrst > ; impl DcrstR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Dcrst { match self . bits { false => Dcrst :: NoReset , true => Dcrst :: Reset , } } # [doc = "Data cache is not reset"] # [inline (always)] pub fn is_no_reset (& self) -> bool { * self == Dcrst :: NoReset } # [doc = "Data cache is reset"] # [inline (always)] pub fn is_reset (& self) -> bool { * self == Dcrst :: Reset } } # [doc = "Field `DCRST` writer - Data cache reset"] pub type DcrstW < 'a , REG > = crate :: BitWriter < 'a , REG , Dcrst > ; impl < 'a , REG > DcrstW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Data cache is not reset"] # [inline (always)] pub fn no_reset (self) -> & 'a mut crate :: W < REG > { self . variant (Dcrst :: NoReset) } # [doc = "Data cache is reset"] # [inline (always)] pub fn reset (self) -> & 'a mut crate :: W < REG > { self . variant (Dcrst :: Reset) } } impl R { # [doc = "Bits 0:2 - Latency"] # [inline (always)] pub fn latency (& self) -> LatencyR { LatencyR :: new ((self . bits & 7) as u8) } # [doc = "Bit 8 - Prefetch enable"] # [inline (always)] pub fn prften (& self) -> PrftenR { PrftenR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Instruction cache enable"] # [inline (always)] pub fn icen (& self) -> IcenR { IcenR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Data cache enable"] # [inline (always)] pub fn dcen (& self) -> DcenR { DcenR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 12 - Data cache reset"] # [inline (always)] pub fn dcrst (& self) -> DcrstR { DcrstR :: new (((self . bits >> 12) & 1) != 0) } } impl W { # [doc = "Bits 0:2 - Latency"] # [inline (always)] pub fn latency (& mut self) -> LatencyW < AcrSpec > { LatencyW :: new (self , 0) } # [doc = "Bit 8 - Prefetch enable"] # [inline (always)] pub fn prften (& mut self) -> PrftenW < AcrSpec > { PrftenW :: new (self , 8) } # [doc = "Bit 9 - Instruction cache enable"] # [inline (always)] pub fn icen (& mut self) -> IcenW < AcrSpec > { IcenW :: new (self , 9) } # [doc = "Bit 10 - Data cache enable"] # [inline (always)] pub fn dcen (& mut self) -> DcenW < AcrSpec > { DcenW :: new (self , 10) } # [doc = "Bit 11 - Instruction cache reset"] # [inline (always)] pub fn icrst (& mut self) -> IcrstW < AcrSpec > { IcrstW :: new (self , 11) } # [doc = "Bit 12 - Data cache reset"] # [inline (always)] pub fn dcrst (& mut self) -> DcrstW < AcrSpec > { DcrstW :: new (self , 12) } } # [doc = "Flash access control register\n\nYou can [`read`](crate::Reg::read) this register and get [`acr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`acr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct AcrSpec ; impl crate :: RegisterSpec for AcrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`acr::R`](R) reader structure"] impl crate :: Readable for AcrSpec { } # [doc = "`write(|w| ..)` method takes [`acr::W`](W) writer structure"] impl crate :: Writable for AcrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets ACR to value 0"] impl crate :: Resettable for AcrSpec { }