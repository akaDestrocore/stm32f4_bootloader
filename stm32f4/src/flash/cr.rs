# [doc = "Register `CR` reader"] pub type R = crate :: R < CrSpec > ; # [doc = "Register `CR` writer"] pub type W = crate :: W < CrSpec > ; # [doc = "Programming\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Pg { # [doc = "1: Flash programming activated"] Program = 1 , } impl From < Pg > for bool { # [inline (always)] fn from (variant : Pg) -> Self { variant as u8 != 0 } } # [doc = "Field `PG` reader - Programming"] pub type PgR = crate :: BitReader < Pg > ; impl PgR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Pg > { match self . bits { true => Some (Pg :: Program) , _ => None , } } # [doc = "Flash programming activated"] # [inline (always)] pub fn is_program (& self) -> bool { * self == Pg :: Program } } # [doc = "Field `PG` writer - Programming"] pub type PgW < 'a , REG > = crate :: BitWriter < 'a , REG , Pg > ; impl < 'a , REG > PgW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Flash programming activated"] # [inline (always)] pub fn program (self) -> & 'a mut crate :: W < REG > { self . variant (Pg :: Program) } } # [doc = "Sector Erase\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ser { # [doc = "1: Erase activated for selected sector"] SectorErase = 1 , } impl From < Ser > for bool { # [inline (always)] fn from (variant : Ser) -> Self { variant as u8 != 0 } } # [doc = "Field `SER` reader - Sector Erase"] pub type SerR = crate :: BitReader < Ser > ; impl SerR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Ser > { match self . bits { true => Some (Ser :: SectorErase) , _ => None , } } # [doc = "Erase activated for selected sector"] # [inline (always)] pub fn is_sector_erase (& self) -> bool { * self == Ser :: SectorErase } } # [doc = "Field `SER` writer - Sector Erase"] pub type SerW < 'a , REG > = crate :: BitWriter < 'a , REG , Ser > ; impl < 'a , REG > SerW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Erase activated for selected sector"] # [inline (always)] pub fn sector_erase (self) -> & 'a mut crate :: W < REG > { self . variant (Ser :: SectorErase) } } # [doc = "Mass Erase\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Mer { # [doc = "1: Erase activated for all user sectors"] MassErase = 1 , } impl From < Mer > for bool { # [inline (always)] fn from (variant : Mer) -> Self { variant as u8 != 0 } } # [doc = "Field `MER` reader - Mass Erase"] pub type MerR = crate :: BitReader < Mer > ; impl MerR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Mer > { match self . bits { true => Some (Mer :: MassErase) , _ => None , } } # [doc = "Erase activated for all user sectors"] # [inline (always)] pub fn is_mass_erase (& self) -> bool { * self == Mer :: MassErase } } # [doc = "Field `MER` writer - Mass Erase"] pub type MerW < 'a , REG > = crate :: BitWriter < 'a , REG , Mer > ; impl < 'a , REG > MerW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Erase activated for all user sectors"] # [inline (always)] pub fn mass_erase (self) -> & 'a mut crate :: W < REG > { self . variant (Mer :: MassErase) } } # [doc = "Field `SNB` reader - Sector number"] pub type SnbR = crate :: FieldReader ; # [doc = "Field `SNB` writer - Sector number"] pub type SnbW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; # [doc = "Program size\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Psize { # [doc = "0: Program x8"] Psize8 = 0 , # [doc = "1: Program x16"] Psize16 = 1 , # [doc = "2: Program x32"] Psize32 = 2 , # [doc = "3: Program x64"] Psize64 = 3 , } impl From < Psize > for u8 { # [inline (always)] fn from (variant : Psize) -> Self { variant as _ } } impl crate :: FieldSpec for Psize { type Ux = u8 ; } impl crate :: IsEnum for Psize { } # [doc = "Field `PSIZE` reader - Program size"] pub type PsizeR = crate :: FieldReader < Psize > ; impl PsizeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Psize { match self . bits { 0 => Psize :: Psize8 , 1 => Psize :: Psize16 , 2 => Psize :: Psize32 , 3 => Psize :: Psize64 , _ => unreachable ! () , } } # [doc = "Program x8"] # [inline (always)] pub fn is_psize8 (& self) -> bool { * self == Psize :: Psize8 } # [doc = "Program x16"] # [inline (always)] pub fn is_psize16 (& self) -> bool { * self == Psize :: Psize16 } # [doc = "Program x32"] # [inline (always)] pub fn is_psize32 (& self) -> bool { * self == Psize :: Psize32 } # [doc = "Program x64"] # [inline (always)] pub fn is_psize64 (& self) -> bool { * self == Psize :: Psize64 } } # [doc = "Field `PSIZE` writer - Program size"] pub type PsizeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , Psize , crate :: Safe > ; impl < 'a , REG > PsizeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "Program x8"] # [inline (always)] pub fn psize8 (self) -> & 'a mut crate :: W < REG > { self . variant (Psize :: Psize8) } # [doc = "Program x16"] # [inline (always)] pub fn psize16 (self) -> & 'a mut crate :: W < REG > { self . variant (Psize :: Psize16) } # [doc = "Program x32"] # [inline (always)] pub fn psize32 (self) -> & 'a mut crate :: W < REG > { self . variant (Psize :: Psize32) } # [doc = "Program x64"] # [inline (always)] pub fn psize64 (self) -> & 'a mut crate :: W < REG > { self . variant (Psize :: Psize64) } } # [doc = "Start\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Strt { # [doc = "1: Trigger an erase operation"] Start = 1 , } impl From < Strt > for bool { # [inline (always)] fn from (variant : Strt) -> Self { variant as u8 != 0 } } # [doc = "Field `STRT` reader - Start"] pub type StrtR = crate :: BitReader < Strt > ; impl StrtR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Strt > { match self . bits { true => Some (Strt :: Start) , _ => None , } } # [doc = "Trigger an erase operation"] # [inline (always)] pub fn is_start (& self) -> bool { * self == Strt :: Start } } # [doc = "Field `STRT` writer - Start"] pub type StrtW < 'a , REG > = crate :: BitWriter < 'a , REG , Strt > ; impl < 'a , REG > StrtW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Trigger an erase operation"] # [inline (always)] pub fn start (self) -> & 'a mut crate :: W < REG > { self . variant (Strt :: Start) } } # [doc = "End of operation interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Eopie { # [doc = "0: End of operation interrupt disabled"] Disabled = 0 , # [doc = "1: End of operation interrupt enabled"] Enabled = 1 , } impl From < Eopie > for bool { # [inline (always)] fn from (variant : Eopie) -> Self { variant as u8 != 0 } } # [doc = "Field `EOPIE` reader - End of operation interrupt enable"] pub type EopieR = crate :: BitReader < Eopie > ; impl EopieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Eopie { match self . bits { false => Eopie :: Disabled , true => Eopie :: Enabled , } } # [doc = "End of operation interrupt disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Eopie :: Disabled } # [doc = "End of operation interrupt enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Eopie :: Enabled } } # [doc = "Field `EOPIE` writer - End of operation interrupt enable"] pub type EopieW < 'a , REG > = crate :: BitWriter < 'a , REG , Eopie > ; impl < 'a , REG > EopieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "End of operation interrupt disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Eopie :: Disabled) } # [doc = "End of operation interrupt enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Eopie :: Enabled) } } # [doc = "Error interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Errie { # [doc = "0: Error interrupt generation disabled"] Disabled = 0 , # [doc = "1: Error interrupt generation enabled"] Enabled = 1 , } impl From < Errie > for bool { # [inline (always)] fn from (variant : Errie) -> Self { variant as u8 != 0 } } # [doc = "Field `ERRIE` reader - Error interrupt enable"] pub type ErrieR = crate :: BitReader < Errie > ; impl ErrieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Errie { match self . bits { false => Errie :: Disabled , true => Errie :: Enabled , } } # [doc = "Error interrupt generation disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Errie :: Disabled } # [doc = "Error interrupt generation enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Errie :: Enabled } } # [doc = "Field `ERRIE` writer - Error interrupt enable"] pub type ErrieW < 'a , REG > = crate :: BitWriter < 'a , REG , Errie > ; impl < 'a , REG > ErrieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Error interrupt generation disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Errie :: Disabled) } # [doc = "Error interrupt generation enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Errie :: Enabled) } } # [doc = "Lock\n\nValue on reset: 1"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Lock { # [doc = "0: FLASH_CR register is unlocked"] Unlocked = 0 , # [doc = "1: FLASH_CR register is locked"] Locked = 1 , } impl From < Lock > for bool { # [inline (always)] fn from (variant : Lock) -> Self { variant as u8 != 0 } } # [doc = "Field `LOCK` reader - Lock"] pub type LockR = crate :: BitReader < Lock > ; impl LockR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Lock { match self . bits { false => Lock :: Unlocked , true => Lock :: Locked , } } # [doc = "FLASH_CR register is unlocked"] # [inline (always)] pub fn is_unlocked (& self) -> bool { * self == Lock :: Unlocked } # [doc = "FLASH_CR register is locked"] # [inline (always)] pub fn is_locked (& self) -> bool { * self == Lock :: Locked } } # [doc = "Field `LOCK` writer - Lock"] pub type LockW < 'a , REG > = crate :: BitWriter < 'a , REG , Lock > ; impl < 'a , REG > LockW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "FLASH_CR register is unlocked"] # [inline (always)] pub fn unlocked (self) -> & 'a mut crate :: W < REG > { self . variant (Lock :: Unlocked) } # [doc = "FLASH_CR register is locked"] # [inline (always)] pub fn locked (self) -> & 'a mut crate :: W < REG > { self . variant (Lock :: Locked) } } impl R { # [doc = "Bit 0 - Programming"] # [inline (always)] pub fn pg (& self) -> PgR { PgR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Sector Erase"] # [inline (always)] pub fn ser (& self) -> SerR { SerR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Mass Erase"] # [inline (always)] pub fn mer (& self) -> MerR { MerR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bits 3:6 - Sector number"] # [inline (always)] pub fn snb (& self) -> SnbR { SnbR :: new (((self . bits >> 3) & 0x0f) as u8) } # [doc = "Bits 8:9 - Program size"] # [inline (always)] pub fn psize (& self) -> PsizeR { PsizeR :: new (((self . bits >> 8) & 3) as u8) } # [doc = "Bit 16 - Start"] # [inline (always)] pub fn strt (& self) -> StrtR { StrtR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 24 - End of operation interrupt enable"] # [inline (always)] pub fn eopie (& self) -> EopieR { EopieR :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - Error interrupt enable"] # [inline (always)] pub fn errie (& self) -> ErrieR { ErrieR :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 31 - Lock"] # [inline (always)] pub fn lock (& self) -> LockR { LockR :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bit 0 - Programming"] # [inline (always)] pub fn pg (& mut self) -> PgW < CrSpec > { PgW :: new (self , 0) } # [doc = "Bit 1 - Sector Erase"] # [inline (always)] pub fn ser (& mut self) -> SerW < CrSpec > { SerW :: new (self , 1) } # [doc = "Bit 2 - Mass Erase"] # [inline (always)] pub fn mer (& mut self) -> MerW < CrSpec > { MerW :: new (self , 2) } # [doc = "Bits 3:6 - Sector number"] # [inline (always)] pub fn snb (& mut self) -> SnbW < CrSpec > { SnbW :: new (self , 3) } # [doc = "Bits 8:9 - Program size"] # [inline (always)] pub fn psize (& mut self) -> PsizeW < CrSpec > { PsizeW :: new (self , 8) } # [doc = "Bit 16 - Start"] # [inline (always)] pub fn strt (& mut self) -> StrtW < CrSpec > { StrtW :: new (self , 16) } # [doc = "Bit 24 - End of operation interrupt enable"] # [inline (always)] pub fn eopie (& mut self) -> EopieW < CrSpec > { EopieW :: new (self , 24) } # [doc = "Bit 25 - Error interrupt enable"] # [inline (always)] pub fn errie (& mut self) -> ErrieW < CrSpec > { ErrieW :: new (self , 25) } # [doc = "Bit 31 - Lock"] # [inline (always)] pub fn lock (& mut self) -> LockW < CrSpec > { LockW :: new (self , 31) } } # [doc = "Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CrSpec ; impl crate :: RegisterSpec for CrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`cr::R`](R) reader structure"] impl crate :: Readable for CrSpec { } # [doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"] impl crate :: Writable for CrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CR to value 0x8000_0000"] impl crate :: Resettable for CrSpec { const RESET_VALUE : u32 = 0x8000_0000 ; }