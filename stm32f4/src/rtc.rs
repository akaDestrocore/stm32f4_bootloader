# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { tr : Tr , dr : Dr , cr : Cr , isr : Isr , prer : Prer , wutr : Wutr , calibr : Calibr , alrmr : [Alrmr ; 2] , wpr : Wpr , ssr : Ssr , shiftr : Shiftr , tstr : Tstr , tsdr : Tsdr , tsssr : Tsssr , calr : Calr , tafcr : Tafcr , alrmssr : [Alrmssr ; 2] , _reserved17 : [u8 ; 0x04] , bkpr : [Bkpr ; 20] , } impl RegisterBlock { # [doc = "0x00 - time register"] # [inline (always)] pub const fn tr (& self) -> & Tr { & self . tr } # [doc = "0x04 - date register"] # [inline (always)] pub const fn dr (& self) -> & Dr { & self . dr } # [doc = "0x08 - control register"] # [inline (always)] pub const fn cr (& self) -> & Cr { & self . cr } # [doc = "0x0c - initialization and status register"] # [inline (always)] pub const fn isr (& self) -> & Isr { & self . isr } # [doc = "0x10 - prescaler register"] # [inline (always)] pub const fn prer (& self) -> & Prer { & self . prer } # [doc = "0x14 - wakeup timer register"] # [inline (always)] pub const fn wutr (& self) -> & Wutr { & self . wutr } # [doc = "0x18 - calibration register"] # [inline (always)] pub const fn calibr (& self) -> & Calibr { & self . calibr } # [doc = "0x1c..0x24 - Alarm %s register"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is the index of register in the array. `n == 0` corresponds to `ALRMAR` register.</div>"] # [inline (always)] pub const fn alrmr (& self , n : usize) -> & Alrmr { & self . alrmr [n] } # [doc = "Iterator for array of:"] # [doc = "0x1c..0x24 - Alarm %s register"] # [inline (always)] pub fn alrmr_iter (& self) -> impl Iterator < Item = & Alrmr > { self . alrmr . iter () } # [doc = "0x1c - Alarm A register"] # [inline (always)] pub const fn alrmar (& self) -> & Alrmr { self . alrmr (0) } # [doc = "0x20 - Alarm B register"] # [inline (always)] pub const fn alrmbr (& self) -> & Alrmr { self . alrmr (1) } # [doc = "0x24 - write protection register"] # [inline (always)] pub const fn wpr (& self) -> & Wpr { & self . wpr } # [doc = "0x28 - sub second register"] # [inline (always)] pub const fn ssr (& self) -> & Ssr { & self . ssr } # [doc = "0x2c - shift control register"] # [inline (always)] pub const fn shiftr (& self) -> & Shiftr { & self . shiftr } # [doc = "0x30 - time stamp time register"] # [inline (always)] pub const fn tstr (& self) -> & Tstr { & self . tstr } # [doc = "0x34 - time stamp date register"] # [inline (always)] pub const fn tsdr (& self) -> & Tsdr { & self . tsdr } # [doc = "0x38 - timestamp sub second register"] # [inline (always)] pub const fn tsssr (& self) -> & Tsssr { & self . tsssr } # [doc = "0x3c - calibration register"] # [inline (always)] pub const fn calr (& self) -> & Calr { & self . calr } # [doc = "0x40 - tamper and alternate function configuration register"] # [inline (always)] pub const fn tafcr (& self) -> & Tafcr { & self . tafcr } # [doc = "0x44..0x4c - Alarm %s sub-second register"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is the index of register in the array. `n == 0` corresponds to `ALRMASSR` register.</div>"] # [inline (always)] pub const fn alrmssr (& self , n : usize) -> & Alrmssr { & self . alrmssr [n] } # [doc = "Iterator for array of:"] # [doc = "0x44..0x4c - Alarm %s sub-second register"] # [inline (always)] pub fn alrmssr_iter (& self) -> impl Iterator < Item = & Alrmssr > { self . alrmssr . iter () } # [doc = "0x44 - Alarm A sub-second register"] # [inline (always)] pub const fn alrmassr (& self) -> & Alrmssr { self . alrmssr (0) } # [doc = "0x48 - Alarm B sub-second register"] # [inline (always)] pub const fn alrmbssr (& self) -> & Alrmssr { self . alrmssr (1) } # [doc = "0x50..0xa0 - backup register"] # [inline (always)] pub const fn bkpr (& self , n : usize) -> & Bkpr { & self . bkpr [n] } # [doc = "Iterator for array of:"] # [doc = "0x50..0xa0 - backup register"] # [inline (always)] pub fn bkpr_iter (& self) -> impl Iterator < Item = & Bkpr > { self . bkpr . iter () } # [doc = "0x50 - backup register"] # [inline (always)] pub const fn bkp0r (& self) -> & Bkpr { self . bkpr (0) } # [doc = "0x54 - backup register"] # [inline (always)] pub const fn bkp1r (& self) -> & Bkpr { self . bkpr (1) } # [doc = "0x58 - backup register"] # [inline (always)] pub const fn bkp2r (& self) -> & Bkpr { self . bkpr (2) } # [doc = "0x5c - backup register"] # [inline (always)] pub const fn bkp3r (& self) -> & Bkpr { self . bkpr (3) } # [doc = "0x60 - backup register"] # [inline (always)] pub const fn bkp4r (& self) -> & Bkpr { self . bkpr (4) } # [doc = "0x64 - backup register"] # [inline (always)] pub const fn bkp5r (& self) -> & Bkpr { self . bkpr (5) } # [doc = "0x68 - backup register"] # [inline (always)] pub const fn bkp6r (& self) -> & Bkpr { self . bkpr (6) } # [doc = "0x6c - backup register"] # [inline (always)] pub const fn bkp7r (& self) -> & Bkpr { self . bkpr (7) } # [doc = "0x70 - backup register"] # [inline (always)] pub const fn bkp8r (& self) -> & Bkpr { self . bkpr (8) } # [doc = "0x74 - backup register"] # [inline (always)] pub const fn bkp9r (& self) -> & Bkpr { self . bkpr (9) } # [doc = "0x78 - backup register"] # [inline (always)] pub const fn bkp10r (& self) -> & Bkpr { self . bkpr (10) } # [doc = "0x7c - backup register"] # [inline (always)] pub const fn bkp11r (& self) -> & Bkpr { self . bkpr (11) } # [doc = "0x80 - backup register"] # [inline (always)] pub const fn bkp12r (& self) -> & Bkpr { self . bkpr (12) } # [doc = "0x84 - backup register"] # [inline (always)] pub const fn bkp13r (& self) -> & Bkpr { self . bkpr (13) } # [doc = "0x88 - backup register"] # [inline (always)] pub const fn bkp14r (& self) -> & Bkpr { self . bkpr (14) } # [doc = "0x8c - backup register"] # [inline (always)] pub const fn bkp15r (& self) -> & Bkpr { self . bkpr (15) } # [doc = "0x90 - backup register"] # [inline (always)] pub const fn bkp16r (& self) -> & Bkpr { self . bkpr (16) } # [doc = "0x94 - backup register"] # [inline (always)] pub const fn bkp17r (& self) -> & Bkpr { self . bkpr (17) } # [doc = "0x98 - backup register"] # [inline (always)] pub const fn bkp18r (& self) -> & Bkpr { self . bkpr (18) } # [doc = "0x9c - backup register"] # [inline (always)] pub const fn bkp19r (& self) -> & Bkpr { self . bkpr (19) } } # [doc = "TR (rw) register accessor: time register\n\nYou can [`read`](crate::Reg::read) this register and get [`tr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tr`] module"] # [doc (alias = "TR")] pub type Tr = crate :: Reg < tr :: TrSpec > ; # [doc = "time register"] pub mod tr ; # [doc = "DR (rw) register accessor: date register\n\nYou can [`read`](crate::Reg::read) this register and get [`dr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr`] module"] # [doc (alias = "DR")] pub type Dr = crate :: Reg < dr :: DrSpec > ; # [doc = "date register"] pub mod dr ; # [doc = "CR (rw) register accessor: control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"] # [doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ; # [doc = "control register"] pub mod cr ; # [doc = "ISR (rw) register accessor: initialization and status register\n\nYou can [`read`](crate::Reg::read) this register and get [`isr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`isr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@isr`] module"] # [doc (alias = "ISR")] pub type Isr = crate :: Reg < isr :: IsrSpec > ; # [doc = "initialization and status register"] pub mod isr ; # [doc = "PRER (rw) register accessor: prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`prer::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`prer::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@prer`] module"] # [doc (alias = "PRER")] pub type Prer = crate :: Reg < prer :: PrerSpec > ; # [doc = "prescaler register"] pub mod prer ; # [doc = "WUTR (rw) register accessor: wakeup timer register\n\nYou can [`read`](crate::Reg::read) this register and get [`wutr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wutr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wutr`] module"] # [doc (alias = "WUTR")] pub type Wutr = crate :: Reg < wutr :: WutrSpec > ; # [doc = "wakeup timer register"] pub mod wutr ; # [doc = "CALIBR (rw) register accessor: calibration register\n\nYou can [`read`](crate::Reg::read) this register and get [`calibr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`calibr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@calibr`] module"] # [doc (alias = "CALIBR")] pub type Calibr = crate :: Reg < calibr :: CalibrSpec > ; # [doc = "calibration register"] pub mod calibr ; # [doc = "ALRMR (rw) register accessor: Alarm %s register\n\nYou can [`read`](crate::Reg::read) this register and get [`alrmr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`alrmr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@alrmr`] module"] # [doc (alias = "ALRMR")] pub type Alrmr = crate :: Reg < alrmr :: AlrmrSpec > ; # [doc = "Alarm %s register"] pub mod alrmr ; # [doc = "WPR (w) register accessor: write protection register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wpr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wpr`] module"] # [doc (alias = "WPR")] pub type Wpr = crate :: Reg < wpr :: WprSpec > ; # [doc = "write protection register"] pub mod wpr ; # [doc = "SSR (r) register accessor: sub second register\n\nYou can [`read`](crate::Reg::read) this register and get [`ssr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ssr`] module"] # [doc (alias = "SSR")] pub type Ssr = crate :: Reg < ssr :: SsrSpec > ; # [doc = "sub second register"] pub mod ssr ; # [doc = "SHIFTR (w) register accessor: shift control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`shiftr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@shiftr`] module"] # [doc (alias = "SHIFTR")] pub type Shiftr = crate :: Reg < shiftr :: ShiftrSpec > ; # [doc = "shift control register"] pub mod shiftr ; pub use Tr as Tstr ; pub use tr as tstr ; pub use Dr as Tsdr ; pub use dr as tsdr ; pub use Ssr as Tsssr ; pub use ssr as tsssr ; # [doc = "CALR (rw) register accessor: calibration register\n\nYou can [`read`](crate::Reg::read) this register and get [`calr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`calr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@calr`] module"] # [doc (alias = "CALR")] pub type Calr = crate :: Reg < calr :: CalrSpec > ; # [doc = "calibration register"] pub mod calr ; # [doc = "TAFCR (rw) register accessor: tamper and alternate function configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`tafcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tafcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tafcr`] module"] # [doc (alias = "TAFCR")] pub type Tafcr = crate :: Reg < tafcr :: TafcrSpec > ; # [doc = "tamper and alternate function configuration register"] pub mod tafcr ; # [doc = "ALRMSSR (rw) register accessor: Alarm %s sub-second register\n\nYou can [`read`](crate::Reg::read) this register and get [`alrmssr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`alrmssr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@alrmssr`] module"] # [doc (alias = "ALRMSSR")] pub type Alrmssr = crate :: Reg < alrmssr :: AlrmssrSpec > ; # [doc = "Alarm %s sub-second register"] pub mod alrmssr ; # [doc = "BKPR (rw) register accessor: backup register\n\nYou can [`read`](crate::Reg::read) this register and get [`bkpr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bkpr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bkpr`] module"] # [doc (alias = "BKPR")] pub type Bkpr = crate :: Reg < bkpr :: BkprSpec > ; # [doc = "backup register"] pub mod bkpr ;