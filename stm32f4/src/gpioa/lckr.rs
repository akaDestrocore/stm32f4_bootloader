# [doc = "Register `LCKR` reader"] pub type R = crate :: R < LckrSpec > ; # [doc = "Register `LCKR` writer"] pub type W = crate :: W < LckrSpec > ; # [doc = "Port x lock pin %s\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Lock { # [doc = "0: Port configuration not locked"] Unlocked = 0 , # [doc = "1: Port configuration locked"] Locked = 1 , } impl From < Lock > for bool { # [inline (always)] fn from (variant : Lock) -> Self { variant as u8 != 0 } } # [doc = "Field `LCK(0-15)` reader - Port x lock pin %s"] pub type LckR = crate :: BitReader < Lock > ; impl LckR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Lock { match self . bits { false => Lock :: Unlocked , true => Lock :: Locked , } } # [doc = "Port configuration not locked"] # [inline (always)] pub fn is_unlocked (& self) -> bool { * self == Lock :: Unlocked } # [doc = "Port configuration locked"] # [inline (always)] pub fn is_locked (& self) -> bool { * self == Lock :: Locked } } # [doc = "Field `LCK(0-15)` writer - Port x lock pin %s"] pub type LckW < 'a , REG > = crate :: BitWriter < 'a , REG , Lock > ; impl < 'a , REG > LckW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Port configuration not locked"] # [inline (always)] pub fn unlocked (self) -> & 'a mut crate :: W < REG > { self . variant (Lock :: Unlocked) } # [doc = "Port configuration locked"] # [inline (always)] pub fn locked (self) -> & 'a mut crate :: W < REG > { self . variant (Lock :: Locked) } } # [doc = "Port x lock bit y (y= 0..15)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum LockKey { # [doc = "0: Port configuration lock key not active"] NotActive = 0 , # [doc = "1: Port configuration lock key active"] Active = 1 , } impl From < LockKey > for bool { # [inline (always)] fn from (variant : LockKey) -> Self { variant as u8 != 0 } } # [doc = "Field `LCKK` reader - Port x lock bit y (y= 0..15)"] pub type LckkR = crate :: BitReader < LockKey > ; impl LckkR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> LockKey { match self . bits { false => LockKey :: NotActive , true => LockKey :: Active , } } # [doc = "Port configuration lock key not active"] # [inline (always)] pub fn is_not_active (& self) -> bool { * self == LockKey :: NotActive } # [doc = "Port configuration lock key active"] # [inline (always)] pub fn is_active (& self) -> bool { * self == LockKey :: Active } } # [doc = "Field `LCKK` writer - Port x lock bit y (y= 0..15)"] pub type LckkW < 'a , REG > = crate :: BitWriter < 'a , REG , LockKey > ; impl < 'a , REG > LckkW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Port configuration lock key not active"] # [inline (always)] pub fn not_active (self) -> & 'a mut crate :: W < REG > { self . variant (LockKey :: NotActive) } # [doc = "Port configuration lock key active"] # [inline (always)] pub fn active (self) -> & 'a mut crate :: W < REG > { self . variant (LockKey :: Active) } } impl R { # [doc = "Port x lock pin (0-15)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `LCK0` field.</div>"] # [inline (always)] pub fn lck (& self , n : u8) -> LckR { # [allow (clippy :: no_effect)] [() ; 16] [n as usize] ; LckR :: new (((self . bits >> n) & 1) != 0) } # [doc = "Iterator for array of:"] # [doc = "Port x lock pin (0-15)"] # [inline (always)] pub fn lck_iter (& self) -> impl Iterator < Item = LckR > + '_ { (0 .. 16) . map (move | n | LckR :: new (((self . bits >> n) & 1) != 0)) } # [doc = "Bit 0 - Port x lock pin 0"] # [inline (always)] pub fn lck0 (& self) -> LckR { LckR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Port x lock pin 1"] # [inline (always)] pub fn lck1 (& self) -> LckR { LckR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Port x lock pin 2"] # [inline (always)] pub fn lck2 (& self) -> LckR { LckR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Port x lock pin 3"] # [inline (always)] pub fn lck3 (& self) -> LckR { LckR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Port x lock pin 4"] # [inline (always)] pub fn lck4 (& self) -> LckR { LckR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Port x lock pin 5"] # [inline (always)] pub fn lck5 (& self) -> LckR { LckR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Port x lock pin 6"] # [inline (always)] pub fn lck6 (& self) -> LckR { LckR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Port x lock pin 7"] # [inline (always)] pub fn lck7 (& self) -> LckR { LckR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Port x lock pin 8"] # [inline (always)] pub fn lck8 (& self) -> LckR { LckR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Port x lock pin 9"] # [inline (always)] pub fn lck9 (& self) -> LckR { LckR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Port x lock pin 10"] # [inline (always)] pub fn lck10 (& self) -> LckR { LckR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Port x lock pin 11"] # [inline (always)] pub fn lck11 (& self) -> LckR { LckR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Port x lock pin 12"] # [inline (always)] pub fn lck12 (& self) -> LckR { LckR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Port x lock pin 13"] # [inline (always)] pub fn lck13 (& self) -> LckR { LckR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Port x lock pin 14"] # [inline (always)] pub fn lck14 (& self) -> LckR { LckR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Port x lock pin 15"] # [inline (always)] pub fn lck15 (& self) -> LckR { LckR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Port x lock bit y (y= 0..15)"] # [inline (always)] pub fn lckk (& self) -> LckkR { LckkR :: new (((self . bits >> 16) & 1) != 0) } } impl W { # [doc = "Port x lock pin (0-15)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `LCK0` field.</div>"] # [inline (always)] pub fn lck (& mut self , n : u8) -> LckW < LckrSpec > { # [allow (clippy :: no_effect)] [() ; 16] [n as usize] ; LckW :: new (self , n) } # [doc = "Bit 0 - Port x lock pin 0"] # [inline (always)] pub fn lck0 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 0) } # [doc = "Bit 1 - Port x lock pin 1"] # [inline (always)] pub fn lck1 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 1) } # [doc = "Bit 2 - Port x lock pin 2"] # [inline (always)] pub fn lck2 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 2) } # [doc = "Bit 3 - Port x lock pin 3"] # [inline (always)] pub fn lck3 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 3) } # [doc = "Bit 4 - Port x lock pin 4"] # [inline (always)] pub fn lck4 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 4) } # [doc = "Bit 5 - Port x lock pin 5"] # [inline (always)] pub fn lck5 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 5) } # [doc = "Bit 6 - Port x lock pin 6"] # [inline (always)] pub fn lck6 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 6) } # [doc = "Bit 7 - Port x lock pin 7"] # [inline (always)] pub fn lck7 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 7) } # [doc = "Bit 8 - Port x lock pin 8"] # [inline (always)] pub fn lck8 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 8) } # [doc = "Bit 9 - Port x lock pin 9"] # [inline (always)] pub fn lck9 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 9) } # [doc = "Bit 10 - Port x lock pin 10"] # [inline (always)] pub fn lck10 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 10) } # [doc = "Bit 11 - Port x lock pin 11"] # [inline (always)] pub fn lck11 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 11) } # [doc = "Bit 12 - Port x lock pin 12"] # [inline (always)] pub fn lck12 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 12) } # [doc = "Bit 13 - Port x lock pin 13"] # [inline (always)] pub fn lck13 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 13) } # [doc = "Bit 14 - Port x lock pin 14"] # [inline (always)] pub fn lck14 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 14) } # [doc = "Bit 15 - Port x lock pin 15"] # [inline (always)] pub fn lck15 (& mut self) -> LckW < LckrSpec > { LckW :: new (self , 15) } # [doc = "Bit 16 - Port x lock bit y (y= 0..15)"] # [inline (always)] pub fn lckk (& mut self) -> LckkW < LckrSpec > { LckkW :: new (self , 16) } } # [doc = "GPIO port configuration lock register\n\nYou can [`read`](crate::Reg::read) this register and get [`lckr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`lckr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct LckrSpec ; impl crate :: RegisterSpec for LckrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`lckr::R`](R) reader structure"] impl crate :: Readable for LckrSpec { } # [doc = "`write(|w| ..)` method takes [`lckr::W`](W) writer structure"] impl crate :: Writable for LckrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets LCKR to value 0"] impl crate :: Resettable for LckrSpec { }