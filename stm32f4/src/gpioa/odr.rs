# [doc = "Register `ODR` reader"] pub type R = crate :: R < OdrSpec > ; # [doc = "Register `ODR` writer"] pub type W = crate :: W < OdrSpec > ; # [doc = "Port output data pin %s\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum OutputData { # [doc = "0: Set output to logic low"] Low = 0 , # [doc = "1: Set output to logic high"] High = 1 , } impl From < OutputData > for bool { # [inline (always)] fn from (variant : OutputData) -> Self { variant as u8 != 0 } } # [doc = "Field `ODR(0-15)` reader - Port output data pin %s"] pub type OdrR = crate :: BitReader < OutputData > ; impl OdrR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> OutputData { match self . bits { false => OutputData :: Low , true => OutputData :: High , } } # [doc = "Set output to logic low"] # [inline (always)] pub fn is_low (& self) -> bool { * self == OutputData :: Low } # [doc = "Set output to logic high"] # [inline (always)] pub fn is_high (& self) -> bool { * self == OutputData :: High } } # [doc = "Field `ODR(0-15)` writer - Port output data pin %s"] pub type OdrW < 'a , REG > = crate :: BitWriter < 'a , REG , OutputData > ; impl < 'a , REG > OdrW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Set output to logic low"] # [inline (always)] pub fn low (self) -> & 'a mut crate :: W < REG > { self . variant (OutputData :: Low) } # [doc = "Set output to logic high"] # [inline (always)] pub fn high (self) -> & 'a mut crate :: W < REG > { self . variant (OutputData :: High) } } impl R { # [doc = "Port output data pin (0-15)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `ODR0` field.</div>"] # [inline (always)] pub fn odr (& self , n : u8) -> OdrR { # [allow (clippy :: no_effect)] [() ; 16] [n as usize] ; OdrR :: new (((self . bits >> n) & 1) != 0) } # [doc = "Iterator for array of:"] # [doc = "Port output data pin (0-15)"] # [inline (always)] pub fn odr_iter (& self) -> impl Iterator < Item = OdrR > + '_ { (0 .. 16) . map (move | n | OdrR :: new (((self . bits >> n) & 1) != 0)) } # [doc = "Bit 0 - Port output data pin 0"] # [inline (always)] pub fn odr0 (& self) -> OdrR { OdrR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Port output data pin 1"] # [inline (always)] pub fn odr1 (& self) -> OdrR { OdrR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Port output data pin 2"] # [inline (always)] pub fn odr2 (& self) -> OdrR { OdrR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Port output data pin 3"] # [inline (always)] pub fn odr3 (& self) -> OdrR { OdrR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Port output data pin 4"] # [inline (always)] pub fn odr4 (& self) -> OdrR { OdrR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Port output data pin 5"] # [inline (always)] pub fn odr5 (& self) -> OdrR { OdrR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Port output data pin 6"] # [inline (always)] pub fn odr6 (& self) -> OdrR { OdrR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Port output data pin 7"] # [inline (always)] pub fn odr7 (& self) -> OdrR { OdrR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Port output data pin 8"] # [inline (always)] pub fn odr8 (& self) -> OdrR { OdrR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Port output data pin 9"] # [inline (always)] pub fn odr9 (& self) -> OdrR { OdrR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Port output data pin 10"] # [inline (always)] pub fn odr10 (& self) -> OdrR { OdrR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Port output data pin 11"] # [inline (always)] pub fn odr11 (& self) -> OdrR { OdrR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Port output data pin 12"] # [inline (always)] pub fn odr12 (& self) -> OdrR { OdrR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Port output data pin 13"] # [inline (always)] pub fn odr13 (& self) -> OdrR { OdrR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Port output data pin 14"] # [inline (always)] pub fn odr14 (& self) -> OdrR { OdrR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Port output data pin 15"] # [inline (always)] pub fn odr15 (& self) -> OdrR { OdrR :: new (((self . bits >> 15) & 1) != 0) } } impl W { # [doc = "Port output data pin (0-15)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `ODR0` field.</div>"] # [inline (always)] pub fn odr (& mut self , n : u8) -> OdrW < OdrSpec > { # [allow (clippy :: no_effect)] [() ; 16] [n as usize] ; OdrW :: new (self , n) } # [doc = "Bit 0 - Port output data pin 0"] # [inline (always)] pub fn odr0 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 0) } # [doc = "Bit 1 - Port output data pin 1"] # [inline (always)] pub fn odr1 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 1) } # [doc = "Bit 2 - Port output data pin 2"] # [inline (always)] pub fn odr2 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 2) } # [doc = "Bit 3 - Port output data pin 3"] # [inline (always)] pub fn odr3 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 3) } # [doc = "Bit 4 - Port output data pin 4"] # [inline (always)] pub fn odr4 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 4) } # [doc = "Bit 5 - Port output data pin 5"] # [inline (always)] pub fn odr5 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 5) } # [doc = "Bit 6 - Port output data pin 6"] # [inline (always)] pub fn odr6 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 6) } # [doc = "Bit 7 - Port output data pin 7"] # [inline (always)] pub fn odr7 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 7) } # [doc = "Bit 8 - Port output data pin 8"] # [inline (always)] pub fn odr8 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 8) } # [doc = "Bit 9 - Port output data pin 9"] # [inline (always)] pub fn odr9 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 9) } # [doc = "Bit 10 - Port output data pin 10"] # [inline (always)] pub fn odr10 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 10) } # [doc = "Bit 11 - Port output data pin 11"] # [inline (always)] pub fn odr11 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 11) } # [doc = "Bit 12 - Port output data pin 12"] # [inline (always)] pub fn odr12 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 12) } # [doc = "Bit 13 - Port output data pin 13"] # [inline (always)] pub fn odr13 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 13) } # [doc = "Bit 14 - Port output data pin 14"] # [inline (always)] pub fn odr14 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 14) } # [doc = "Bit 15 - Port output data pin 15"] # [inline (always)] pub fn odr15 (& mut self) -> OdrW < OdrSpec > { OdrW :: new (self , 15) } } # [doc = "GPIO port output data register\n\nYou can [`read`](crate::Reg::read) this register and get [`odr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`odr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct OdrSpec ; impl crate :: RegisterSpec for OdrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`odr::R`](R) reader structure"] impl crate :: Readable for OdrSpec { } # [doc = "`write(|w| ..)` method takes [`odr::W`](W) writer structure"] impl crate :: Writable for OdrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets ODR to value 0"] impl crate :: Resettable for OdrSpec { }