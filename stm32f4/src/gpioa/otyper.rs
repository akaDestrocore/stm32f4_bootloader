# [doc = "Register `OTYPER` reader"] pub type R = crate :: R < OtyperSpec > ; # [doc = "Register `OTYPER` writer"] pub type W = crate :: W < OtyperSpec > ; # [doc = "Port x configuration pin %s\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum OutputType { # [doc = "0: Output push-pull (reset state)"] PushPull = 0 , # [doc = "1: Output open-drain"] OpenDrain = 1 , } impl From < OutputType > for bool { # [inline (always)] fn from (variant : OutputType) -> Self { variant as u8 != 0 } } # [doc = "Field `OT(0-15)` reader - Port x configuration pin %s"] pub type OtR = crate :: BitReader < OutputType > ; impl OtR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> OutputType { match self . bits { false => OutputType :: PushPull , true => OutputType :: OpenDrain , } } # [doc = "Output push-pull (reset state)"] # [inline (always)] pub fn is_push_pull (& self) -> bool { * self == OutputType :: PushPull } # [doc = "Output open-drain"] # [inline (always)] pub fn is_open_drain (& self) -> bool { * self == OutputType :: OpenDrain } } # [doc = "Field `OT(0-15)` writer - Port x configuration pin %s"] pub type OtW < 'a , REG > = crate :: BitWriter < 'a , REG , OutputType > ; impl < 'a , REG > OtW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Output push-pull (reset state)"] # [inline (always)] pub fn push_pull (self) -> & 'a mut crate :: W < REG > { self . variant (OutputType :: PushPull) } # [doc = "Output open-drain"] # [inline (always)] pub fn open_drain (self) -> & 'a mut crate :: W < REG > { self . variant (OutputType :: OpenDrain) } } impl R { # [doc = "Port x configuration pin (0-15)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `OT0` field.</div>"] # [inline (always)] pub fn ot (& self , n : u8) -> OtR { # [allow (clippy :: no_effect)] [() ; 16] [n as usize] ; OtR :: new (((self . bits >> n) & 1) != 0) } # [doc = "Iterator for array of:"] # [doc = "Port x configuration pin (0-15)"] # [inline (always)] pub fn ot_iter (& self) -> impl Iterator < Item = OtR > + '_ { (0 .. 16) . map (move | n | OtR :: new (((self . bits >> n) & 1) != 0)) } # [doc = "Bit 0 - Port x configuration pin 0"] # [inline (always)] pub fn ot0 (& self) -> OtR { OtR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Port x configuration pin 1"] # [inline (always)] pub fn ot1 (& self) -> OtR { OtR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Port x configuration pin 2"] # [inline (always)] pub fn ot2 (& self) -> OtR { OtR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Port x configuration pin 3"] # [inline (always)] pub fn ot3 (& self) -> OtR { OtR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Port x configuration pin 4"] # [inline (always)] pub fn ot4 (& self) -> OtR { OtR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Port x configuration pin 5"] # [inline (always)] pub fn ot5 (& self) -> OtR { OtR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Port x configuration pin 6"] # [inline (always)] pub fn ot6 (& self) -> OtR { OtR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Port x configuration pin 7"] # [inline (always)] pub fn ot7 (& self) -> OtR { OtR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Port x configuration pin 8"] # [inline (always)] pub fn ot8 (& self) -> OtR { OtR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Port x configuration pin 9"] # [inline (always)] pub fn ot9 (& self) -> OtR { OtR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Port x configuration pin 10"] # [inline (always)] pub fn ot10 (& self) -> OtR { OtR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Port x configuration pin 11"] # [inline (always)] pub fn ot11 (& self) -> OtR { OtR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Port x configuration pin 12"] # [inline (always)] pub fn ot12 (& self) -> OtR { OtR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Port x configuration pin 13"] # [inline (always)] pub fn ot13 (& self) -> OtR { OtR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Port x configuration pin 14"] # [inline (always)] pub fn ot14 (& self) -> OtR { OtR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Port x configuration pin 15"] # [inline (always)] pub fn ot15 (& self) -> OtR { OtR :: new (((self . bits >> 15) & 1) != 0) } } impl W { # [doc = "Port x configuration pin (0-15)"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `OT0` field.</div>"] # [inline (always)] pub fn ot (& mut self , n : u8) -> OtW < OtyperSpec > { # [allow (clippy :: no_effect)] [() ; 16] [n as usize] ; OtW :: new (self , n) } # [doc = "Bit 0 - Port x configuration pin 0"] # [inline (always)] pub fn ot0 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 0) } # [doc = "Bit 1 - Port x configuration pin 1"] # [inline (always)] pub fn ot1 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 1) } # [doc = "Bit 2 - Port x configuration pin 2"] # [inline (always)] pub fn ot2 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 2) } # [doc = "Bit 3 - Port x configuration pin 3"] # [inline (always)] pub fn ot3 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 3) } # [doc = "Bit 4 - Port x configuration pin 4"] # [inline (always)] pub fn ot4 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 4) } # [doc = "Bit 5 - Port x configuration pin 5"] # [inline (always)] pub fn ot5 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 5) } # [doc = "Bit 6 - Port x configuration pin 6"] # [inline (always)] pub fn ot6 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 6) } # [doc = "Bit 7 - Port x configuration pin 7"] # [inline (always)] pub fn ot7 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 7) } # [doc = "Bit 8 - Port x configuration pin 8"] # [inline (always)] pub fn ot8 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 8) } # [doc = "Bit 9 - Port x configuration pin 9"] # [inline (always)] pub fn ot9 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 9) } # [doc = "Bit 10 - Port x configuration pin 10"] # [inline (always)] pub fn ot10 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 10) } # [doc = "Bit 11 - Port x configuration pin 11"] # [inline (always)] pub fn ot11 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 11) } # [doc = "Bit 12 - Port x configuration pin 12"] # [inline (always)] pub fn ot12 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 12) } # [doc = "Bit 13 - Port x configuration pin 13"] # [inline (always)] pub fn ot13 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 13) } # [doc = "Bit 14 - Port x configuration pin 14"] # [inline (always)] pub fn ot14 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 14) } # [doc = "Bit 15 - Port x configuration pin 15"] # [inline (always)] pub fn ot15 (& mut self) -> OtW < OtyperSpec > { OtW :: new (self , 15) } } # [doc = "GPIO port output type register\n\nYou can [`read`](crate::Reg::read) this register and get [`otyper::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`otyper::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct OtyperSpec ; impl crate :: RegisterSpec for OtyperSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`otyper::R`](R) reader structure"] impl crate :: Readable for OtyperSpec { } # [doc = "`write(|w| ..)` method takes [`otyper::W`](W) writer structure"] impl crate :: Writable for OtyperSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets OTYPER to value 0"] impl crate :: Resettable for OtyperSpec { }