# [doc = "Register `HIFCR` writer"] pub type W = crate :: W < HifcrSpec > ; # [doc = "Stream x clear FIFO error interrupt flag (x = 7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Cfeif4 { # [doc = "1: Clear the corresponding CFEIFx flag"] Clear = 1 , } impl From < Cfeif4 > for bool { # [inline (always)] fn from (variant : Cfeif4) -> Self { variant as u8 != 0 } } # [doc = "Field `CFEIF4` writer - Stream x clear FIFO error interrupt flag (x = 7..4)"] pub type Cfeif4W < 'a , REG > = crate :: BitWriter < 'a , REG , Cfeif4 > ; impl < 'a , REG > Cfeif4W < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear the corresponding CFEIFx flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (Cfeif4 :: Clear) } } # [doc = "Stream x clear direct mode error interrupt flag (x = 7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Cdmeif4 { # [doc = "1: Clear the corresponding DMEIFx flag"] Clear = 1 , } impl From < Cdmeif4 > for bool { # [inline (always)] fn from (variant : Cdmeif4) -> Self { variant as u8 != 0 } } # [doc = "Field `CDMEIF4` writer - Stream x clear direct mode error interrupt flag (x = 7..4)"] pub type Cdmeif4W < 'a , REG > = crate :: BitWriter < 'a , REG , Cdmeif4 > ; impl < 'a , REG > Cdmeif4W < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear the corresponding DMEIFx flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (Cdmeif4 :: Clear) } } # [doc = "Stream x clear transfer error interrupt flag (x = 7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Cteif4 { # [doc = "1: Clear the corresponding TEIFx flag"] Clear = 1 , } impl From < Cteif4 > for bool { # [inline (always)] fn from (variant : Cteif4) -> Self { variant as u8 != 0 } } # [doc = "Field `CTEIF4` writer - Stream x clear transfer error interrupt flag (x = 7..4)"] pub type Cteif4W < 'a , REG > = crate :: BitWriter < 'a , REG , Cteif4 > ; impl < 'a , REG > Cteif4W < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear the corresponding TEIFx flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (Cteif4 :: Clear) } } # [doc = "Stream x clear half transfer interrupt flag (x = 7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Chtif4 { # [doc = "1: Clear the corresponding HTIFx flag"] Clear = 1 , } impl From < Chtif4 > for bool { # [inline (always)] fn from (variant : Chtif4) -> Self { variant as u8 != 0 } } # [doc = "Field `CHTIF4` writer - Stream x clear half transfer interrupt flag (x = 7..4)"] pub type Chtif4W < 'a , REG > = crate :: BitWriter < 'a , REG , Chtif4 > ; impl < 'a , REG > Chtif4W < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear the corresponding HTIFx flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (Chtif4 :: Clear) } } # [doc = "Stream x clear transfer complete interrupt flag (x = 7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ctcif4 { # [doc = "1: Clear the corresponding TCIFx flag"] Clear = 1 , } impl From < Ctcif4 > for bool { # [inline (always)] fn from (variant : Ctcif4) -> Self { variant as u8 != 0 } } # [doc = "Field `CTCIF4` writer - Stream x clear transfer complete interrupt flag (x = 7..4)"] pub type Ctcif4W < 'a , REG > = crate :: BitWriter < 'a , REG , Ctcif4 > ; impl < 'a , REG > Ctcif4W < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear the corresponding TCIFx flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (Ctcif4 :: Clear) } } # [doc = "Field `CFEIF5` writer - Stream x clear FIFO error interrupt flag (x = 7..4)"] pub use Cfeif4W as Cfeif5W ; # [doc = "Field `CDMEIF5` writer - Stream x clear direct mode error interrupt flag (x = 7..4)"] pub use Cdmeif4W as Cdmeif5W ; # [doc = "Field `CTEIF5` writer - Stream x clear transfer error interrupt flag (x = 7..4)"] pub use Cteif4W as Cteif5W ; # [doc = "Field `CHTIF5` writer - Stream x clear half transfer interrupt flag (x = 7..4)"] pub use Chtif4W as Chtif5W ; # [doc = "Field `CTCIF5` writer - Stream x clear transfer complete interrupt flag (x = 7..4)"] pub use Ctcif4W as Ctcif5W ; # [doc = "Field `CFEIF6` writer - Stream x clear FIFO error interrupt flag (x = 7..4)"] pub use Cfeif4W as Cfeif6W ; # [doc = "Field `CDMEIF6` writer - Stream x clear direct mode error interrupt flag (x = 7..4)"] pub use Cdmeif4W as Cdmeif6W ; # [doc = "Field `CTEIF6` writer - Stream x clear transfer error interrupt flag (x = 7..4)"] pub use Cteif4W as Cteif6W ; # [doc = "Field `CHTIF6` writer - Stream x clear half transfer interrupt flag (x = 7..4)"] pub use Chtif4W as Chtif6W ; # [doc = "Field `CTCIF6` writer - Stream x clear transfer complete interrupt flag (x = 7..4)"] pub use Ctcif4W as Ctcif6W ; # [doc = "Field `CFEIF7` writer - Stream x clear FIFO error interrupt flag (x = 7..4)"] pub use Cfeif4W as Cfeif7W ; # [doc = "Field `CDMEIF7` writer - Stream x clear direct mode error interrupt flag (x = 7..4)"] pub use Cdmeif4W as Cdmeif7W ; # [doc = "Field `CTEIF7` writer - Stream x clear transfer error interrupt flag (x = 7..4)"] pub use Cteif4W as Cteif7W ; # [doc = "Field `CHTIF7` writer - Stream x clear half transfer interrupt flag (x = 7..4)"] pub use Chtif4W as Chtif7W ; # [doc = "Field `CTCIF7` writer - Stream x clear transfer complete interrupt flag (x = 7..4)"] pub use Ctcif4W as Ctcif7W ; impl W { # [doc = "Bit 0 - Stream x clear FIFO error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cfeif4 (& mut self) -> Cfeif4W < HifcrSpec > { Cfeif4W :: new (self , 0) } # [doc = "Bit 2 - Stream x clear direct mode error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cdmeif4 (& mut self) -> Cdmeif4W < HifcrSpec > { Cdmeif4W :: new (self , 2) } # [doc = "Bit 3 - Stream x clear transfer error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cteif4 (& mut self) -> Cteif4W < HifcrSpec > { Cteif4W :: new (self , 3) } # [doc = "Bit 4 - Stream x clear half transfer interrupt flag (x = 7..4)"] # [inline (always)] pub fn chtif4 (& mut self) -> Chtif4W < HifcrSpec > { Chtif4W :: new (self , 4) } # [doc = "Bit 5 - Stream x clear transfer complete interrupt flag (x = 7..4)"] # [inline (always)] pub fn ctcif4 (& mut self) -> Ctcif4W < HifcrSpec > { Ctcif4W :: new (self , 5) } # [doc = "Bit 6 - Stream x clear FIFO error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cfeif5 (& mut self) -> Cfeif5W < HifcrSpec > { Cfeif5W :: new (self , 6) } # [doc = "Bit 8 - Stream x clear direct mode error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cdmeif5 (& mut self) -> Cdmeif5W < HifcrSpec > { Cdmeif5W :: new (self , 8) } # [doc = "Bit 9 - Stream x clear transfer error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cteif5 (& mut self) -> Cteif5W < HifcrSpec > { Cteif5W :: new (self , 9) } # [doc = "Bit 10 - Stream x clear half transfer interrupt flag (x = 7..4)"] # [inline (always)] pub fn chtif5 (& mut self) -> Chtif5W < HifcrSpec > { Chtif5W :: new (self , 10) } # [doc = "Bit 11 - Stream x clear transfer complete interrupt flag (x = 7..4)"] # [inline (always)] pub fn ctcif5 (& mut self) -> Ctcif5W < HifcrSpec > { Ctcif5W :: new (self , 11) } # [doc = "Bit 16 - Stream x clear FIFO error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cfeif6 (& mut self) -> Cfeif6W < HifcrSpec > { Cfeif6W :: new (self , 16) } # [doc = "Bit 18 - Stream x clear direct mode error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cdmeif6 (& mut self) -> Cdmeif6W < HifcrSpec > { Cdmeif6W :: new (self , 18) } # [doc = "Bit 19 - Stream x clear transfer error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cteif6 (& mut self) -> Cteif6W < HifcrSpec > { Cteif6W :: new (self , 19) } # [doc = "Bit 20 - Stream x clear half transfer interrupt flag (x = 7..4)"] # [inline (always)] pub fn chtif6 (& mut self) -> Chtif6W < HifcrSpec > { Chtif6W :: new (self , 20) } # [doc = "Bit 21 - Stream x clear transfer complete interrupt flag (x = 7..4)"] # [inline (always)] pub fn ctcif6 (& mut self) -> Ctcif6W < HifcrSpec > { Ctcif6W :: new (self , 21) } # [doc = "Bit 22 - Stream x clear FIFO error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cfeif7 (& mut self) -> Cfeif7W < HifcrSpec > { Cfeif7W :: new (self , 22) } # [doc = "Bit 24 - Stream x clear direct mode error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cdmeif7 (& mut self) -> Cdmeif7W < HifcrSpec > { Cdmeif7W :: new (self , 24) } # [doc = "Bit 25 - Stream x clear transfer error interrupt flag (x = 7..4)"] # [inline (always)] pub fn cteif7 (& mut self) -> Cteif7W < HifcrSpec > { Cteif7W :: new (self , 25) } # [doc = "Bit 26 - Stream x clear half transfer interrupt flag (x = 7..4)"] # [inline (always)] pub fn chtif7 (& mut self) -> Chtif7W < HifcrSpec > { Chtif7W :: new (self , 26) } # [doc = "Bit 27 - Stream x clear transfer complete interrupt flag (x = 7..4)"] # [inline (always)] pub fn ctcif7 (& mut self) -> Ctcif7W < HifcrSpec > { Ctcif7W :: new (self , 27) } } # [doc = "high interrupt flag clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`hifcr::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct HifcrSpec ; impl crate :: RegisterSpec for HifcrSpec { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`hifcr::W`](W) writer structure"] impl crate :: Writable for HifcrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets HIFCR to value 0"] impl crate :: Resettable for HifcrSpec { }