# [doc = "Register `HISR` reader"] pub type R = crate :: R < HisrSpec > ; # [doc = "Stream x FIFO error interrupt flag (x=7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Feif4 { # [doc = "0: No FIFO error event on stream x"] NoError = 0 , # [doc = "1: A FIFO error event occurred on stream x"] Error = 1 , } impl From < Feif4 > for bool { # [inline (always)] fn from (variant : Feif4) -> Self { variant as u8 != 0 } } # [doc = "Field `FEIF4` reader - Stream x FIFO error interrupt flag (x=7..4)"] pub type Feif4R = crate :: BitReader < Feif4 > ; impl Feif4R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Feif4 { match self . bits { false => Feif4 :: NoError , true => Feif4 :: Error , } } # [doc = "No FIFO error event on stream x"] # [inline (always)] pub fn is_no_error (& self) -> bool { * self == Feif4 :: NoError } # [doc = "A FIFO error event occurred on stream x"] # [inline (always)] pub fn is_error (& self) -> bool { * self == Feif4 :: Error } } # [doc = "Stream x direct mode error interrupt flag (x=7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Dmeif4 { # [doc = "0: No Direct Mode error on stream x"] NoError = 0 , # [doc = "1: A Direct Mode error occurred on stream x"] Error = 1 , } impl From < Dmeif4 > for bool { # [inline (always)] fn from (variant : Dmeif4) -> Self { variant as u8 != 0 } } # [doc = "Field `DMEIF4` reader - Stream x direct mode error interrupt flag (x=7..4)"] pub type Dmeif4R = crate :: BitReader < Dmeif4 > ; impl Dmeif4R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Dmeif4 { match self . bits { false => Dmeif4 :: NoError , true => Dmeif4 :: Error , } } # [doc = "No Direct Mode error on stream x"] # [inline (always)] pub fn is_no_error (& self) -> bool { * self == Dmeif4 :: NoError } # [doc = "A Direct Mode error occurred on stream x"] # [inline (always)] pub fn is_error (& self) -> bool { * self == Dmeif4 :: Error } } # [doc = "Stream x transfer error interrupt flag (x=7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Teif4 { # [doc = "0: No transfer error on stream x"] NoError = 0 , # [doc = "1: A transfer error occurred on stream x"] Error = 1 , } impl From < Teif4 > for bool { # [inline (always)] fn from (variant : Teif4) -> Self { variant as u8 != 0 } } # [doc = "Field `TEIF4` reader - Stream x transfer error interrupt flag (x=7..4)"] pub type Teif4R = crate :: BitReader < Teif4 > ; impl Teif4R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Teif4 { match self . bits { false => Teif4 :: NoError , true => Teif4 :: Error , } } # [doc = "No transfer error on stream x"] # [inline (always)] pub fn is_no_error (& self) -> bool { * self == Teif4 :: NoError } # [doc = "A transfer error occurred on stream x"] # [inline (always)] pub fn is_error (& self) -> bool { * self == Teif4 :: Error } } # [doc = "Stream x half transfer interrupt flag (x=7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Htif4 { # [doc = "0: No half transfer event on stream x"] NotHalf = 0 , # [doc = "1: A half transfer event occurred on stream x"] Half = 1 , } impl From < Htif4 > for bool { # [inline (always)] fn from (variant : Htif4) -> Self { variant as u8 != 0 } } # [doc = "Field `HTIF4` reader - Stream x half transfer interrupt flag (x=7..4)"] pub type Htif4R = crate :: BitReader < Htif4 > ; impl Htif4R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Htif4 { match self . bits { false => Htif4 :: NotHalf , true => Htif4 :: Half , } } # [doc = "No half transfer event on stream x"] # [inline (always)] pub fn is_not_half (& self) -> bool { * self == Htif4 :: NotHalf } # [doc = "A half transfer event occurred on stream x"] # [inline (always)] pub fn is_half (& self) -> bool { * self == Htif4 :: Half } } # [doc = "Stream x transfer complete interrupt flag (x=7..4)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tcif4 { # [doc = "0: No transfer complete event on stream x"] NotComplete = 0 , # [doc = "1: A transfer complete event occurred on stream x"] Complete = 1 , } impl From < Tcif4 > for bool { # [inline (always)] fn from (variant : Tcif4) -> Self { variant as u8 != 0 } } # [doc = "Field `TCIF4` reader - Stream x transfer complete interrupt flag (x=7..4)"] pub type Tcif4R = crate :: BitReader < Tcif4 > ; impl Tcif4R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Tcif4 { match self . bits { false => Tcif4 :: NotComplete , true => Tcif4 :: Complete , } } # [doc = "No transfer complete event on stream x"] # [inline (always)] pub fn is_not_complete (& self) -> bool { * self == Tcif4 :: NotComplete } # [doc = "A transfer complete event occurred on stream x"] # [inline (always)] pub fn is_complete (& self) -> bool { * self == Tcif4 :: Complete } } # [doc = "Field `FEIF5` reader - Stream x FIFO error interrupt flag (x=7..4)"] pub use Feif4R as Feif5R ; # [doc = "Field `DMEIF5` reader - Stream x direct mode error interrupt flag (x=7..4)"] pub use Dmeif4R as Dmeif5R ; # [doc = "Field `TEIF5` reader - Stream x transfer error interrupt flag (x=7..4)"] pub use Teif4R as Teif5R ; # [doc = "Field `HTIF5` reader - Stream x half transfer interrupt flag (x=7..4)"] pub use Htif4R as Htif5R ; # [doc = "Field `TCIF5` reader - Stream x transfer complete interrupt flag (x=7..4)"] pub use Tcif4R as Tcif5R ; # [doc = "Field `FEIF6` reader - Stream x FIFO error interrupt flag (x=7..4)"] pub use Feif4R as Feif6R ; # [doc = "Field `DMEIF6` reader - Stream x direct mode error interrupt flag (x=7..4)"] pub use Dmeif4R as Dmeif6R ; # [doc = "Field `TEIF6` reader - Stream x transfer error interrupt flag (x=7..4)"] pub use Teif4R as Teif6R ; # [doc = "Field `HTIF6` reader - Stream x half transfer interrupt flag (x=7..4)"] pub use Htif4R as Htif6R ; # [doc = "Field `TCIF6` reader - Stream x transfer complete interrupt flag (x=7..4)"] pub use Tcif4R as Tcif6R ; # [doc = "Field `FEIF7` reader - Stream x FIFO error interrupt flag (x=7..4)"] pub use Feif4R as Feif7R ; # [doc = "Field `DMEIF7` reader - Stream x direct mode error interrupt flag (x=7..4)"] pub use Dmeif4R as Dmeif7R ; # [doc = "Field `TEIF7` reader - Stream x transfer error interrupt flag (x=7..4)"] pub use Teif4R as Teif7R ; # [doc = "Field `HTIF7` reader - Stream x half transfer interrupt flag (x=7..4)"] pub use Htif4R as Htif7R ; # [doc = "Field `TCIF7` reader - Stream x transfer complete interrupt flag (x=7..4)"] pub use Tcif4R as Tcif7R ; impl R { # [doc = "Bit 0 - Stream x FIFO error interrupt flag (x=7..4)"] # [inline (always)] pub fn feif4 (& self) -> Feif4R { Feif4R :: new ((self . bits & 1) != 0) } # [doc = "Bit 2 - Stream x direct mode error interrupt flag (x=7..4)"] # [inline (always)] pub fn dmeif4 (& self) -> Dmeif4R { Dmeif4R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Stream x transfer error interrupt flag (x=7..4)"] # [inline (always)] pub fn teif4 (& self) -> Teif4R { Teif4R :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Stream x half transfer interrupt flag (x=7..4)"] # [inline (always)] pub fn htif4 (& self) -> Htif4R { Htif4R :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Stream x transfer complete interrupt flag (x=7..4)"] # [inline (always)] pub fn tcif4 (& self) -> Tcif4R { Tcif4R :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Stream x FIFO error interrupt flag (x=7..4)"] # [inline (always)] pub fn feif5 (& self) -> Feif5R { Feif5R :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 8 - Stream x direct mode error interrupt flag (x=7..4)"] # [inline (always)] pub fn dmeif5 (& self) -> Dmeif5R { Dmeif5R :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Stream x transfer error interrupt flag (x=7..4)"] # [inline (always)] pub fn teif5 (& self) -> Teif5R { Teif5R :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Stream x half transfer interrupt flag (x=7..4)"] # [inline (always)] pub fn htif5 (& self) -> Htif5R { Htif5R :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Stream x transfer complete interrupt flag (x=7..4)"] # [inline (always)] pub fn tcif5 (& self) -> Tcif5R { Tcif5R :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 16 - Stream x FIFO error interrupt flag (x=7..4)"] # [inline (always)] pub fn feif6 (& self) -> Feif6R { Feif6R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 18 - Stream x direct mode error interrupt flag (x=7..4)"] # [inline (always)] pub fn dmeif6 (& self) -> Dmeif6R { Dmeif6R :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - Stream x transfer error interrupt flag (x=7..4)"] # [inline (always)] pub fn teif6 (& self) -> Teif6R { Teif6R :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - Stream x half transfer interrupt flag (x=7..4)"] # [inline (always)] pub fn htif6 (& self) -> Htif6R { Htif6R :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - Stream x transfer complete interrupt flag (x=7..4)"] # [inline (always)] pub fn tcif6 (& self) -> Tcif6R { Tcif6R :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - Stream x FIFO error interrupt flag (x=7..4)"] # [inline (always)] pub fn feif7 (& self) -> Feif7R { Feif7R :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 24 - Stream x direct mode error interrupt flag (x=7..4)"] # [inline (always)] pub fn dmeif7 (& self) -> Dmeif7R { Dmeif7R :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - Stream x transfer error interrupt flag (x=7..4)"] # [inline (always)] pub fn teif7 (& self) -> Teif7R { Teif7R :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - Stream x half transfer interrupt flag (x=7..4)"] # [inline (always)] pub fn htif7 (& self) -> Htif7R { Htif7R :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 27 - Stream x transfer complete interrupt flag (x=7..4)"] # [inline (always)] pub fn tcif7 (& self) -> Tcif7R { Tcif7R :: new (((self . bits >> 27) & 1) != 0) } } # [doc = "high interrupt status register\n\nYou can [`read`](crate::Reg::read) this register and get [`hisr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct HisrSpec ; impl crate :: RegisterSpec for HisrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`hisr::R`](R) reader structure"] impl crate :: Readable for HisrSpec { } # [doc = "`reset()` method sets HISR to value 0"] impl crate :: Resettable for HisrSpec { }