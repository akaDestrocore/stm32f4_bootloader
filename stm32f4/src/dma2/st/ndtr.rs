# [doc = "Register `NDTR` reader"] pub type R = crate :: R < NdtrSpec > ; # [doc = "Register `NDTR` writer"] pub type W = crate :: W < NdtrSpec > ; # [doc = "Field `NDT` reader - Number of data items to transfer"] pub type NdtR = crate :: FieldReader < u16 > ; # [doc = "Field `NDT` writer - Number of data items to transfer"] pub type NdtW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 , crate :: Safe > ; impl R { # [doc = "Bits 0:15 - Number of data items to transfer"] # [inline (always)] pub fn ndt (& self) -> NdtR { NdtR :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15 - Number of data items to transfer"] # [inline (always)] pub fn ndt (& mut self) -> NdtW < NdtrSpec > { NdtW :: new (self , 0) } } # [doc = "stream x number of data register\n\nYou can [`read`](crate::Reg::read) this register and get [`ndtr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ndtr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct NdtrSpec ; impl crate :: RegisterSpec for NdtrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ndtr::R`](R) reader structure"] impl crate :: Readable for NdtrSpec { } # [doc = "`write(|w| ..)` method takes [`ndtr::W`](W) writer structure"] impl crate :: Writable for NdtrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets NDTR to value 0"] impl crate :: Resettable for NdtrSpec { }