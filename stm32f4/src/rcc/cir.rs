# [doc = "Register `CIR` reader"] pub type R = crate :: R < CirSpec > ; # [doc = "Register `CIR` writer"] pub type W = crate :: W < CirSpec > ; # [doc = "LSI ready interrupt flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Lsirdyfr { # [doc = "0: No clock ready interrupt"] NotInterrupted = 0 , # [doc = "1: Clock ready interrupt"] Interrupted = 1 , } impl From < Lsirdyfr > for bool { # [inline (always)] fn from (variant : Lsirdyfr) -> Self { variant as u8 != 0 } } # [doc = "Field `LSIRDYF` reader - LSI ready interrupt flag"] pub type LsirdyfR = crate :: BitReader < Lsirdyfr > ; impl LsirdyfR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Lsirdyfr { match self . bits { false => Lsirdyfr :: NotInterrupted , true => Lsirdyfr :: Interrupted , } } # [doc = "No clock ready interrupt"] # [inline (always)] pub fn is_not_interrupted (& self) -> bool { * self == Lsirdyfr :: NotInterrupted } # [doc = "Clock ready interrupt"] # [inline (always)] pub fn is_interrupted (& self) -> bool { * self == Lsirdyfr :: Interrupted } } # [doc = "Field `LSERDYF` reader - LSE ready interrupt flag"] pub use LsirdyfR as LserdyfR ; # [doc = "Field `HSIRDYF` reader - HSI ready interrupt flag"] pub use LsirdyfR as HsirdyfR ; # [doc = "Field `HSERDYF` reader - HSE ready interrupt flag"] pub use LsirdyfR as HserdyfR ; # [doc = "Field `PLLRDYF` reader - Main PLL (PLL) ready interrupt flag"] pub use LsirdyfR as PllrdyfR ; # [doc = "Field `PLLI2SRDYF` reader - PLLI2S ready interrupt flag"] pub use LsirdyfR as Plli2srdyfR ; # [doc = "Clock security system interrupt flag\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Cssfr { # [doc = "0: No clock security interrupt caused by HSE clock failure"] NotInterrupted = 0 , # [doc = "1: Clock security interrupt caused by HSE clock failure"] Interrupted = 1 , } impl From < Cssfr > for bool { # [inline (always)] fn from (variant : Cssfr) -> Self { variant as u8 != 0 } } # [doc = "Field `CSSF` reader - Clock security system interrupt flag"] pub type CssfR = crate :: BitReader < Cssfr > ; impl CssfR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Cssfr { match self . bits { false => Cssfr :: NotInterrupted , true => Cssfr :: Interrupted , } } # [doc = "No clock security interrupt caused by HSE clock failure"] # [inline (always)] pub fn is_not_interrupted (& self) -> bool { * self == Cssfr :: NotInterrupted } # [doc = "Clock security interrupt caused by HSE clock failure"] # [inline (always)] pub fn is_interrupted (& self) -> bool { * self == Cssfr :: Interrupted } } # [doc = "LSI ready interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Lsirdyie { # [doc = "0: Interrupt disabled"] Disabled = 0 , # [doc = "1: Interrupt enabled"] Enabled = 1 , } impl From < Lsirdyie > for bool { # [inline (always)] fn from (variant : Lsirdyie) -> Self { variant as u8 != 0 } } # [doc = "Field `LSIRDYIE` reader - LSI ready interrupt enable"] pub type LsirdyieR = crate :: BitReader < Lsirdyie > ; impl LsirdyieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Lsirdyie { match self . bits { false => Lsirdyie :: Disabled , true => Lsirdyie :: Enabled , } } # [doc = "Interrupt disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Lsirdyie :: Disabled } # [doc = "Interrupt enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Lsirdyie :: Enabled } } # [doc = "Field `LSIRDYIE` writer - LSI ready interrupt enable"] pub type LsirdyieW < 'a , REG > = crate :: BitWriter < 'a , REG , Lsirdyie > ; impl < 'a , REG > LsirdyieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Interrupt disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Lsirdyie :: Disabled) } # [doc = "Interrupt enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Lsirdyie :: Enabled) } } # [doc = "Field `LSERDYIE` reader - LSE ready interrupt enable"] pub use LsirdyieR as LserdyieR ; # [doc = "Field `LSERDYIE` writer - LSE ready interrupt enable"] pub use LsirdyieW as LserdyieW ; # [doc = "Field `HSIRDYIE` reader - HSI ready interrupt enable"] pub use LsirdyieR as HsirdyieR ; # [doc = "Field `HSIRDYIE` writer - HSI ready interrupt enable"] pub use LsirdyieW as HsirdyieW ; # [doc = "Field `HSERDYIE` reader - HSE ready interrupt enable"] pub use LsirdyieR as HserdyieR ; # [doc = "Field `HSERDYIE` writer - HSE ready interrupt enable"] pub use LsirdyieW as HserdyieW ; # [doc = "Field `PLLRDYIE` reader - Main PLL (PLL) ready interrupt enable"] pub use LsirdyieR as PllrdyieR ; # [doc = "Field `PLLRDYIE` writer - Main PLL (PLL) ready interrupt enable"] pub use LsirdyieW as PllrdyieW ; # [doc = "Field `PLLI2SRDYIE` reader - PLLI2S ready interrupt enable"] pub use LsirdyieR as Plli2srdyieR ; # [doc = "Field `PLLI2SRDYIE` writer - PLLI2S ready interrupt enable"] pub use LsirdyieW as Plli2srdyieW ; # [doc = "LSI ready interrupt clear\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Lsirdycw { # [doc = "1: Clear interrupt flag"] Clear = 1 , } impl From < Lsirdycw > for bool { # [inline (always)] fn from (variant : Lsirdycw) -> Self { variant as u8 != 0 } } # [doc = "Field `LSIRDYC` writer - LSI ready interrupt clear"] pub type LsirdycW < 'a , REG > = crate :: BitWriter < 'a , REG , Lsirdycw > ; impl < 'a , REG > LsirdycW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear interrupt flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (Lsirdycw :: Clear) } } # [doc = "Field `LSERDYC` writer - LSE ready interrupt clear"] pub use LsirdycW as LserdycW ; # [doc = "Field `HSIRDYC` writer - HSI ready interrupt clear"] pub use LsirdycW as HsirdycW ; # [doc = "Field `HSERDYC` writer - HSE ready interrupt clear"] pub use LsirdycW as HserdycW ; # [doc = "Field `PLLRDYC` writer - Main PLL(PLL) ready interrupt clear"] pub use LsirdycW as PllrdycW ; # [doc = "Field `PLLI2SRDYC` writer - PLLI2S ready interrupt clear"] pub use LsirdycW as Plli2srdycW ; # [doc = "Clock security system interrupt clear\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Csscw { # [doc = "1: Clear CSSF flag"] Clear = 1 , } impl From < Csscw > for bool { # [inline (always)] fn from (variant : Csscw) -> Self { variant as u8 != 0 } } # [doc = "Field `CSSC` writer - Clock security system interrupt clear"] pub type CsscW < 'a , REG > = crate :: BitWriter < 'a , REG , Csscw > ; impl < 'a , REG > CsscW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear CSSF flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (Csscw :: Clear) } } impl R { # [doc = "Bit 0 - LSI ready interrupt flag"] # [inline (always)] pub fn lsirdyf (& self) -> LsirdyfR { LsirdyfR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - LSE ready interrupt flag"] # [inline (always)] pub fn lserdyf (& self) -> LserdyfR { LserdyfR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - HSI ready interrupt flag"] # [inline (always)] pub fn hsirdyf (& self) -> HsirdyfR { HsirdyfR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - HSE ready interrupt flag"] # [inline (always)] pub fn hserdyf (& self) -> HserdyfR { HserdyfR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Main PLL (PLL) ready interrupt flag"] # [inline (always)] pub fn pllrdyf (& self) -> PllrdyfR { PllrdyfR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - PLLI2S ready interrupt flag"] # [inline (always)] pub fn plli2srdyf (& self) -> Plli2srdyfR { Plli2srdyfR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 7 - Clock security system interrupt flag"] # [inline (always)] pub fn cssf (& self) -> CssfR { CssfR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - LSI ready interrupt enable"] # [inline (always)] pub fn lsirdyie (& self) -> LsirdyieR { LsirdyieR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - LSE ready interrupt enable"] # [inline (always)] pub fn lserdyie (& self) -> LserdyieR { LserdyieR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - HSI ready interrupt enable"] # [inline (always)] pub fn hsirdyie (& self) -> HsirdyieR { HsirdyieR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - HSE ready interrupt enable"] # [inline (always)] pub fn hserdyie (& self) -> HserdyieR { HserdyieR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Main PLL (PLL) ready interrupt enable"] # [inline (always)] pub fn pllrdyie (& self) -> PllrdyieR { PllrdyieR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - PLLI2S ready interrupt enable"] # [inline (always)] pub fn plli2srdyie (& self) -> Plli2srdyieR { Plli2srdyieR :: new (((self . bits >> 13) & 1) != 0) } } impl W { # [doc = "Bit 8 - LSI ready interrupt enable"] # [inline (always)] pub fn lsirdyie (& mut self) -> LsirdyieW < CirSpec > { LsirdyieW :: new (self , 8) } # [doc = "Bit 9 - LSE ready interrupt enable"] # [inline (always)] pub fn lserdyie (& mut self) -> LserdyieW < CirSpec > { LserdyieW :: new (self , 9) } # [doc = "Bit 10 - HSI ready interrupt enable"] # [inline (always)] pub fn hsirdyie (& mut self) -> HsirdyieW < CirSpec > { HsirdyieW :: new (self , 10) } # [doc = "Bit 11 - HSE ready interrupt enable"] # [inline (always)] pub fn hserdyie (& mut self) -> HserdyieW < CirSpec > { HserdyieW :: new (self , 11) } # [doc = "Bit 12 - Main PLL (PLL) ready interrupt enable"] # [inline (always)] pub fn pllrdyie (& mut self) -> PllrdyieW < CirSpec > { PllrdyieW :: new (self , 12) } # [doc = "Bit 13 - PLLI2S ready interrupt enable"] # [inline (always)] pub fn plli2srdyie (& mut self) -> Plli2srdyieW < CirSpec > { Plli2srdyieW :: new (self , 13) } # [doc = "Bit 16 - LSI ready interrupt clear"] # [inline (always)] pub fn lsirdyc (& mut self) -> LsirdycW < CirSpec > { LsirdycW :: new (self , 16) } # [doc = "Bit 17 - LSE ready interrupt clear"] # [inline (always)] pub fn lserdyc (& mut self) -> LserdycW < CirSpec > { LserdycW :: new (self , 17) } # [doc = "Bit 18 - HSI ready interrupt clear"] # [inline (always)] pub fn hsirdyc (& mut self) -> HsirdycW < CirSpec > { HsirdycW :: new (self , 18) } # [doc = "Bit 19 - HSE ready interrupt clear"] # [inline (always)] pub fn hserdyc (& mut self) -> HserdycW < CirSpec > { HserdycW :: new (self , 19) } # [doc = "Bit 20 - Main PLL(PLL) ready interrupt clear"] # [inline (always)] pub fn pllrdyc (& mut self) -> PllrdycW < CirSpec > { PllrdycW :: new (self , 20) } # [doc = "Bit 21 - PLLI2S ready interrupt clear"] # [inline (always)] pub fn plli2srdyc (& mut self) -> Plli2srdycW < CirSpec > { Plli2srdycW :: new (self , 21) } # [doc = "Bit 23 - Clock security system interrupt clear"] # [inline (always)] pub fn cssc (& mut self) -> CsscW < CirSpec > { CsscW :: new (self , 23) } } # [doc = "clock interrupt register\n\nYou can [`read`](crate::Reg::read) this register and get [`cir::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cir::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CirSpec ; impl crate :: RegisterSpec for CirSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`cir::R`](R) reader structure"] impl crate :: Readable for CirSpec { } # [doc = "`write(|w| ..)` method takes [`cir::W`](W) writer structure"] impl crate :: Writable for CirSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CIR to value 0"] impl crate :: Resettable for CirSpec { }