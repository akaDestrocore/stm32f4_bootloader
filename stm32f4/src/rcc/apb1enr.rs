# [doc = "Register `APB1ENR` reader"] pub type R = crate :: R < Apb1enrSpec > ; # [doc = "Register `APB1ENR` writer"] pub type W = crate :: W < Apb1enrSpec > ; # [doc = "TIM2 clock enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tim2en { # [doc = "0: The selected clock is disabled"] Disabled = 0 , # [doc = "1: The selected clock is enabled"] Enabled = 1 , } impl From < Tim2en > for bool { # [inline (always)] fn from (variant : Tim2en) -> Self { variant as u8 != 0 } } # [doc = "Field `TIM2EN` reader - TIM2 clock enable"] pub type Tim2enR = crate :: BitReader < Tim2en > ; impl Tim2enR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Tim2en { match self . bits { false => Tim2en :: Disabled , true => Tim2en :: Enabled , } } # [doc = "The selected clock is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Tim2en :: Disabled } # [doc = "The selected clock is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Tim2en :: Enabled } } # [doc = "Field `TIM2EN` writer - TIM2 clock enable"] pub type Tim2enW < 'a , REG > = crate :: BitWriter < 'a , REG , Tim2en > ; impl < 'a , REG > Tim2enW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "The selected clock is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Tim2en :: Disabled) } # [doc = "The selected clock is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Tim2en :: Enabled) } } # [doc = "Field `TIM3EN` reader - TIM3 clock enable"] pub use Tim2enR as Tim3enR ; # [doc = "Field `TIM3EN` writer - TIM3 clock enable"] pub use Tim2enW as Tim3enW ; # [doc = "Field `TIM4EN` reader - TIM4 clock enable"] pub use Tim2enR as Tim4enR ; # [doc = "Field `TIM4EN` writer - TIM4 clock enable"] pub use Tim2enW as Tim4enW ; # [doc = "Field `TIM5EN` reader - TIM5 clock enable"] pub use Tim2enR as Tim5enR ; # [doc = "Field `TIM5EN` writer - TIM5 clock enable"] pub use Tim2enW as Tim5enW ; # [doc = "Field `TIM6EN` reader - TIM6 clock enable"] pub use Tim2enR as Tim6enR ; # [doc = "Field `TIM6EN` writer - TIM6 clock enable"] pub use Tim2enW as Tim6enW ; # [doc = "Field `TIM7EN` reader - TIM7 clock enable"] pub use Tim2enR as Tim7enR ; # [doc = "Field `TIM7EN` writer - TIM7 clock enable"] pub use Tim2enW as Tim7enW ; # [doc = "Field `TIM12EN` reader - TIM12 clock enable"] pub use Tim2enR as Tim12enR ; # [doc = "Field `TIM12EN` writer - TIM12 clock enable"] pub use Tim2enW as Tim12enW ; # [doc = "Field `TIM13EN` reader - TIM13 clock enable"] pub use Tim2enR as Tim13enR ; # [doc = "Field `TIM13EN` writer - TIM13 clock enable"] pub use Tim2enW as Tim13enW ; # [doc = "Field `TIM14EN` reader - TIM14 clock enable"] pub use Tim2enR as Tim14enR ; # [doc = "Field `TIM14EN` writer - TIM14 clock enable"] pub use Tim2enW as Tim14enW ; # [doc = "Field `WWDGEN` reader - Window watchdog clock enable"] pub use Tim2enR as WwdgenR ; # [doc = "Field `WWDGEN` writer - Window watchdog clock enable"] pub use Tim2enW as WwdgenW ; # [doc = "Field `SPI2EN` reader - SPI2 clock enable"] pub use Tim2enR as Spi2enR ; # [doc = "Field `SPI2EN` writer - SPI2 clock enable"] pub use Tim2enW as Spi2enW ; # [doc = "Field `SPI3EN` reader - SPI3 clock enable"] pub use Tim2enR as Spi3enR ; # [doc = "Field `SPI3EN` writer - SPI3 clock enable"] pub use Tim2enW as Spi3enW ; # [doc = "Field `USART2EN` reader - USART 2 clock enable"] pub use Tim2enR as Usart2enR ; # [doc = "Field `USART2EN` writer - USART 2 clock enable"] pub use Tim2enW as Usart2enW ; # [doc = "Field `USART3EN` reader - USART3 clock enable"] pub use Tim2enR as Usart3enR ; # [doc = "Field `USART3EN` writer - USART3 clock enable"] pub use Tim2enW as Usart3enW ; # [doc = "Field `UART4EN` reader - UART4 clock enable"] pub use Tim2enR as Uart4enR ; # [doc = "Field `UART4EN` writer - UART4 clock enable"] pub use Tim2enW as Uart4enW ; # [doc = "Field `UART5EN` reader - UART5 clock enable"] pub use Tim2enR as Uart5enR ; # [doc = "Field `UART5EN` writer - UART5 clock enable"] pub use Tim2enW as Uart5enW ; # [doc = "Field `I2C1EN` reader - I2C1 clock enable"] pub use Tim2enR as I2c1enR ; # [doc = "Field `I2C1EN` writer - I2C1 clock enable"] pub use Tim2enW as I2c1enW ; # [doc = "Field `I2C2EN` reader - I2C2 clock enable"] pub use Tim2enR as I2c2enR ; # [doc = "Field `I2C2EN` writer - I2C2 clock enable"] pub use Tim2enW as I2c2enW ; # [doc = "Field `I2C3EN` reader - I2C3 clock enable"] pub use Tim2enR as I2c3enR ; # [doc = "Field `I2C3EN` writer - I2C3 clock enable"] pub use Tim2enW as I2c3enW ; # [doc = "Field `CAN1EN` reader - CAN 1 clock enable"] pub use Tim2enR as Can1enR ; # [doc = "Field `CAN1EN` writer - CAN 1 clock enable"] pub use Tim2enW as Can1enW ; # [doc = "Field `CAN2EN` reader - CAN 2 clock enable"] pub use Tim2enR as Can2enR ; # [doc = "Field `CAN2EN` writer - CAN 2 clock enable"] pub use Tim2enW as Can2enW ; # [doc = "Field `PWREN` reader - Power interface clock enable"] pub use Tim2enR as PwrenR ; # [doc = "Field `PWREN` writer - Power interface clock enable"] pub use Tim2enW as PwrenW ; # [doc = "Field `DACEN` reader - DAC interface clock enable"] pub use Tim2enR as DacenR ; # [doc = "Field `DACEN` writer - DAC interface clock enable"] pub use Tim2enW as DacenW ; impl R { # [doc = "Bit 0 - TIM2 clock enable"] # [inline (always)] pub fn tim2en (& self) -> Tim2enR { Tim2enR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - TIM3 clock enable"] # [inline (always)] pub fn tim3en (& self) -> Tim3enR { Tim3enR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - TIM4 clock enable"] # [inline (always)] pub fn tim4en (& self) -> Tim4enR { Tim4enR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - TIM5 clock enable"] # [inline (always)] pub fn tim5en (& self) -> Tim5enR { Tim5enR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - TIM6 clock enable"] # [inline (always)] pub fn tim6en (& self) -> Tim6enR { Tim6enR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - TIM7 clock enable"] # [inline (always)] pub fn tim7en (& self) -> Tim7enR { Tim7enR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - TIM12 clock enable"] # [inline (always)] pub fn tim12en (& self) -> Tim12enR { Tim12enR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - TIM13 clock enable"] # [inline (always)] pub fn tim13en (& self) -> Tim13enR { Tim13enR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - TIM14 clock enable"] # [inline (always)] pub fn tim14en (& self) -> Tim14enR { Tim14enR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 11 - Window watchdog clock enable"] # [inline (always)] pub fn wwdgen (& self) -> WwdgenR { WwdgenR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 14 - SPI2 clock enable"] # [inline (always)] pub fn spi2en (& self) -> Spi2enR { Spi2enR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - SPI3 clock enable"] # [inline (always)] pub fn spi3en (& self) -> Spi3enR { Spi3enR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 17 - USART 2 clock enable"] # [inline (always)] pub fn usart2en (& self) -> Usart2enR { Usart2enR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - USART3 clock enable"] # [inline (always)] pub fn usart3en (& self) -> Usart3enR { Usart3enR :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - UART4 clock enable"] # [inline (always)] pub fn uart4en (& self) -> Uart4enR { Uart4enR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - UART5 clock enable"] # [inline (always)] pub fn uart5en (& self) -> Uart5enR { Uart5enR :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - I2C1 clock enable"] # [inline (always)] pub fn i2c1en (& self) -> I2c1enR { I2c1enR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - I2C2 clock enable"] # [inline (always)] pub fn i2c2en (& self) -> I2c2enR { I2c2enR :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - I2C3 clock enable"] # [inline (always)] pub fn i2c3en (& self) -> I2c3enR { I2c3enR :: new (((self . bits >> 23) & 1) != 0) } # [doc = "Bit 25 - CAN 1 clock enable"] # [inline (always)] pub fn can1en (& self) -> Can1enR { Can1enR :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - CAN 2 clock enable"] # [inline (always)] pub fn can2en (& self) -> Can2enR { Can2enR :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 28 - Power interface clock enable"] # [inline (always)] pub fn pwren (& self) -> PwrenR { PwrenR :: new (((self . bits >> 28) & 1) != 0) } # [doc = "Bit 29 - DAC interface clock enable"] # [inline (always)] pub fn dacen (& self) -> DacenR { DacenR :: new (((self . bits >> 29) & 1) != 0) } } impl W { # [doc = "Bit 0 - TIM2 clock enable"] # [inline (always)] pub fn tim2en (& mut self) -> Tim2enW < Apb1enrSpec > { Tim2enW :: new (self , 0) } # [doc = "Bit 1 - TIM3 clock enable"] # [inline (always)] pub fn tim3en (& mut self) -> Tim3enW < Apb1enrSpec > { Tim3enW :: new (self , 1) } # [doc = "Bit 2 - TIM4 clock enable"] # [inline (always)] pub fn tim4en (& mut self) -> Tim4enW < Apb1enrSpec > { Tim4enW :: new (self , 2) } # [doc = "Bit 3 - TIM5 clock enable"] # [inline (always)] pub fn tim5en (& mut self) -> Tim5enW < Apb1enrSpec > { Tim5enW :: new (self , 3) } # [doc = "Bit 4 - TIM6 clock enable"] # [inline (always)] pub fn tim6en (& mut self) -> Tim6enW < Apb1enrSpec > { Tim6enW :: new (self , 4) } # [doc = "Bit 5 - TIM7 clock enable"] # [inline (always)] pub fn tim7en (& mut self) -> Tim7enW < Apb1enrSpec > { Tim7enW :: new (self , 5) } # [doc = "Bit 6 - TIM12 clock enable"] # [inline (always)] pub fn tim12en (& mut self) -> Tim12enW < Apb1enrSpec > { Tim12enW :: new (self , 6) } # [doc = "Bit 7 - TIM13 clock enable"] # [inline (always)] pub fn tim13en (& mut self) -> Tim13enW < Apb1enrSpec > { Tim13enW :: new (self , 7) } # [doc = "Bit 8 - TIM14 clock enable"] # [inline (always)] pub fn tim14en (& mut self) -> Tim14enW < Apb1enrSpec > { Tim14enW :: new (self , 8) } # [doc = "Bit 11 - Window watchdog clock enable"] # [inline (always)] pub fn wwdgen (& mut self) -> WwdgenW < Apb1enrSpec > { WwdgenW :: new (self , 11) } # [doc = "Bit 14 - SPI2 clock enable"] # [inline (always)] pub fn spi2en (& mut self) -> Spi2enW < Apb1enrSpec > { Spi2enW :: new (self , 14) } # [doc = "Bit 15 - SPI3 clock enable"] # [inline (always)] pub fn spi3en (& mut self) -> Spi3enW < Apb1enrSpec > { Spi3enW :: new (self , 15) } # [doc = "Bit 17 - USART 2 clock enable"] # [inline (always)] pub fn usart2en (& mut self) -> Usart2enW < Apb1enrSpec > { Usart2enW :: new (self , 17) } # [doc = "Bit 18 - USART3 clock enable"] # [inline (always)] pub fn usart3en (& mut self) -> Usart3enW < Apb1enrSpec > { Usart3enW :: new (self , 18) } # [doc = "Bit 19 - UART4 clock enable"] # [inline (always)] pub fn uart4en (& mut self) -> Uart4enW < Apb1enrSpec > { Uart4enW :: new (self , 19) } # [doc = "Bit 20 - UART5 clock enable"] # [inline (always)] pub fn uart5en (& mut self) -> Uart5enW < Apb1enrSpec > { Uart5enW :: new (self , 20) } # [doc = "Bit 21 - I2C1 clock enable"] # [inline (always)] pub fn i2c1en (& mut self) -> I2c1enW < Apb1enrSpec > { I2c1enW :: new (self , 21) } # [doc = "Bit 22 - I2C2 clock enable"] # [inline (always)] pub fn i2c2en (& mut self) -> I2c2enW < Apb1enrSpec > { I2c2enW :: new (self , 22) } # [doc = "Bit 23 - I2C3 clock enable"] # [inline (always)] pub fn i2c3en (& mut self) -> I2c3enW < Apb1enrSpec > { I2c3enW :: new (self , 23) } # [doc = "Bit 25 - CAN 1 clock enable"] # [inline (always)] pub fn can1en (& mut self) -> Can1enW < Apb1enrSpec > { Can1enW :: new (self , 25) } # [doc = "Bit 26 - CAN 2 clock enable"] # [inline (always)] pub fn can2en (& mut self) -> Can2enW < Apb1enrSpec > { Can2enW :: new (self , 26) } # [doc = "Bit 28 - Power interface clock enable"] # [inline (always)] pub fn pwren (& mut self) -> PwrenW < Apb1enrSpec > { PwrenW :: new (self , 28) } # [doc = "Bit 29 - DAC interface clock enable"] # [inline (always)] pub fn dacen (& mut self) -> DacenW < Apb1enrSpec > { DacenW :: new (self , 29) } } # [doc = "APB1 peripheral clock enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1enr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1enr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Apb1enrSpec ; impl crate :: RegisterSpec for Apb1enrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`apb1enr::R`](R) reader structure"] impl crate :: Readable for Apb1enrSpec { } # [doc = "`write(|w| ..)` method takes [`apb1enr::W`](W) writer structure"] impl crate :: Writable for Apb1enrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets APB1ENR to value 0"] impl crate :: Resettable for Apb1enrSpec { }