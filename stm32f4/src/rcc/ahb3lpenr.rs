# [doc = "Register `AHB3LPENR` reader"] pub type R = crate :: R < Ahb3lpenrSpec > ; # [doc = "Register `AHB3LPENR` writer"] pub type W = crate :: W < Ahb3lpenrSpec > ; # [doc = "Flexible static memory controller module clock enable during Sleep mode\n\nValue on reset: 1"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Fsmclpen { # [doc = "0: Selected module is disabled during Sleep mode"] DisabledInSleep = 0 , # [doc = "1: Selected module is enabled during Sleep mode"] EnabledInSleep = 1 , } impl From < Fsmclpen > for bool { # [inline (always)] fn from (variant : Fsmclpen) -> Self { variant as u8 != 0 } } # [doc = "Field `FSMCLPEN` reader - Flexible static memory controller module clock enable during Sleep mode"] pub type FsmclpenR = crate :: BitReader < Fsmclpen > ; impl FsmclpenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Fsmclpen { match self . bits { false => Fsmclpen :: DisabledInSleep , true => Fsmclpen :: EnabledInSleep , } } # [doc = "Selected module is disabled during Sleep mode"] # [inline (always)] pub fn is_disabled_in_sleep (& self) -> bool { * self == Fsmclpen :: DisabledInSleep } # [doc = "Selected module is enabled during Sleep mode"] # [inline (always)] pub fn is_enabled_in_sleep (& self) -> bool { * self == Fsmclpen :: EnabledInSleep } } # [doc = "Field `FSMCLPEN` writer - Flexible static memory controller module clock enable during Sleep mode"] pub type FsmclpenW < 'a , REG > = crate :: BitWriter < 'a , REG , Fsmclpen > ; impl < 'a , REG > FsmclpenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Selected module is disabled during Sleep mode"] # [inline (always)] pub fn disabled_in_sleep (self) -> & 'a mut crate :: W < REG > { self . variant (Fsmclpen :: DisabledInSleep) } # [doc = "Selected module is enabled during Sleep mode"] # [inline (always)] pub fn enabled_in_sleep (self) -> & 'a mut crate :: W < REG > { self . variant (Fsmclpen :: EnabledInSleep) } } impl R { # [doc = "Bit 0 - Flexible static memory controller module clock enable during Sleep mode"] # [inline (always)] pub fn fsmclpen (& self) -> FsmclpenR { FsmclpenR :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Flexible static memory controller module clock enable during Sleep mode"] # [inline (always)] pub fn fsmclpen (& mut self) -> FsmclpenW < Ahb3lpenrSpec > { FsmclpenW :: new (self , 0) } } # [doc = "AHB3 peripheral clock enable in low power mode register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahb3lpenr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahb3lpenr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ahb3lpenrSpec ; impl crate :: RegisterSpec for Ahb3lpenrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ahb3lpenr::R`](R) reader structure"] impl crate :: Readable for Ahb3lpenrSpec { } # [doc = "`write(|w| ..)` method takes [`ahb3lpenr::W`](W) writer structure"] impl crate :: Writable for Ahb3lpenrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets AHB3LPENR to value 0x01"] impl crate :: Resettable for Ahb3lpenrSpec { const RESET_VALUE : u32 = 0x01 ; }