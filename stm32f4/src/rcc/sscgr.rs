# [doc = "Register `SSCGR` reader"] pub type R = crate :: R < SscgrSpec > ; # [doc = "Register `SSCGR` writer"] pub type W = crate :: W < SscgrSpec > ; # [doc = "Field `MODPER` reader - Modulation period"] pub type ModperR = crate :: FieldReader < u16 > ; # [doc = "Field `MODPER` writer - Modulation period"] pub type ModperW < 'a , REG > = crate :: FieldWriter < 'a , REG , 13 , u16 , crate :: Safe > ; # [doc = "Field `INCSTEP` reader - Incrementation step"] pub type IncstepR = crate :: FieldReader < u16 > ; # [doc = "Field `INCSTEP` writer - Incrementation step"] pub type IncstepW < 'a , REG > = crate :: FieldWriter < 'a , REG , 15 , u16 , crate :: Safe > ; # [doc = "Spread Select\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Spreadsel { # [doc = "0: Center spread"] Center = 0 , # [doc = "1: Down spread"] Down = 1 , } impl From < Spreadsel > for bool { # [inline (always)] fn from (variant : Spreadsel) -> Self { variant as u8 != 0 } } # [doc = "Field `SPREADSEL` reader - Spread Select"] pub type SpreadselR = crate :: BitReader < Spreadsel > ; impl SpreadselR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Spreadsel { match self . bits { false => Spreadsel :: Center , true => Spreadsel :: Down , } } # [doc = "Center spread"] # [inline (always)] pub fn is_center (& self) -> bool { * self == Spreadsel :: Center } # [doc = "Down spread"] # [inline (always)] pub fn is_down (& self) -> bool { * self == Spreadsel :: Down } } # [doc = "Field `SPREADSEL` writer - Spread Select"] pub type SpreadselW < 'a , REG > = crate :: BitWriter < 'a , REG , Spreadsel > ; impl < 'a , REG > SpreadselW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Center spread"] # [inline (always)] pub fn center (self) -> & 'a mut crate :: W < REG > { self . variant (Spreadsel :: Center) } # [doc = "Down spread"] # [inline (always)] pub fn down (self) -> & 'a mut crate :: W < REG > { self . variant (Spreadsel :: Down) } } # [doc = "Spread spectrum modulation enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Sscgen { # [doc = "0: Spread spectrum modulation disabled"] Disabled = 0 , # [doc = "1: Spread spectrum modulation enabled"] Enabled = 1 , } impl From < Sscgen > for bool { # [inline (always)] fn from (variant : Sscgen) -> Self { variant as u8 != 0 } } # [doc = "Field `SSCGEN` reader - Spread spectrum modulation enable"] pub type SscgenR = crate :: BitReader < Sscgen > ; impl SscgenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Sscgen { match self . bits { false => Sscgen :: Disabled , true => Sscgen :: Enabled , } } # [doc = "Spread spectrum modulation disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Sscgen :: Disabled } # [doc = "Spread spectrum modulation enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Sscgen :: Enabled } } # [doc = "Field `SSCGEN` writer - Spread spectrum modulation enable"] pub type SscgenW < 'a , REG > = crate :: BitWriter < 'a , REG , Sscgen > ; impl < 'a , REG > SscgenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Spread spectrum modulation disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Sscgen :: Disabled) } # [doc = "Spread spectrum modulation enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Sscgen :: Enabled) } } impl R { # [doc = "Bits 0:12 - Modulation period"] # [inline (always)] pub fn modper (& self) -> ModperR { ModperR :: new ((self . bits & 0x1fff) as u16) } # [doc = "Bits 13:27 - Incrementation step"] # [inline (always)] pub fn incstep (& self) -> IncstepR { IncstepR :: new (((self . bits >> 13) & 0x7fff) as u16) } # [doc = "Bit 30 - Spread Select"] # [inline (always)] pub fn spreadsel (& self) -> SpreadselR { SpreadselR :: new (((self . bits >> 30) & 1) != 0) } # [doc = "Bit 31 - Spread spectrum modulation enable"] # [inline (always)] pub fn sscgen (& self) -> SscgenR { SscgenR :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bits 0:12 - Modulation period"] # [inline (always)] pub fn modper (& mut self) -> ModperW < SscgrSpec > { ModperW :: new (self , 0) } # [doc = "Bits 13:27 - Incrementation step"] # [inline (always)] pub fn incstep (& mut self) -> IncstepW < SscgrSpec > { IncstepW :: new (self , 13) } # [doc = "Bit 30 - Spread Select"] # [inline (always)] pub fn spreadsel (& mut self) -> SpreadselW < SscgrSpec > { SpreadselW :: new (self , 30) } # [doc = "Bit 31 - Spread spectrum modulation enable"] # [inline (always)] pub fn sscgen (& mut self) -> SscgenW < SscgrSpec > { SscgenW :: new (self , 31) } } # [doc = "spread spectrum clock generation register\n\nYou can [`read`](crate::Reg::read) this register and get [`sscgr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sscgr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SscgrSpec ; impl crate :: RegisterSpec for SscgrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`sscgr::R`](R) reader structure"] impl crate :: Readable for SscgrSpec { } # [doc = "`write(|w| ..)` method takes [`sscgr::W`](W) writer structure"] impl crate :: Writable for SscgrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets SSCGR to value 0"] impl crate :: Resettable for SscgrSpec { }