# [doc = "Register `APB1LPENR` reader"] pub type R = crate :: R < Apb1lpenrSpec > ; # [doc = "Register `APB1LPENR` writer"] pub type W = crate :: W < Apb1lpenrSpec > ; # [doc = "TIM2 clock enable during Sleep mode\n\nValue on reset: 1"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tim2lpen { # [doc = "0: Selected module is disabled during Sleep mode"] DisabledInSleep = 0 , # [doc = "1: Selected module is enabled during Sleep mode"] EnabledInSleep = 1 , } impl From < Tim2lpen > for bool { # [inline (always)] fn from (variant : Tim2lpen) -> Self { variant as u8 != 0 } } # [doc = "Field `TIM2LPEN` reader - TIM2 clock enable during Sleep mode"] pub type Tim2lpenR = crate :: BitReader < Tim2lpen > ; impl Tim2lpenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Tim2lpen { match self . bits { false => Tim2lpen :: DisabledInSleep , true => Tim2lpen :: EnabledInSleep , } } # [doc = "Selected module is disabled during Sleep mode"] # [inline (always)] pub fn is_disabled_in_sleep (& self) -> bool { * self == Tim2lpen :: DisabledInSleep } # [doc = "Selected module is enabled during Sleep mode"] # [inline (always)] pub fn is_enabled_in_sleep (& self) -> bool { * self == Tim2lpen :: EnabledInSleep } } # [doc = "Field `TIM2LPEN` writer - TIM2 clock enable during Sleep mode"] pub type Tim2lpenW < 'a , REG > = crate :: BitWriter < 'a , REG , Tim2lpen > ; impl < 'a , REG > Tim2lpenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Selected module is disabled during Sleep mode"] # [inline (always)] pub fn disabled_in_sleep (self) -> & 'a mut crate :: W < REG > { self . variant (Tim2lpen :: DisabledInSleep) } # [doc = "Selected module is enabled during Sleep mode"] # [inline (always)] pub fn enabled_in_sleep (self) -> & 'a mut crate :: W < REG > { self . variant (Tim2lpen :: EnabledInSleep) } } # [doc = "Field `TIM3LPEN` reader - TIM3 clock enable during Sleep mode"] pub use Tim2lpenR as Tim3lpenR ; # [doc = "Field `TIM3LPEN` writer - TIM3 clock enable during Sleep mode"] pub use Tim2lpenW as Tim3lpenW ; # [doc = "Field `TIM4LPEN` reader - TIM4 clock enable during Sleep mode"] pub use Tim2lpenR as Tim4lpenR ; # [doc = "Field `TIM4LPEN` writer - TIM4 clock enable during Sleep mode"] pub use Tim2lpenW as Tim4lpenW ; # [doc = "Field `TIM5LPEN` reader - TIM5 clock enable during Sleep mode"] pub use Tim2lpenR as Tim5lpenR ; # [doc = "Field `TIM5LPEN` writer - TIM5 clock enable during Sleep mode"] pub use Tim2lpenW as Tim5lpenW ; # [doc = "Field `TIM6LPEN` reader - TIM6 clock enable during Sleep mode"] pub use Tim2lpenR as Tim6lpenR ; # [doc = "Field `TIM6LPEN` writer - TIM6 clock enable during Sleep mode"] pub use Tim2lpenW as Tim6lpenW ; # [doc = "Field `TIM7LPEN` reader - TIM7 clock enable during Sleep mode"] pub use Tim2lpenR as Tim7lpenR ; # [doc = "Field `TIM7LPEN` writer - TIM7 clock enable during Sleep mode"] pub use Tim2lpenW as Tim7lpenW ; # [doc = "Field `TIM12LPEN` reader - TIM12 clock enable during Sleep mode"] pub use Tim2lpenR as Tim12lpenR ; # [doc = "Field `TIM12LPEN` writer - TIM12 clock enable during Sleep mode"] pub use Tim2lpenW as Tim12lpenW ; # [doc = "Field `TIM13LPEN` reader - TIM13 clock enable during Sleep mode"] pub use Tim2lpenR as Tim13lpenR ; # [doc = "Field `TIM13LPEN` writer - TIM13 clock enable during Sleep mode"] pub use Tim2lpenW as Tim13lpenW ; # [doc = "Field `TIM14LPEN` reader - TIM14 clock enable during Sleep mode"] pub use Tim2lpenR as Tim14lpenR ; # [doc = "Field `TIM14LPEN` writer - TIM14 clock enable during Sleep mode"] pub use Tim2lpenW as Tim14lpenW ; # [doc = "Field `WWDGLPEN` reader - Window watchdog clock enable during Sleep mode"] pub use Tim2lpenR as WwdglpenR ; # [doc = "Field `WWDGLPEN` writer - Window watchdog clock enable during Sleep mode"] pub use Tim2lpenW as WwdglpenW ; # [doc = "Field `SPI2LPEN` reader - SPI2 clock enable during Sleep mode"] pub use Tim2lpenR as Spi2lpenR ; # [doc = "Field `SPI2LPEN` writer - SPI2 clock enable during Sleep mode"] pub use Tim2lpenW as Spi2lpenW ; # [doc = "Field `SPI3LPEN` reader - SPI3 clock enable during Sleep mode"] pub use Tim2lpenR as Spi3lpenR ; # [doc = "Field `SPI3LPEN` writer - SPI3 clock enable during Sleep mode"] pub use Tim2lpenW as Spi3lpenW ; # [doc = "Field `USART2LPEN` reader - USART2 clock enable during Sleep mode"] pub use Tim2lpenR as Usart2lpenR ; # [doc = "Field `USART2LPEN` writer - USART2 clock enable during Sleep mode"] pub use Tim2lpenW as Usart2lpenW ; # [doc = "Field `USART3LPEN` reader - USART3 clock enable during Sleep mode"] pub use Tim2lpenR as Usart3lpenR ; # [doc = "Field `USART3LPEN` writer - USART3 clock enable during Sleep mode"] pub use Tim2lpenW as Usart3lpenW ; # [doc = "Field `UART4LPEN` reader - UART4 clock enable during Sleep mode"] pub use Tim2lpenR as Uart4lpenR ; # [doc = "Field `UART4LPEN` writer - UART4 clock enable during Sleep mode"] pub use Tim2lpenW as Uart4lpenW ; # [doc = "Field `UART5LPEN` reader - UART5 clock enable during Sleep mode"] pub use Tim2lpenR as Uart5lpenR ; # [doc = "Field `UART5LPEN` writer - UART5 clock enable during Sleep mode"] pub use Tim2lpenW as Uart5lpenW ; # [doc = "Field `I2C1LPEN` reader - I2C1 clock enable during Sleep mode"] pub use Tim2lpenR as I2c1lpenR ; # [doc = "Field `I2C1LPEN` writer - I2C1 clock enable during Sleep mode"] pub use Tim2lpenW as I2c1lpenW ; # [doc = "Field `I2C2LPEN` reader - I2C2 clock enable during Sleep mode"] pub use Tim2lpenR as I2c2lpenR ; # [doc = "Field `I2C2LPEN` writer - I2C2 clock enable during Sleep mode"] pub use Tim2lpenW as I2c2lpenW ; # [doc = "Field `I2C3LPEN` reader - I2C3 clock enable during Sleep mode"] pub use Tim2lpenR as I2c3lpenR ; # [doc = "Field `I2C3LPEN` writer - I2C3 clock enable during Sleep mode"] pub use Tim2lpenW as I2c3lpenW ; # [doc = "Field `CAN1LPEN` reader - CAN 1 clock enable during Sleep mode"] pub use Tim2lpenR as Can1lpenR ; # [doc = "Field `CAN1LPEN` writer - CAN 1 clock enable during Sleep mode"] pub use Tim2lpenW as Can1lpenW ; # [doc = "Field `CAN2LPEN` reader - CAN 2 clock enable during Sleep mode"] pub use Tim2lpenR as Can2lpenR ; # [doc = "Field `CAN2LPEN` writer - CAN 2 clock enable during Sleep mode"] pub use Tim2lpenW as Can2lpenW ; # [doc = "Field `PWRLPEN` reader - Power interface clock enable during Sleep mode"] pub use Tim2lpenR as PwrlpenR ; # [doc = "Field `PWRLPEN` writer - Power interface clock enable during Sleep mode"] pub use Tim2lpenW as PwrlpenW ; # [doc = "Field `DACLPEN` reader - DAC interface clock enable during Sleep mode"] pub use Tim2lpenR as DaclpenR ; # [doc = "Field `DACLPEN` writer - DAC interface clock enable during Sleep mode"] pub use Tim2lpenW as DaclpenW ; impl R { # [doc = "Bit 0 - TIM2 clock enable during Sleep mode"] # [inline (always)] pub fn tim2lpen (& self) -> Tim2lpenR { Tim2lpenR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - TIM3 clock enable during Sleep mode"] # [inline (always)] pub fn tim3lpen (& self) -> Tim3lpenR { Tim3lpenR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - TIM4 clock enable during Sleep mode"] # [inline (always)] pub fn tim4lpen (& self) -> Tim4lpenR { Tim4lpenR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - TIM5 clock enable during Sleep mode"] # [inline (always)] pub fn tim5lpen (& self) -> Tim5lpenR { Tim5lpenR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - TIM6 clock enable during Sleep mode"] # [inline (always)] pub fn tim6lpen (& self) -> Tim6lpenR { Tim6lpenR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - TIM7 clock enable during Sleep mode"] # [inline (always)] pub fn tim7lpen (& self) -> Tim7lpenR { Tim7lpenR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - TIM12 clock enable during Sleep mode"] # [inline (always)] pub fn tim12lpen (& self) -> Tim12lpenR { Tim12lpenR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - TIM13 clock enable during Sleep mode"] # [inline (always)] pub fn tim13lpen (& self) -> Tim13lpenR { Tim13lpenR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - TIM14 clock enable during Sleep mode"] # [inline (always)] pub fn tim14lpen (& self) -> Tim14lpenR { Tim14lpenR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 11 - Window watchdog clock enable during Sleep mode"] # [inline (always)] pub fn wwdglpen (& self) -> WwdglpenR { WwdglpenR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 14 - SPI2 clock enable during Sleep mode"] # [inline (always)] pub fn spi2lpen (& self) -> Spi2lpenR { Spi2lpenR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - SPI3 clock enable during Sleep mode"] # [inline (always)] pub fn spi3lpen (& self) -> Spi3lpenR { Spi3lpenR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 17 - USART2 clock enable during Sleep mode"] # [inline (always)] pub fn usart2lpen (& self) -> Usart2lpenR { Usart2lpenR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - USART3 clock enable during Sleep mode"] # [inline (always)] pub fn usart3lpen (& self) -> Usart3lpenR { Usart3lpenR :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - UART4 clock enable during Sleep mode"] # [inline (always)] pub fn uart4lpen (& self) -> Uart4lpenR { Uart4lpenR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - UART5 clock enable during Sleep mode"] # [inline (always)] pub fn uart5lpen (& self) -> Uart5lpenR { Uart5lpenR :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - I2C1 clock enable during Sleep mode"] # [inline (always)] pub fn i2c1lpen (& self) -> I2c1lpenR { I2c1lpenR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - I2C2 clock enable during Sleep mode"] # [inline (always)] pub fn i2c2lpen (& self) -> I2c2lpenR { I2c2lpenR :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - I2C3 clock enable during Sleep mode"] # [inline (always)] pub fn i2c3lpen (& self) -> I2c3lpenR { I2c3lpenR :: new (((self . bits >> 23) & 1) != 0) } # [doc = "Bit 25 - CAN 1 clock enable during Sleep mode"] # [inline (always)] pub fn can1lpen (& self) -> Can1lpenR { Can1lpenR :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - CAN 2 clock enable during Sleep mode"] # [inline (always)] pub fn can2lpen (& self) -> Can2lpenR { Can2lpenR :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 28 - Power interface clock enable during Sleep mode"] # [inline (always)] pub fn pwrlpen (& self) -> PwrlpenR { PwrlpenR :: new (((self . bits >> 28) & 1) != 0) } # [doc = "Bit 29 - DAC interface clock enable during Sleep mode"] # [inline (always)] pub fn daclpen (& self) -> DaclpenR { DaclpenR :: new (((self . bits >> 29) & 1) != 0) } } impl W { # [doc = "Bit 0 - TIM2 clock enable during Sleep mode"] # [inline (always)] pub fn tim2lpen (& mut self) -> Tim2lpenW < Apb1lpenrSpec > { Tim2lpenW :: new (self , 0) } # [doc = "Bit 1 - TIM3 clock enable during Sleep mode"] # [inline (always)] pub fn tim3lpen (& mut self) -> Tim3lpenW < Apb1lpenrSpec > { Tim3lpenW :: new (self , 1) } # [doc = "Bit 2 - TIM4 clock enable during Sleep mode"] # [inline (always)] pub fn tim4lpen (& mut self) -> Tim4lpenW < Apb1lpenrSpec > { Tim4lpenW :: new (self , 2) } # [doc = "Bit 3 - TIM5 clock enable during Sleep mode"] # [inline (always)] pub fn tim5lpen (& mut self) -> Tim5lpenW < Apb1lpenrSpec > { Tim5lpenW :: new (self , 3) } # [doc = "Bit 4 - TIM6 clock enable during Sleep mode"] # [inline (always)] pub fn tim6lpen (& mut self) -> Tim6lpenW < Apb1lpenrSpec > { Tim6lpenW :: new (self , 4) } # [doc = "Bit 5 - TIM7 clock enable during Sleep mode"] # [inline (always)] pub fn tim7lpen (& mut self) -> Tim7lpenW < Apb1lpenrSpec > { Tim7lpenW :: new (self , 5) } # [doc = "Bit 6 - TIM12 clock enable during Sleep mode"] # [inline (always)] pub fn tim12lpen (& mut self) -> Tim12lpenW < Apb1lpenrSpec > { Tim12lpenW :: new (self , 6) } # [doc = "Bit 7 - TIM13 clock enable during Sleep mode"] # [inline (always)] pub fn tim13lpen (& mut self) -> Tim13lpenW < Apb1lpenrSpec > { Tim13lpenW :: new (self , 7) } # [doc = "Bit 8 - TIM14 clock enable during Sleep mode"] # [inline (always)] pub fn tim14lpen (& mut self) -> Tim14lpenW < Apb1lpenrSpec > { Tim14lpenW :: new (self , 8) } # [doc = "Bit 11 - Window watchdog clock enable during Sleep mode"] # [inline (always)] pub fn wwdglpen (& mut self) -> WwdglpenW < Apb1lpenrSpec > { WwdglpenW :: new (self , 11) } # [doc = "Bit 14 - SPI2 clock enable during Sleep mode"] # [inline (always)] pub fn spi2lpen (& mut self) -> Spi2lpenW < Apb1lpenrSpec > { Spi2lpenW :: new (self , 14) } # [doc = "Bit 15 - SPI3 clock enable during Sleep mode"] # [inline (always)] pub fn spi3lpen (& mut self) -> Spi3lpenW < Apb1lpenrSpec > { Spi3lpenW :: new (self , 15) } # [doc = "Bit 17 - USART2 clock enable during Sleep mode"] # [inline (always)] pub fn usart2lpen (& mut self) -> Usart2lpenW < Apb1lpenrSpec > { Usart2lpenW :: new (self , 17) } # [doc = "Bit 18 - USART3 clock enable during Sleep mode"] # [inline (always)] pub fn usart3lpen (& mut self) -> Usart3lpenW < Apb1lpenrSpec > { Usart3lpenW :: new (self , 18) } # [doc = "Bit 19 - UART4 clock enable during Sleep mode"] # [inline (always)] pub fn uart4lpen (& mut self) -> Uart4lpenW < Apb1lpenrSpec > { Uart4lpenW :: new (self , 19) } # [doc = "Bit 20 - UART5 clock enable during Sleep mode"] # [inline (always)] pub fn uart5lpen (& mut self) -> Uart5lpenW < Apb1lpenrSpec > { Uart5lpenW :: new (self , 20) } # [doc = "Bit 21 - I2C1 clock enable during Sleep mode"] # [inline (always)] pub fn i2c1lpen (& mut self) -> I2c1lpenW < Apb1lpenrSpec > { I2c1lpenW :: new (self , 21) } # [doc = "Bit 22 - I2C2 clock enable during Sleep mode"] # [inline (always)] pub fn i2c2lpen (& mut self) -> I2c2lpenW < Apb1lpenrSpec > { I2c2lpenW :: new (self , 22) } # [doc = "Bit 23 - I2C3 clock enable during Sleep mode"] # [inline (always)] pub fn i2c3lpen (& mut self) -> I2c3lpenW < Apb1lpenrSpec > { I2c3lpenW :: new (self , 23) } # [doc = "Bit 25 - CAN 1 clock enable during Sleep mode"] # [inline (always)] pub fn can1lpen (& mut self) -> Can1lpenW < Apb1lpenrSpec > { Can1lpenW :: new (self , 25) } # [doc = "Bit 26 - CAN 2 clock enable during Sleep mode"] # [inline (always)] pub fn can2lpen (& mut self) -> Can2lpenW < Apb1lpenrSpec > { Can2lpenW :: new (self , 26) } # [doc = "Bit 28 - Power interface clock enable during Sleep mode"] # [inline (always)] pub fn pwrlpen (& mut self) -> PwrlpenW < Apb1lpenrSpec > { PwrlpenW :: new (self , 28) } # [doc = "Bit 29 - DAC interface clock enable during Sleep mode"] # [inline (always)] pub fn daclpen (& mut self) -> DaclpenW < Apb1lpenrSpec > { DaclpenW :: new (self , 29) } } # [doc = "APB1 peripheral clock enable in low power mode register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1lpenr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1lpenr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Apb1lpenrSpec ; impl crate :: RegisterSpec for Apb1lpenrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`apb1lpenr::R`](R) reader structure"] impl crate :: Readable for Apb1lpenrSpec { } # [doc = "`write(|w| ..)` method takes [`apb1lpenr::W`](W) writer structure"] impl crate :: Writable for Apb1lpenrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets APB1LPENR to value 0x36fe_c9ff"] impl crate :: Resettable for Apb1lpenrSpec { const RESET_VALUE : u32 = 0x36fe_c9ff ; }