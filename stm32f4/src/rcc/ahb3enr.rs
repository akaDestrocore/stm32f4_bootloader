# [doc = "Register `AHB3ENR` reader"] pub type R = crate :: R < Ahb3enrSpec > ; # [doc = "Register `AHB3ENR` writer"] pub type W = crate :: W < Ahb3enrSpec > ; # [doc = "Flexible static memory controller module clock enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Fsmcen { # [doc = "0: The selected clock is disabled"] Disabled = 0 , # [doc = "1: The selected clock is enabled"] Enabled = 1 , } impl From < Fsmcen > for bool { # [inline (always)] fn from (variant : Fsmcen) -> Self { variant as u8 != 0 } } # [doc = "Field `FSMCEN` reader - Flexible static memory controller module clock enable"] pub type FsmcenR = crate :: BitReader < Fsmcen > ; impl FsmcenR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Fsmcen { match self . bits { false => Fsmcen :: Disabled , true => Fsmcen :: Enabled , } } # [doc = "The selected clock is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Fsmcen :: Disabled } # [doc = "The selected clock is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Fsmcen :: Enabled } } # [doc = "Field `FSMCEN` writer - Flexible static memory controller module clock enable"] pub type FsmcenW < 'a , REG > = crate :: BitWriter < 'a , REG , Fsmcen > ; impl < 'a , REG > FsmcenW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "The selected clock is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Fsmcen :: Disabled) } # [doc = "The selected clock is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Fsmcen :: Enabled) } } impl R { # [doc = "Bit 0 - Flexible static memory controller module clock enable"] # [inline (always)] pub fn fsmcen (& self) -> FsmcenR { FsmcenR :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Flexible static memory controller module clock enable"] # [inline (always)] pub fn fsmcen (& mut self) -> FsmcenW < Ahb3enrSpec > { FsmcenW :: new (self , 0) } } # [doc = "AHB3 peripheral clock enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahb3enr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahb3enr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ahb3enrSpec ; impl crate :: RegisterSpec for Ahb3enrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ahb3enr::R`](R) reader structure"] impl crate :: Readable for Ahb3enrSpec { } # [doc = "`write(|w| ..)` method takes [`ahb3enr::W`](W) writer structure"] impl crate :: Writable for Ahb3enrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets AHB3ENR to value 0"] impl crate :: Resettable for Ahb3enrSpec { }