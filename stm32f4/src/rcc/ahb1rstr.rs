# [doc = "Register `AHB1RSTR` reader"] pub type R = crate :: R < Ahb1rstrSpec > ; # [doc = "Register `AHB1RSTR` writer"] pub type W = crate :: W < Ahb1rstrSpec > ; # [doc = "IO port A reset\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Gpioarst { # [doc = "1: Reset the selected module"] Reset = 1 , } impl From < Gpioarst > for bool { # [inline (always)] fn from (variant : Gpioarst) -> Self { variant as u8 != 0 } } # [doc = "Field `GPIOARST` reader - IO port A reset"] pub type GpioarstR = crate :: BitReader < Gpioarst > ; impl GpioarstR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Gpioarst > { match self . bits { true => Some (Gpioarst :: Reset) , _ => None , } } # [doc = "Reset the selected module"] # [inline (always)] pub fn is_reset (& self) -> bool { * self == Gpioarst :: Reset } } # [doc = "Field `GPIOARST` writer - IO port A reset"] pub type GpioarstW < 'a , REG > = crate :: BitWriter < 'a , REG , Gpioarst > ; impl < 'a , REG > GpioarstW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Reset the selected module"] # [inline (always)] pub fn reset (self) -> & 'a mut crate :: W < REG > { self . variant (Gpioarst :: Reset) } } # [doc = "Field `GPIOBRST` reader - IO port B reset"] pub use GpioarstR as GpiobrstR ; # [doc = "Field `GPIOBRST` writer - IO port B reset"] pub use GpioarstW as GpiobrstW ; # [doc = "Field `GPIOCRST` reader - IO port C reset"] pub use GpioarstR as GpiocrstR ; # [doc = "Field `GPIOCRST` writer - IO port C reset"] pub use GpioarstW as GpiocrstW ; # [doc = "Field `GPIODRST` reader - IO port D reset"] pub use GpioarstR as GpiodrstR ; # [doc = "Field `GPIODRST` writer - IO port D reset"] pub use GpioarstW as GpiodrstW ; # [doc = "Field `GPIOERST` reader - IO port E reset"] pub use GpioarstR as GpioerstR ; # [doc = "Field `GPIOERST` writer - IO port E reset"] pub use GpioarstW as GpioerstW ; # [doc = "Field `GPIOFRST` reader - IO port F reset"] pub use GpioarstR as GpiofrstR ; # [doc = "Field `GPIOFRST` writer - IO port F reset"] pub use GpioarstW as GpiofrstW ; # [doc = "Field `GPIOGRST` reader - IO port G reset"] pub use GpioarstR as GpiogrstR ; # [doc = "Field `GPIOGRST` writer - IO port G reset"] pub use GpioarstW as GpiogrstW ; # [doc = "Field `GPIOHRST` reader - IO port H reset"] pub use GpioarstR as GpiohrstR ; # [doc = "Field `GPIOHRST` writer - IO port H reset"] pub use GpioarstW as GpiohrstW ; # [doc = "Field `GPIOIRST` reader - IO port I reset"] pub use GpioarstR as GpioirstR ; # [doc = "Field `GPIOIRST` writer - IO port I reset"] pub use GpioarstW as GpioirstW ; # [doc = "Field `CRCRST` reader - CRC reset"] pub use GpioarstR as CrcrstR ; # [doc = "Field `CRCRST` writer - CRC reset"] pub use GpioarstW as CrcrstW ; # [doc = "Field `DMA1RST` reader - DMA2 reset"] pub use GpioarstR as Dma1rstR ; # [doc = "Field `DMA1RST` writer - DMA2 reset"] pub use GpioarstW as Dma1rstW ; # [doc = "Field `DMA2RST` reader - DMA2 reset"] pub use GpioarstR as Dma2rstR ; # [doc = "Field `DMA2RST` writer - DMA2 reset"] pub use GpioarstW as Dma2rstW ; # [doc = "Field `ETHMACRST` reader - Ethernet MAC reset"] pub use GpioarstR as EthmacrstR ; # [doc = "Field `ETHMACRST` writer - Ethernet MAC reset"] pub use GpioarstW as EthmacrstW ; # [doc = "Field `OTGHSRST` reader - USB OTG HS module reset"] pub use GpioarstR as OtghsrstR ; # [doc = "Field `OTGHSRST` writer - USB OTG HS module reset"] pub use GpioarstW as OtghsrstW ; impl R { # [doc = "Bit 0 - IO port A reset"] # [inline (always)] pub fn gpioarst (& self) -> GpioarstR { GpioarstR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - IO port B reset"] # [inline (always)] pub fn gpiobrst (& self) -> GpiobrstR { GpiobrstR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - IO port C reset"] # [inline (always)] pub fn gpiocrst (& self) -> GpiocrstR { GpiocrstR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - IO port D reset"] # [inline (always)] pub fn gpiodrst (& self) -> GpiodrstR { GpiodrstR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - IO port E reset"] # [inline (always)] pub fn gpioerst (& self) -> GpioerstR { GpioerstR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - IO port F reset"] # [inline (always)] pub fn gpiofrst (& self) -> GpiofrstR { GpiofrstR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - IO port G reset"] # [inline (always)] pub fn gpiogrst (& self) -> GpiogrstR { GpiogrstR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - IO port H reset"] # [inline (always)] pub fn gpiohrst (& self) -> GpiohrstR { GpiohrstR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - IO port I reset"] # [inline (always)] pub fn gpioirst (& self) -> GpioirstR { GpioirstR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 12 - CRC reset"] # [inline (always)] pub fn crcrst (& self) -> CrcrstR { CrcrstR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 21 - DMA2 reset"] # [inline (always)] pub fn dma1rst (& self) -> Dma1rstR { Dma1rstR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - DMA2 reset"] # [inline (always)] pub fn dma2rst (& self) -> Dma2rstR { Dma2rstR :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 25 - Ethernet MAC reset"] # [inline (always)] pub fn ethmacrst (& self) -> EthmacrstR { EthmacrstR :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 29 - USB OTG HS module reset"] # [inline (always)] pub fn otghsrst (& self) -> OtghsrstR { OtghsrstR :: new (((self . bits >> 29) & 1) != 0) } } impl W { # [doc = "Bit 0 - IO port A reset"] # [inline (always)] pub fn gpioarst (& mut self) -> GpioarstW < Ahb1rstrSpec > { GpioarstW :: new (self , 0) } # [doc = "Bit 1 - IO port B reset"] # [inline (always)] pub fn gpiobrst (& mut self) -> GpiobrstW < Ahb1rstrSpec > { GpiobrstW :: new (self , 1) } # [doc = "Bit 2 - IO port C reset"] # [inline (always)] pub fn gpiocrst (& mut self) -> GpiocrstW < Ahb1rstrSpec > { GpiocrstW :: new (self , 2) } # [doc = "Bit 3 - IO port D reset"] # [inline (always)] pub fn gpiodrst (& mut self) -> GpiodrstW < Ahb1rstrSpec > { GpiodrstW :: new (self , 3) } # [doc = "Bit 4 - IO port E reset"] # [inline (always)] pub fn gpioerst (& mut self) -> GpioerstW < Ahb1rstrSpec > { GpioerstW :: new (self , 4) } # [doc = "Bit 5 - IO port F reset"] # [inline (always)] pub fn gpiofrst (& mut self) -> GpiofrstW < Ahb1rstrSpec > { GpiofrstW :: new (self , 5) } # [doc = "Bit 6 - IO port G reset"] # [inline (always)] pub fn gpiogrst (& mut self) -> GpiogrstW < Ahb1rstrSpec > { GpiogrstW :: new (self , 6) } # [doc = "Bit 7 - IO port H reset"] # [inline (always)] pub fn gpiohrst (& mut self) -> GpiohrstW < Ahb1rstrSpec > { GpiohrstW :: new (self , 7) } # [doc = "Bit 8 - IO port I reset"] # [inline (always)] pub fn gpioirst (& mut self) -> GpioirstW < Ahb1rstrSpec > { GpioirstW :: new (self , 8) } # [doc = "Bit 12 - CRC reset"] # [inline (always)] pub fn crcrst (& mut self) -> CrcrstW < Ahb1rstrSpec > { CrcrstW :: new (self , 12) } # [doc = "Bit 21 - DMA2 reset"] # [inline (always)] pub fn dma1rst (& mut self) -> Dma1rstW < Ahb1rstrSpec > { Dma1rstW :: new (self , 21) } # [doc = "Bit 22 - DMA2 reset"] # [inline (always)] pub fn dma2rst (& mut self) -> Dma2rstW < Ahb1rstrSpec > { Dma2rstW :: new (self , 22) } # [doc = "Bit 25 - Ethernet MAC reset"] # [inline (always)] pub fn ethmacrst (& mut self) -> EthmacrstW < Ahb1rstrSpec > { EthmacrstW :: new (self , 25) } # [doc = "Bit 29 - USB OTG HS module reset"] # [inline (always)] pub fn otghsrst (& mut self) -> OtghsrstW < Ahb1rstrSpec > { OtghsrstW :: new (self , 29) } } # [doc = "AHB1 peripheral reset register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahb1rstr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahb1rstr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ahb1rstrSpec ; impl crate :: RegisterSpec for Ahb1rstrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ahb1rstr::R`](R) reader structure"] impl crate :: Readable for Ahb1rstrSpec { } # [doc = "`write(|w| ..)` method takes [`ahb1rstr::W`](W) writer structure"] impl crate :: Writable for Ahb1rstrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets AHB1RSTR to value 0"] impl crate :: Resettable for Ahb1rstrSpec { }