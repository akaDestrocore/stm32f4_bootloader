# [doc = "Register `AHB2RSTR` reader"] pub type R = crate :: R < Ahb2rstrSpec > ; # [doc = "Register `AHB2RSTR` writer"] pub type W = crate :: W < Ahb2rstrSpec > ; # [doc = "Camera interface reset\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Dcmirst { # [doc = "1: Reset the selected module"] Reset = 1 , } impl From < Dcmirst > for bool { # [inline (always)] fn from (variant : Dcmirst) -> Self { variant as u8 != 0 } } # [doc = "Field `DCMIRST` reader - Camera interface reset"] pub type DcmirstR = crate :: BitReader < Dcmirst > ; impl DcmirstR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Dcmirst > { match self . bits { true => Some (Dcmirst :: Reset) , _ => None , } } # [doc = "Reset the selected module"] # [inline (always)] pub fn is_reset (& self) -> bool { * self == Dcmirst :: Reset } } # [doc = "Field `DCMIRST` writer - Camera interface reset"] pub type DcmirstW < 'a , REG > = crate :: BitWriter < 'a , REG , Dcmirst > ; impl < 'a , REG > DcmirstW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Reset the selected module"] # [inline (always)] pub fn reset (self) -> & 'a mut crate :: W < REG > { self . variant (Dcmirst :: Reset) } } # [doc = "Field `RNGRST` reader - Random number generator module reset"] pub use DcmirstR as RngrstR ; # [doc = "Field `RNGRST` writer - Random number generator module reset"] pub use DcmirstW as RngrstW ; # [doc = "Field `OTGFSRST` reader - USB OTG FS module reset"] pub use DcmirstR as OtgfsrstR ; # [doc = "Field `OTGFSRST` writer - USB OTG FS module reset"] pub use DcmirstW as OtgfsrstW ; impl R { # [doc = "Bit 0 - Camera interface reset"] # [inline (always)] pub fn dcmirst (& self) -> DcmirstR { DcmirstR :: new ((self . bits & 1) != 0) } # [doc = "Bit 6 - Random number generator module reset"] # [inline (always)] pub fn rngrst (& self) -> RngrstR { RngrstR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - USB OTG FS module reset"] # [inline (always)] pub fn otgfsrst (& self) -> OtgfsrstR { OtgfsrstR :: new (((self . bits >> 7) & 1) != 0) } } impl W { # [doc = "Bit 0 - Camera interface reset"] # [inline (always)] pub fn dcmirst (& mut self) -> DcmirstW < Ahb2rstrSpec > { DcmirstW :: new (self , 0) } # [doc = "Bit 6 - Random number generator module reset"] # [inline (always)] pub fn rngrst (& mut self) -> RngrstW < Ahb2rstrSpec > { RngrstW :: new (self , 6) } # [doc = "Bit 7 - USB OTG FS module reset"] # [inline (always)] pub fn otgfsrst (& mut self) -> OtgfsrstW < Ahb2rstrSpec > { OtgfsrstW :: new (self , 7) } } # [doc = "AHB2 peripheral reset register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahb2rstr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahb2rstr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ahb2rstrSpec ; impl crate :: RegisterSpec for Ahb2rstrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ahb2rstr::R`](R) reader structure"] impl crate :: Readable for Ahb2rstrSpec { } # [doc = "`write(|w| ..)` method takes [`ahb2rstr::W`](W) writer structure"] impl crate :: Writable for Ahb2rstrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets AHB2RSTR to value 0"] impl crate :: Resettable for Ahb2rstrSpec { }