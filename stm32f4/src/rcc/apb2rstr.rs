# [doc = "Register `APB2RSTR` reader"] pub type R = crate :: R < Apb2rstrSpec > ; # [doc = "Register `APB2RSTR` writer"] pub type W = crate :: W < Apb2rstrSpec > ; # [doc = "TIM1 reset\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tim1rst { # [doc = "1: Reset the selected module"] Reset = 1 , } impl From < Tim1rst > for bool { # [inline (always)] fn from (variant : Tim1rst) -> Self { variant as u8 != 0 } } # [doc = "Field `TIM1RST` reader - TIM1 reset"] pub type Tim1rstR = crate :: BitReader < Tim1rst > ; impl Tim1rstR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Tim1rst > { match self . bits { true => Some (Tim1rst :: Reset) , _ => None , } } # [doc = "Reset the selected module"] # [inline (always)] pub fn is_reset (& self) -> bool { * self == Tim1rst :: Reset } } # [doc = "Field `TIM1RST` writer - TIM1 reset"] pub type Tim1rstW < 'a , REG > = crate :: BitWriter < 'a , REG , Tim1rst > ; impl < 'a , REG > Tim1rstW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Reset the selected module"] # [inline (always)] pub fn reset (self) -> & 'a mut crate :: W < REG > { self . variant (Tim1rst :: Reset) } } # [doc = "Field `TIM8RST` reader - TIM8 reset"] pub use Tim1rstR as Tim8rstR ; # [doc = "Field `TIM8RST` writer - TIM8 reset"] pub use Tim1rstW as Tim8rstW ; # [doc = "Field `USART1RST` reader - USART1 reset"] pub use Tim1rstR as Usart1rstR ; # [doc = "Field `USART1RST` writer - USART1 reset"] pub use Tim1rstW as Usart1rstW ; # [doc = "Field `USART6RST` reader - USART6 reset"] pub use Tim1rstR as Usart6rstR ; # [doc = "Field `USART6RST` writer - USART6 reset"] pub use Tim1rstW as Usart6rstW ; # [doc = "Field `ADCRST` reader - ADC interface reset (common to all ADCs)"] pub use Tim1rstR as AdcrstR ; # [doc = "Field `ADCRST` writer - ADC interface reset (common to all ADCs)"] pub use Tim1rstW as AdcrstW ; # [doc = "Field `SDIORST` reader - SDIO reset"] pub use Tim1rstR as SdiorstR ; # [doc = "Field `SDIORST` writer - SDIO reset"] pub use Tim1rstW as SdiorstW ; # [doc = "Field `SPI1RST` reader - SPI 1 reset"] pub use Tim1rstR as Spi1rstR ; # [doc = "Field `SPI1RST` writer - SPI 1 reset"] pub use Tim1rstW as Spi1rstW ; # [doc = "Field `SYSCFGRST` reader - System configuration controller reset"] pub use Tim1rstR as SyscfgrstR ; # [doc = "Field `SYSCFGRST` writer - System configuration controller reset"] pub use Tim1rstW as SyscfgrstW ; # [doc = "Field `TIM9RST` reader - TIM9 reset"] pub use Tim1rstR as Tim9rstR ; # [doc = "Field `TIM9RST` writer - TIM9 reset"] pub use Tim1rstW as Tim9rstW ; # [doc = "Field `TIM10RST` reader - TIM10 reset"] pub use Tim1rstR as Tim10rstR ; # [doc = "Field `TIM10RST` writer - TIM10 reset"] pub use Tim1rstW as Tim10rstW ; # [doc = "Field `TIM11RST` reader - TIM11 reset"] pub use Tim1rstR as Tim11rstR ; # [doc = "Field `TIM11RST` writer - TIM11 reset"] pub use Tim1rstW as Tim11rstW ; impl R { # [doc = "Bit 0 - TIM1 reset"] # [inline (always)] pub fn tim1rst (& self) -> Tim1rstR { Tim1rstR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - TIM8 reset"] # [inline (always)] pub fn tim8rst (& self) -> Tim8rstR { Tim8rstR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 4 - USART1 reset"] # [inline (always)] pub fn usart1rst (& self) -> Usart1rstR { Usart1rstR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - USART6 reset"] # [inline (always)] pub fn usart6rst (& self) -> Usart6rstR { Usart6rstR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 8 - ADC interface reset (common to all ADCs)"] # [inline (always)] pub fn adcrst (& self) -> AdcrstR { AdcrstR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 11 - SDIO reset"] # [inline (always)] pub fn sdiorst (& self) -> SdiorstR { SdiorstR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - SPI 1 reset"] # [inline (always)] pub fn spi1rst (& self) -> Spi1rstR { Spi1rstR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 14 - System configuration controller reset"] # [inline (always)] pub fn syscfgrst (& self) -> SyscfgrstR { SyscfgrstR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 16 - TIM9 reset"] # [inline (always)] pub fn tim9rst (& self) -> Tim9rstR { Tim9rstR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - TIM10 reset"] # [inline (always)] pub fn tim10rst (& self) -> Tim10rstR { Tim10rstR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - TIM11 reset"] # [inline (always)] pub fn tim11rst (& self) -> Tim11rstR { Tim11rstR :: new (((self . bits >> 18) & 1) != 0) } } impl W { # [doc = "Bit 0 - TIM1 reset"] # [inline (always)] pub fn tim1rst (& mut self) -> Tim1rstW < Apb2rstrSpec > { Tim1rstW :: new (self , 0) } # [doc = "Bit 1 - TIM8 reset"] # [inline (always)] pub fn tim8rst (& mut self) -> Tim8rstW < Apb2rstrSpec > { Tim8rstW :: new (self , 1) } # [doc = "Bit 4 - USART1 reset"] # [inline (always)] pub fn usart1rst (& mut self) -> Usart1rstW < Apb2rstrSpec > { Usart1rstW :: new (self , 4) } # [doc = "Bit 5 - USART6 reset"] # [inline (always)] pub fn usart6rst (& mut self) -> Usart6rstW < Apb2rstrSpec > { Usart6rstW :: new (self , 5) } # [doc = "Bit 8 - ADC interface reset (common to all ADCs)"] # [inline (always)] pub fn adcrst (& mut self) -> AdcrstW < Apb2rstrSpec > { AdcrstW :: new (self , 8) } # [doc = "Bit 11 - SDIO reset"] # [inline (always)] pub fn sdiorst (& mut self) -> SdiorstW < Apb2rstrSpec > { SdiorstW :: new (self , 11) } # [doc = "Bit 12 - SPI 1 reset"] # [inline (always)] pub fn spi1rst (& mut self) -> Spi1rstW < Apb2rstrSpec > { Spi1rstW :: new (self , 12) } # [doc = "Bit 14 - System configuration controller reset"] # [inline (always)] pub fn syscfgrst (& mut self) -> SyscfgrstW < Apb2rstrSpec > { SyscfgrstW :: new (self , 14) } # [doc = "Bit 16 - TIM9 reset"] # [inline (always)] pub fn tim9rst (& mut self) -> Tim9rstW < Apb2rstrSpec > { Tim9rstW :: new (self , 16) } # [doc = "Bit 17 - TIM10 reset"] # [inline (always)] pub fn tim10rst (& mut self) -> Tim10rstW < Apb2rstrSpec > { Tim10rstW :: new (self , 17) } # [doc = "Bit 18 - TIM11 reset"] # [inline (always)] pub fn tim11rst (& mut self) -> Tim11rstW < Apb2rstrSpec > { Tim11rstW :: new (self , 18) } } # [doc = "APB2 peripheral reset register\n\nYou can [`read`](crate::Reg::read) this register and get [`apb2rstr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb2rstr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Apb2rstrSpec ; impl crate :: RegisterSpec for Apb2rstrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`apb2rstr::R`](R) reader structure"] impl crate :: Readable for Apb2rstrSpec { } # [doc = "`write(|w| ..)` method takes [`apb2rstr::W`](W) writer structure"] impl crate :: Writable for Apb2rstrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets APB2RSTR to value 0"] impl crate :: Resettable for Apb2rstrSpec { }