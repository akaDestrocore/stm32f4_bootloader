# [doc = "Register `AHB3RSTR` reader"] pub type R = crate :: R < Ahb3rstrSpec > ; # [doc = "Register `AHB3RSTR` writer"] pub type W = crate :: W < Ahb3rstrSpec > ; # [doc = "Flexible static memory controller module reset\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Fsmcrst { # [doc = "1: Reset the selected module"] Reset = 1 , } impl From < Fsmcrst > for bool { # [inline (always)] fn from (variant : Fsmcrst) -> Self { variant as u8 != 0 } } # [doc = "Field `FSMCRST` reader - Flexible static memory controller module reset"] pub type FsmcrstR = crate :: BitReader < Fsmcrst > ; impl FsmcrstR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Fsmcrst > { match self . bits { true => Some (Fsmcrst :: Reset) , _ => None , } } # [doc = "Reset the selected module"] # [inline (always)] pub fn is_reset (& self) -> bool { * self == Fsmcrst :: Reset } } # [doc = "Field `FSMCRST` writer - Flexible static memory controller module reset"] pub type FsmcrstW < 'a , REG > = crate :: BitWriter < 'a , REG , Fsmcrst > ; impl < 'a , REG > FsmcrstW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Reset the selected module"] # [inline (always)] pub fn reset (self) -> & 'a mut crate :: W < REG > { self . variant (Fsmcrst :: Reset) } } impl R { # [doc = "Bit 0 - Flexible static memory controller module reset"] # [inline (always)] pub fn fsmcrst (& self) -> FsmcrstR { FsmcrstR :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Flexible static memory controller module reset"] # [inline (always)] pub fn fsmcrst (& mut self) -> FsmcrstW < Ahb3rstrSpec > { FsmcrstW :: new (self , 0) } } # [doc = "AHB3 peripheral reset register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahb3rstr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahb3rstr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ahb3rstrSpec ; impl crate :: RegisterSpec for Ahb3rstrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ahb3rstr::R`](R) reader structure"] impl crate :: Readable for Ahb3rstrSpec { } # [doc = "`write(|w| ..)` method takes [`ahb3rstr::W`](W) writer structure"] impl crate :: Writable for Ahb3rstrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets AHB3RSTR to value 0"] impl crate :: Resettable for Ahb3rstrSpec { }