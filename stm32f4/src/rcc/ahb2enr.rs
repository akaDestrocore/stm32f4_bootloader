# [doc = "Register `AHB2ENR` reader"] pub type R = crate :: R < Ahb2enrSpec > ; # [doc = "Register `AHB2ENR` writer"] pub type W = crate :: W < Ahb2enrSpec > ; # [doc = "Camera interface enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Dcmien { # [doc = "0: The selected clock is disabled"] Disabled = 0 , # [doc = "1: The selected clock is enabled"] Enabled = 1 , } impl From < Dcmien > for bool { # [inline (always)] fn from (variant : Dcmien) -> Self { variant as u8 != 0 } } # [doc = "Field `DCMIEN` reader - Camera interface enable"] pub type DcmienR = crate :: BitReader < Dcmien > ; impl DcmienR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Dcmien { match self . bits { false => Dcmien :: Disabled , true => Dcmien :: Enabled , } } # [doc = "The selected clock is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Dcmien :: Disabled } # [doc = "The selected clock is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Dcmien :: Enabled } } # [doc = "Field `DCMIEN` writer - Camera interface enable"] pub type DcmienW < 'a , REG > = crate :: BitWriter < 'a , REG , Dcmien > ; impl < 'a , REG > DcmienW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "The selected clock is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Dcmien :: Disabled) } # [doc = "The selected clock is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Dcmien :: Enabled) } } # [doc = "Field `RNGEN` reader - Random number generator clock enable"] pub use DcmienR as RngenR ; # [doc = "Field `RNGEN` writer - Random number generator clock enable"] pub use DcmienW as RngenW ; # [doc = "Field `OTGFSEN` reader - USB OTG FS clock enable"] pub use DcmienR as OtgfsenR ; # [doc = "Field `OTGFSEN` writer - USB OTG FS clock enable"] pub use DcmienW as OtgfsenW ; impl R { # [doc = "Bit 0 - Camera interface enable"] # [inline (always)] pub fn dcmien (& self) -> DcmienR { DcmienR :: new ((self . bits & 1) != 0) } # [doc = "Bit 6 - Random number generator clock enable"] # [inline (always)] pub fn rngen (& self) -> RngenR { RngenR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - USB OTG FS clock enable"] # [inline (always)] pub fn otgfsen (& self) -> OtgfsenR { OtgfsenR :: new (((self . bits >> 7) & 1) != 0) } } impl W { # [doc = "Bit 0 - Camera interface enable"] # [inline (always)] pub fn dcmien (& mut self) -> DcmienW < Ahb2enrSpec > { DcmienW :: new (self , 0) } # [doc = "Bit 6 - Random number generator clock enable"] # [inline (always)] pub fn rngen (& mut self) -> RngenW < Ahb2enrSpec > { RngenW :: new (self , 6) } # [doc = "Bit 7 - USB OTG FS clock enable"] # [inline (always)] pub fn otgfsen (& mut self) -> OtgfsenW < Ahb2enrSpec > { OtgfsenW :: new (self , 7) } } # [doc = "AHB2 peripheral clock enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahb2enr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahb2enr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ahb2enrSpec ; impl crate :: RegisterSpec for Ahb2enrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ahb2enr::R`](R) reader structure"] impl crate :: Readable for Ahb2enrSpec { } # [doc = "`write(|w| ..)` method takes [`ahb2enr::W`](W) writer structure"] impl crate :: Writable for Ahb2enrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets AHB2ENR to value 0"] impl crate :: Resettable for Ahb2enrSpec { }