# [doc = "Register `PLLCFGR` reader"] pub type R = crate :: R < PllcfgrSpec > ; # [doc = "Register `PLLCFGR` writer"] pub type W = crate :: W < PllcfgrSpec > ; # [doc = "Field `PLLM` reader - Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock"] pub type PllmR = crate :: FieldReader ; # [doc = "Field `PLLM` writer - Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock"] pub type PllmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 6 > ; # [doc = "Field `PLLN` reader - Main PLL (PLL) multiplication factor for VCO"] pub type PllnR = crate :: FieldReader < u16 > ; # [doc = "Field `PLLN` writer - Main PLL (PLL) multiplication factor for VCO"] pub type PllnW < 'a , REG > = crate :: FieldWriter < 'a , REG , 9 , u16 > ; # [doc = "Main PLL (PLL) division factor for main system clock\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Pllp { # [doc = "0: PLLP=2"] Div2 = 0 , # [doc = "1: PLLP=4"] Div4 = 1 , # [doc = "2: PLLP=6"] Div6 = 2 , # [doc = "3: PLLP=8"] Div8 = 3 , } impl From < Pllp > for u8 { # [inline (always)] fn from (variant : Pllp) -> Self { variant as _ } } impl crate :: FieldSpec for Pllp { type Ux = u8 ; } impl crate :: IsEnum for Pllp { } # [doc = "Field `PLLP` reader - Main PLL (PLL) division factor for main system clock"] pub type PllpR = crate :: FieldReader < Pllp > ; impl PllpR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Pllp { match self . bits { 0 => Pllp :: Div2 , 1 => Pllp :: Div4 , 2 => Pllp :: Div6 , 3 => Pllp :: Div8 , _ => unreachable ! () , } } # [doc = "PLLP=2"] # [inline (always)] pub fn is_div2 (& self) -> bool { * self == Pllp :: Div2 } # [doc = "PLLP=4"] # [inline (always)] pub fn is_div4 (& self) -> bool { * self == Pllp :: Div4 } # [doc = "PLLP=6"] # [inline (always)] pub fn is_div6 (& self) -> bool { * self == Pllp :: Div6 } # [doc = "PLLP=8"] # [inline (always)] pub fn is_div8 (& self) -> bool { * self == Pllp :: Div8 } } # [doc = "Field `PLLP` writer - Main PLL (PLL) division factor for main system clock"] pub type PllpW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , Pllp , crate :: Safe > ; impl < 'a , REG > PllpW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "PLLP=2"] # [inline (always)] pub fn div2 (self) -> & 'a mut crate :: W < REG > { self . variant (Pllp :: Div2) } # [doc = "PLLP=4"] # [inline (always)] pub fn div4 (self) -> & 'a mut crate :: W < REG > { self . variant (Pllp :: Div4) } # [doc = "PLLP=6"] # [inline (always)] pub fn div6 (self) -> & 'a mut crate :: W < REG > { self . variant (Pllp :: Div6) } # [doc = "PLLP=8"] # [inline (always)] pub fn div8 (self) -> & 'a mut crate :: W < REG > { self . variant (Pllp :: Div8) } } # [doc = "Main PLL(PLL) and audio PLL (PLLI2S) entry clock source\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Pllsrc { # [doc = "0: HSI clock selected as PLL and PLLI2S clock entry"] Hsi = 0 , # [doc = "1: HSE oscillator clock selected as PLL and PLLI2S clock entry"] Hse = 1 , } impl From < Pllsrc > for bool { # [inline (always)] fn from (variant : Pllsrc) -> Self { variant as u8 != 0 } } # [doc = "Field `PLLSRC` reader - Main PLL(PLL) and audio PLL (PLLI2S) entry clock source"] pub type PllsrcR = crate :: BitReader < Pllsrc > ; impl PllsrcR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Pllsrc { match self . bits { false => Pllsrc :: Hsi , true => Pllsrc :: Hse , } } # [doc = "HSI clock selected as PLL and PLLI2S clock entry"] # [inline (always)] pub fn is_hsi (& self) -> bool { * self == Pllsrc :: Hsi } # [doc = "HSE oscillator clock selected as PLL and PLLI2S clock entry"] # [inline (always)] pub fn is_hse (& self) -> bool { * self == Pllsrc :: Hse } } # [doc = "Field `PLLSRC` writer - Main PLL(PLL) and audio PLL (PLLI2S) entry clock source"] pub type PllsrcW < 'a , REG > = crate :: BitWriter < 'a , REG , Pllsrc > ; impl < 'a , REG > PllsrcW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "HSI clock selected as PLL and PLLI2S clock entry"] # [inline (always)] pub fn hsi (self) -> & 'a mut crate :: W < REG > { self . variant (Pllsrc :: Hsi) } # [doc = "HSE oscillator clock selected as PLL and PLLI2S clock entry"] # [inline (always)] pub fn hse (self) -> & 'a mut crate :: W < REG > { self . variant (Pllsrc :: Hse) } } # [doc = "Field `PLLQ` reader - Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks"] pub type PllqR = crate :: FieldReader ; # [doc = "Field `PLLQ` writer - Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks"] pub type PllqW < 'a , REG > = crate :: FieldWriter < 'a , REG , 4 > ; impl R { # [doc = "Bits 0:5 - Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock"] # [inline (always)] pub fn pllm (& self) -> PllmR { PllmR :: new ((self . bits & 0x3f) as u8) } # [doc = "Bits 6:14 - Main PLL (PLL) multiplication factor for VCO"] # [inline (always)] pub fn plln (& self) -> PllnR { PllnR :: new (((self . bits >> 6) & 0x01ff) as u16) } # [doc = "Bits 16:17 - Main PLL (PLL) division factor for main system clock"] # [inline (always)] pub fn pllp (& self) -> PllpR { PllpR :: new (((self . bits >> 16) & 3) as u8) } # [doc = "Bit 22 - Main PLL(PLL) and audio PLL (PLLI2S) entry clock source"] # [inline (always)] pub fn pllsrc (& self) -> PllsrcR { PllsrcR :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bits 24:27 - Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks"] # [inline (always)] pub fn pllq (& self) -> PllqR { PllqR :: new (((self . bits >> 24) & 0x0f) as u8) } } impl W { # [doc = "Bits 0:5 - Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock"] # [inline (always)] pub fn pllm (& mut self) -> PllmW < PllcfgrSpec > { PllmW :: new (self , 0) } # [doc = "Bits 6:14 - Main PLL (PLL) multiplication factor for VCO"] # [inline (always)] pub fn plln (& mut self) -> PllnW < PllcfgrSpec > { PllnW :: new (self , 6) } # [doc = "Bits 16:17 - Main PLL (PLL) division factor for main system clock"] # [inline (always)] pub fn pllp (& mut self) -> PllpW < PllcfgrSpec > { PllpW :: new (self , 16) } # [doc = "Bit 22 - Main PLL(PLL) and audio PLL (PLLI2S) entry clock source"] # [inline (always)] pub fn pllsrc (& mut self) -> PllsrcW < PllcfgrSpec > { PllsrcW :: new (self , 22) } # [doc = "Bits 24:27 - Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks"] # [inline (always)] pub fn pllq (& mut self) -> PllqW < PllcfgrSpec > { PllqW :: new (self , 24) } } # [doc = "PLL configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`pllcfgr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pllcfgr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PllcfgrSpec ; impl crate :: RegisterSpec for PllcfgrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`pllcfgr::R`](R) reader structure"] impl crate :: Readable for PllcfgrSpec { } # [doc = "`write(|w| ..)` method takes [`pllcfgr::W`](W) writer structure"] impl crate :: Writable for PllcfgrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets PLLCFGR to value 0x2400_3010"] impl crate :: Resettable for PllcfgrSpec { const RESET_VALUE : u32 = 0x2400_3010 ; }