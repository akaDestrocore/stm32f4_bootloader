# [doc = "Register `SDRTR` reader"] pub type R = crate :: R < SdrtrSpec > ; # [doc = "Register `SDRTR` writer"] pub type W = crate :: W < SdrtrSpec > ; # [doc = "Field `CRE` writer - Clear Refresh error flag"] pub type CreW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `COUNT` reader - Refresh Timer Count"] pub type CountR = crate :: FieldReader < u16 > ; # [doc = "Field `COUNT` writer - Refresh Timer Count"] pub type CountW < 'a , REG > = crate :: FieldWriter < 'a , REG , 13 , u16 > ; # [doc = "Field `REIE` reader - RES Interrupt Enable"] pub type ReieR = crate :: BitReader ; # [doc = "Field `REIE` writer - RES Interrupt Enable"] pub type ReieW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R { # [doc = "Bits 1:13 - Refresh Timer Count"] # [inline (always)] pub fn count (& self) -> CountR { CountR :: new (((self . bits >> 1) & 0x1fff) as u16) } # [doc = "Bit 14 - RES Interrupt Enable"] # [inline (always)] pub fn reie (& self) -> ReieR { ReieR :: new (((self . bits >> 14) & 1) != 0) } } impl W { # [doc = "Bit 0 - Clear Refresh error flag"] # [inline (always)] pub fn cre (& mut self) -> CreW < SdrtrSpec > { CreW :: new (self , 0) } # [doc = "Bits 1:13 - Refresh Timer Count"] # [inline (always)] pub fn count (& mut self) -> CountW < SdrtrSpec > { CountW :: new (self , 1) } # [doc = "Bit 14 - RES Interrupt Enable"] # [inline (always)] pub fn reie (& mut self) -> ReieW < SdrtrSpec > { ReieW :: new (self , 14) } } # [doc = "SDRAM Refresh Timer register\n\nYou can [`read`](crate::Reg::read) this register and get [`sdrtr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sdrtr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct SdrtrSpec ; impl crate :: RegisterSpec for SdrtrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`sdrtr::R`](R) reader structure"] impl crate :: Readable for SdrtrSpec { } # [doc = "`write(|w| ..)` method takes [`sdrtr::W`](W) writer structure"] impl crate :: Writable for SdrtrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets SDRTR to value 0"] impl crate :: Resettable for SdrtrSpec { }