# [doc = "Register `PATT2` reader"] pub type R = crate :: R < Patt2Spec > ; # [doc = "Register `PATT2` writer"] pub type W = crate :: W < Patt2Spec > ; # [doc = "Field `ATTSET` reader - ATTSETx"] pub type AttsetR = crate :: FieldReader ; # [doc = "Field `ATTSET` writer - ATTSETx"] pub type AttsetW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; # [doc = "Field `ATTWAIT` reader - ATTWAITx"] pub type AttwaitR = crate :: FieldReader ; # [doc = "Field `ATTWAIT` writer - ATTWAITx"] pub type AttwaitW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; # [doc = "Field `ATTHOLD` reader - ATTHOLDx"] pub type AttholdR = crate :: FieldReader ; # [doc = "Field `ATTHOLD` writer - ATTHOLDx"] pub type AttholdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; # [doc = "Field `ATTHIZ` reader - ATTHIZx"] pub type AtthizR = crate :: FieldReader ; # [doc = "Field `ATTHIZ` writer - ATTHIZx"] pub type AtthizW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R { # [doc = "Bits 0:7 - ATTSETx"] # [inline (always)] pub fn attset (& self) -> AttsetR { AttsetR :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - ATTWAITx"] # [inline (always)] pub fn attwait (& self) -> AttwaitR { AttwaitR :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:23 - ATTHOLDx"] # [inline (always)] pub fn atthold (& self) -> AttholdR { AttholdR :: new (((self . bits >> 16) & 0xff) as u8) } # [doc = "Bits 24:31 - ATTHIZx"] # [inline (always)] pub fn atthiz (& self) -> AtthizR { AtthizR :: new (((self . bits >> 24) & 0xff) as u8) } } impl W { # [doc = "Bits 0:7 - ATTSETx"] # [inline (always)] pub fn attset (& mut self) -> AttsetW < Patt2Spec > { AttsetW :: new (self , 0) } # [doc = "Bits 8:15 - ATTWAITx"] # [inline (always)] pub fn attwait (& mut self) -> AttwaitW < Patt2Spec > { AttwaitW :: new (self , 8) } # [doc = "Bits 16:23 - ATTHOLDx"] # [inline (always)] pub fn atthold (& mut self) -> AttholdW < Patt2Spec > { AttholdW :: new (self , 16) } # [doc = "Bits 24:31 - ATTHIZx"] # [inline (always)] pub fn atthiz (& mut self) -> AtthizW < Patt2Spec > { AtthizW :: new (self , 24) } } # [doc = "Attribute memory space timing register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`patt2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`patt2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Patt2Spec ; impl crate :: RegisterSpec for Patt2Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`patt2::R`](R) reader structure"] impl crate :: Readable for Patt2Spec { } # [doc = "`write(|w| ..)` method takes [`patt2::W`](W) writer structure"] impl crate :: Writable for Patt2Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets PATT2 to value 0xfcfc_fcfc"] impl crate :: Resettable for Patt2Spec { const RESET_VALUE : u32 = 0xfcfc_fcfc ; }