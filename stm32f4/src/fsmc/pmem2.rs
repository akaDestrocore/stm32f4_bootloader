# [doc = "Register `PMEM2` reader"] pub type R = crate :: R < Pmem2Spec > ; # [doc = "Register `PMEM2` writer"] pub type W = crate :: W < Pmem2Spec > ; # [doc = "Field `MEMSET` reader - MEMSETx"] pub type MemsetR = crate :: FieldReader ; # [doc = "Field `MEMSET` writer - MEMSETx"] pub type MemsetW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; # [doc = "Field `MEMWAIT` reader - MEMWAITx"] pub type MemwaitR = crate :: FieldReader ; # [doc = "Field `MEMWAIT` writer - MEMWAITx"] pub type MemwaitW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; # [doc = "Field `MEMHOLD` reader - MEMHOLDx"] pub type MemholdR = crate :: FieldReader ; # [doc = "Field `MEMHOLD` writer - MEMHOLDx"] pub type MemholdW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; # [doc = "Field `MEMHIZ` reader - MEMHIZx"] pub type MemhizR = crate :: FieldReader ; # [doc = "Field `MEMHIZ` writer - MEMHIZx"] pub type MemhizW < 'a , REG > = crate :: FieldWriter < 'a , REG , 8 > ; impl R { # [doc = "Bits 0:7 - MEMSETx"] # [inline (always)] pub fn memset (& self) -> MemsetR { MemsetR :: new ((self . bits & 0xff) as u8) } # [doc = "Bits 8:15 - MEMWAITx"] # [inline (always)] pub fn memwait (& self) -> MemwaitR { MemwaitR :: new (((self . bits >> 8) & 0xff) as u8) } # [doc = "Bits 16:23 - MEMHOLDx"] # [inline (always)] pub fn memhold (& self) -> MemholdR { MemholdR :: new (((self . bits >> 16) & 0xff) as u8) } # [doc = "Bits 24:31 - MEMHIZx"] # [inline (always)] pub fn memhiz (& self) -> MemhizR { MemhizR :: new (((self . bits >> 24) & 0xff) as u8) } } impl W { # [doc = "Bits 0:7 - MEMSETx"] # [inline (always)] pub fn memset (& mut self) -> MemsetW < Pmem2Spec > { MemsetW :: new (self , 0) } # [doc = "Bits 8:15 - MEMWAITx"] # [inline (always)] pub fn memwait (& mut self) -> MemwaitW < Pmem2Spec > { MemwaitW :: new (self , 8) } # [doc = "Bits 16:23 - MEMHOLDx"] # [inline (always)] pub fn memhold (& mut self) -> MemholdW < Pmem2Spec > { MemholdW :: new (self , 16) } # [doc = "Bits 24:31 - MEMHIZx"] # [inline (always)] pub fn memhiz (& mut self) -> MemhizW < Pmem2Spec > { MemhizW :: new (self , 24) } } # [doc = "Common memory space timing register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`pmem2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pmem2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Pmem2Spec ; impl crate :: RegisterSpec for Pmem2Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`pmem2::R`](R) reader structure"] impl crate :: Readable for Pmem2Spec { } # [doc = "`write(|w| ..)` method takes [`pmem2::W`](W) writer structure"] impl crate :: Writable for Pmem2Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets PMEM2 to value 0xfcfc_fcfc"] impl crate :: Resettable for Pmem2Spec { const RESET_VALUE : u32 = 0xfcfc_fcfc ; }