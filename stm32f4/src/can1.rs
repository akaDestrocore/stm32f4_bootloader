# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { mcr : Mcr , msr : Msr , tsr : Tsr , rfr : [Rfr ; 2] , ier : Ier , esr : Esr , btr : Btr , _reserved7 : [u8 ; 0x0160] , tx : [Tx ; 3] , rx : [Rx ; 2] , _reserved9 : [u8 ; 0x30] , fmr : Fmr , fm1r : Fm1r , _reserved11 : [u8 ; 0x04] , fs1r : Fs1r , _reserved12 : [u8 ; 0x04] , ffa1r : Ffa1r , _reserved13 : [u8 ; 0x04] , fa1r : Fa1r , _reserved14 : [u8 ; 0x20] , fb : [Fb ; 28] , } impl RegisterBlock { # [doc = "0x00 - master control register"] # [inline (always)] pub const fn mcr (& self) -> & Mcr { & self . mcr } # [doc = "0x04 - master status register"] # [inline (always)] pub const fn msr (& self) -> & Msr { & self . msr } # [doc = "0x08 - transmit status register"] # [inline (always)] pub const fn tsr (& self) -> & Tsr { & self . tsr } # [doc = "0x0c..0x14 - receive FIFO %s register"] # [inline (always)] pub const fn rfr (& self , n : usize) -> & Rfr { & self . rfr [n] } # [doc = "Iterator for array of:"] # [doc = "0x0c..0x14 - receive FIFO %s register"] # [inline (always)] pub fn rfr_iter (& self) -> impl Iterator < Item = & Rfr > { self . rfr . iter () } # [doc = "0x0c - receive FIFO 0 register"] # [inline (always)] pub const fn rf0r (& self) -> & Rfr { self . rfr (0) } # [doc = "0x10 - receive FIFO 1 register"] # [inline (always)] pub const fn rf1r (& self) -> & Rfr { self . rfr (1) } # [doc = "0x14 - interrupt enable register"] # [inline (always)] pub const fn ier (& self) -> & Ier { & self . ier } # [doc = "0x18 - interrupt enable register"] # [inline (always)] pub const fn esr (& self) -> & Esr { & self . esr } # [doc = "0x1c - bit timing register"] # [inline (always)] pub const fn btr (& self) -> & Btr { & self . btr } # [doc = "0x180..0x1b0 - CAN Transmit cluster"] # [inline (always)] pub const fn tx (& self , n : usize) -> & Tx { & self . tx [n] } # [doc = "Iterator for array of:"] # [doc = "0x180..0x1b0 - CAN Transmit cluster"] # [inline (always)] pub fn tx_iter (& self) -> impl Iterator < Item = & Tx > { self . tx . iter () } # [doc = "0x1b0..0x1d0 - CAN Receive cluster"] # [inline (always)] pub const fn rx (& self , n : usize) -> & Rx { & self . rx [n] } # [doc = "Iterator for array of:"] # [doc = "0x1b0..0x1d0 - CAN Receive cluster"] # [inline (always)] pub fn rx_iter (& self) -> impl Iterator < Item = & Rx > { self . rx . iter () } # [doc = "0x200 - filter master register"] # [inline (always)] pub const fn fmr (& self) -> & Fmr { & self . fmr } # [doc = "0x204 - filter mode register"] # [inline (always)] pub const fn fm1r (& self) -> & Fm1r { & self . fm1r } # [doc = "0x20c - filter scale register"] # [inline (always)] pub const fn fs1r (& self) -> & Fs1r { & self . fs1r } # [doc = "0x214 - filter FIFO assignment register"] # [inline (always)] pub const fn ffa1r (& self) -> & Ffa1r { & self . ffa1r } # [doc = "0x21c - filter activation register"] # [inline (always)] pub const fn fa1r (& self) -> & Fa1r { & self . fa1r } # [doc = "0x240..0x320 - CAN Filter Bank cluster"] # [inline (always)] pub const fn fb (& self , n : usize) -> & Fb { & self . fb [n] } # [doc = "Iterator for array of:"] # [doc = "0x240..0x320 - CAN Filter Bank cluster"] # [inline (always)] pub fn fb_iter (& self) -> impl Iterator < Item = & Fb > { self . fb . iter () } } # [doc = "MCR (rw) register accessor: master control register\n\nYou can [`read`](crate::Reg::read) this register and get [`mcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`mcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mcr`] module"] # [doc (alias = "MCR")] pub type Mcr = crate :: Reg < mcr :: McrSpec > ; # [doc = "master control register"] pub mod mcr ; # [doc = "MSR (rw) register accessor: master status register\n\nYou can [`read`](crate::Reg::read) this register and get [`msr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`msr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@msr`] module"] # [doc (alias = "MSR")] pub type Msr = crate :: Reg < msr :: MsrSpec > ; # [doc = "master status register"] pub mod msr ; # [doc = "TSR (rw) register accessor: transmit status register\n\nYou can [`read`](crate::Reg::read) this register and get [`tsr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tsr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tsr`] module"] # [doc (alias = "TSR")] pub type Tsr = crate :: Reg < tsr :: TsrSpec > ; # [doc = "transmit status register"] pub mod tsr ; # [doc = "RFR (rw) register accessor: receive FIFO %s register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rfr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfr`] module"] # [doc (alias = "RFR")] pub type Rfr = crate :: Reg < rfr :: RfrSpec > ; # [doc = "receive FIFO %s register"] pub mod rfr ; # [doc = "IER (rw) register accessor: interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ier::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ier::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ier`] module"] # [doc (alias = "IER")] pub type Ier = crate :: Reg < ier :: IerSpec > ; # [doc = "interrupt enable register"] pub mod ier ; # [doc = "ESR (rw) register accessor: interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`esr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`esr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@esr`] module"] # [doc (alias = "ESR")] pub type Esr = crate :: Reg < esr :: EsrSpec > ; # [doc = "interrupt enable register"] pub mod esr ; # [doc = "BTR (rw) register accessor: bit timing register\n\nYou can [`read`](crate::Reg::read) this register and get [`btr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`btr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@btr`] module"] # [doc (alias = "BTR")] pub type Btr = crate :: Reg < btr :: BtrSpec > ; # [doc = "bit timing register"] pub mod btr ; # [doc = "CAN Transmit cluster"] pub use self :: tx :: Tx ; # [doc = r"Cluster"] # [doc = "CAN Transmit cluster"] pub mod tx ; # [doc = "CAN Receive cluster"] pub use self :: rx :: Rx ; # [doc = r"Cluster"] # [doc = "CAN Receive cluster"] pub mod rx ; # [doc = "FMR (rw) register accessor: filter master register\n\nYou can [`read`](crate::Reg::read) this register and get [`fmr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fmr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fmr`] module"] # [doc (alias = "FMR")] pub type Fmr = crate :: Reg < fmr :: FmrSpec > ; # [doc = "filter master register"] pub mod fmr ; # [doc = "FM1R (rw) register accessor: filter mode register\n\nYou can [`read`](crate::Reg::read) this register and get [`fm1r::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fm1r::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fm1r`] module"] # [doc (alias = "FM1R")] pub type Fm1r = crate :: Reg < fm1r :: Fm1rSpec > ; # [doc = "filter mode register"] pub mod fm1r ; # [doc = "FS1R (rw) register accessor: filter scale register\n\nYou can [`read`](crate::Reg::read) this register and get [`fs1r::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fs1r::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fs1r`] module"] # [doc (alias = "FS1R")] pub type Fs1r = crate :: Reg < fs1r :: Fs1rSpec > ; # [doc = "filter scale register"] pub mod fs1r ; # [doc = "FFA1R (rw) register accessor: filter FIFO assignment register\n\nYou can [`read`](crate::Reg::read) this register and get [`ffa1r::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ffa1r::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ffa1r`] module"] # [doc (alias = "FFA1R")] pub type Ffa1r = crate :: Reg < ffa1r :: Ffa1rSpec > ; # [doc = "filter FIFO assignment register"] pub mod ffa1r ; # [doc = "FA1R (rw) register accessor: filter activation register\n\nYou can [`read`](crate::Reg::read) this register and get [`fa1r::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fa1r::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fa1r`] module"] # [doc (alias = "FA1R")] pub type Fa1r = crate :: Reg < fa1r :: Fa1rSpec > ; # [doc = "filter activation register"] pub mod fa1r ; # [doc = "CAN Filter Bank cluster"] pub use self :: fb :: Fb ; # [doc = r"Cluster"] # [doc = "CAN Filter Bank cluster"] pub mod fb ;