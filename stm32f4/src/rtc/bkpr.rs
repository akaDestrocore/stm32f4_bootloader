# [doc = "Register `BKP%sR` reader"] pub type R = crate :: R < BkprSpec > ; # [doc = "Register `BKP%sR` writer"] pub type W = crate :: W < BkprSpec > ; # [doc = "Field `BKP` reader - BKP"] pub type BkpR = crate :: FieldReader < u32 > ; # [doc = "Field `BKP` writer - BKP"] pub type BkpW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 , crate :: Safe > ; impl R { # [doc = "Bits 0:31 - BKP"] # [inline (always)] pub fn bkp (& self) -> BkpR { BkpR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - BKP"] # [inline (always)] pub fn bkp (& mut self) -> BkpW < BkprSpec > { BkpW :: new (self , 0) } } # [doc = "backup register\n\nYou can [`read`](crate::Reg::read) this register and get [`bkpr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bkpr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct BkprSpec ; impl crate :: RegisterSpec for BkprSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`bkpr::R`](R) reader structure"] impl crate :: Readable for BkprSpec { } # [doc = "`write(|w| ..)` method takes [`bkpr::W`](W) writer structure"] impl crate :: Writable for BkprSpec { type Safety = crate :: Safe ; } # [doc = "`reset()` method sets BKP%sR to value 0"] impl crate :: Resettable for BkprSpec { }