# [doc = "Register `CALR` reader"] pub type R = crate :: R < CalrSpec > ; # [doc = "Register `CALR` writer"] pub type W = crate :: W < CalrSpec > ; # [doc = "Field `CALM` reader - Calibration minus"] pub type CalmR = crate :: FieldReader < u16 > ; # [doc = "Field `CALM` writer - Calibration minus"] pub type CalmW < 'a , REG > = crate :: FieldWriter < 'a , REG , 9 , u16 , crate :: Safe > ; # [doc = "Use a 16-second calibration cycle period\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Calw16 { # [doc = "1: When CALW16 is set to ‘1’, the 16-second calibration cycle period is selected.This bit must not be set to ‘1’ if CALW8=1"] SixteenSecond = 1 , } impl From < Calw16 > for bool { # [inline (always)] fn from (variant : Calw16) -> Self { variant as u8 != 0 } } # [doc = "Field `CALW16` reader - Use a 16-second calibration cycle period"] pub type Calw16R = crate :: BitReader < Calw16 > ; impl Calw16R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Calw16 > { match self . bits { true => Some (Calw16 :: SixteenSecond) , _ => None , } } # [doc = "When CALW16 is set to ‘1’, the 16-second calibration cycle period is selected.This bit must not be set to ‘1’ if CALW8=1"] # [inline (always)] pub fn is_sixteen_second (& self) -> bool { * self == Calw16 :: SixteenSecond } } # [doc = "Field `CALW16` writer - Use a 16-second calibration cycle period"] pub type Calw16W < 'a , REG > = crate :: BitWriter < 'a , REG , Calw16 > ; impl < 'a , REG > Calw16W < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "When CALW16 is set to ‘1’, the 16-second calibration cycle period is selected.This bit must not be set to ‘1’ if CALW8=1"] # [inline (always)] pub fn sixteen_second (self) -> & 'a mut crate :: W < REG > { self . variant (Calw16 :: SixteenSecond) } } # [doc = "Use an 8-second calibration cycle period\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Calw8 { # [doc = "1: When CALW8 is set to ‘1’, the 8-second calibration cycle period is selected"] EightSecond = 1 , } impl From < Calw8 > for bool { # [inline (always)] fn from (variant : Calw8) -> Self { variant as u8 != 0 } } # [doc = "Field `CALW8` reader - Use an 8-second calibration cycle period"] pub type Calw8R = crate :: BitReader < Calw8 > ; impl Calw8R { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Calw8 > { match self . bits { true => Some (Calw8 :: EightSecond) , _ => None , } } # [doc = "When CALW8 is set to ‘1’, the 8-second calibration cycle period is selected"] # [inline (always)] pub fn is_eight_second (& self) -> bool { * self == Calw8 :: EightSecond } } # [doc = "Field `CALW8` writer - Use an 8-second calibration cycle period"] pub type Calw8W < 'a , REG > = crate :: BitWriter < 'a , REG , Calw8 > ; impl < 'a , REG > Calw8W < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "When CALW8 is set to ‘1’, the 8-second calibration cycle period is selected"] # [inline (always)] pub fn eight_second (self) -> & 'a mut crate :: W < REG > { self . variant (Calw8 :: EightSecond) } } # [doc = "Increase frequency of RTC by 488.5 ppm\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Calp { # [doc = "0: No RTCCLK pulses are added"] NoChange = 0 , # [doc = "1: One RTCCLK pulse is effectively inserted every 2^11 pulses (frequency increased by 488.5 ppm)"] IncreaseFreq = 1 , } impl From < Calp > for bool { # [inline (always)] fn from (variant : Calp) -> Self { variant as u8 != 0 } } # [doc = "Field `CALP` reader - Increase frequency of RTC by 488.5 ppm"] pub type CalpR = crate :: BitReader < Calp > ; impl CalpR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Calp { match self . bits { false => Calp :: NoChange , true => Calp :: IncreaseFreq , } } # [doc = "No RTCCLK pulses are added"] # [inline (always)] pub fn is_no_change (& self) -> bool { * self == Calp :: NoChange } # [doc = "One RTCCLK pulse is effectively inserted every 2^11 pulses (frequency increased by 488.5 ppm)"] # [inline (always)] pub fn is_increase_freq (& self) -> bool { * self == Calp :: IncreaseFreq } } # [doc = "Field `CALP` writer - Increase frequency of RTC by 488.5 ppm"] pub type CalpW < 'a , REG > = crate :: BitWriter < 'a , REG , Calp > ; impl < 'a , REG > CalpW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "No RTCCLK pulses are added"] # [inline (always)] pub fn no_change (self) -> & 'a mut crate :: W < REG > { self . variant (Calp :: NoChange) } # [doc = "One RTCCLK pulse is effectively inserted every 2^11 pulses (frequency increased by 488.5 ppm)"] # [inline (always)] pub fn increase_freq (self) -> & 'a mut crate :: W < REG > { self . variant (Calp :: IncreaseFreq) } } impl R { # [doc = "Bits 0:8 - Calibration minus"] # [inline (always)] pub fn calm (& self) -> CalmR { CalmR :: new ((self . bits & 0x01ff) as u16) } # [doc = "Bit 13 - Use a 16-second calibration cycle period"] # [inline (always)] pub fn calw16 (& self) -> Calw16R { Calw16R :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Use an 8-second calibration cycle period"] # [inline (always)] pub fn calw8 (& self) -> Calw8R { Calw8R :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Increase frequency of RTC by 488.5 ppm"] # [inline (always)] pub fn calp (& self) -> CalpR { CalpR :: new (((self . bits >> 15) & 1) != 0) } } impl W { # [doc = "Bits 0:8 - Calibration minus"] # [inline (always)] pub fn calm (& mut self) -> CalmW < CalrSpec > { CalmW :: new (self , 0) } # [doc = "Bit 13 - Use a 16-second calibration cycle period"] # [inline (always)] pub fn calw16 (& mut self) -> Calw16W < CalrSpec > { Calw16W :: new (self , 13) } # [doc = "Bit 14 - Use an 8-second calibration cycle period"] # [inline (always)] pub fn calw8 (& mut self) -> Calw8W < CalrSpec > { Calw8W :: new (self , 14) } # [doc = "Bit 15 - Increase frequency of RTC by 488.5 ppm"] # [inline (always)] pub fn calp (& mut self) -> CalpW < CalrSpec > { CalpW :: new (self , 15) } } # [doc = "calibration register\n\nYou can [`read`](crate::Reg::read) this register and get [`calr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`calr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CalrSpec ; impl crate :: RegisterSpec for CalrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`calr::R`](R) reader structure"] impl crate :: Readable for CalrSpec { } # [doc = "`write(|w| ..)` method takes [`calr::W`](W) writer structure"] impl crate :: Writable for CalrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CALR to value 0"] impl crate :: Resettable for CalrSpec { }