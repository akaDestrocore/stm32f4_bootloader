# [doc = "Register `MMCRIMR` reader"] pub type R = crate :: R < MmcrimrSpec > ; # [doc = "Register `MMCRIMR` writer"] pub type W = crate :: W < MmcrimrSpec > ; # [doc = "Received frame CRC error mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Rfcem { # [doc = "0: Received-crc-error counter half-full interrupt enabled"] Unmasked = 0 , # [doc = "1: Received-crc-error counter half-full interrupt disabled"] Masked = 1 , } impl From < Rfcem > for bool { # [inline (always)] fn from (variant : Rfcem) -> Self { variant as u8 != 0 } } # [doc = "Field `RFCEM` reader - Received frame CRC error mask"] pub type RfcemR = crate :: BitReader < Rfcem > ; impl RfcemR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Rfcem { match self . bits { false => Rfcem :: Unmasked , true => Rfcem :: Masked , } } # [doc = "Received-crc-error counter half-full interrupt enabled"] # [inline (always)] pub fn is_unmasked (& self) -> bool { * self == Rfcem :: Unmasked } # [doc = "Received-crc-error counter half-full interrupt disabled"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Rfcem :: Masked } } # [doc = "Field `RFCEM` writer - Received frame CRC error mask"] pub type RfcemW < 'a , REG > = crate :: BitWriter < 'a , REG , Rfcem > ; impl < 'a , REG > RfcemW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Received-crc-error counter half-full interrupt enabled"] # [inline (always)] pub fn unmasked (self) -> & 'a mut crate :: W < REG > { self . variant (Rfcem :: Unmasked) } # [doc = "Received-crc-error counter half-full interrupt disabled"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Rfcem :: Masked) } } # [doc = "Received frames alignment error mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Rfaem { # [doc = "0: Received-alignment-error counter half-full interrupt enabled"] Unmasked = 0 , # [doc = "1: Received-alignment-error counter half-full interrupt disabled"] Masked = 1 , } impl From < Rfaem > for bool { # [inline (always)] fn from (variant : Rfaem) -> Self { variant as u8 != 0 } } # [doc = "Field `RFAEM` reader - Received frames alignment error mask"] pub type RfaemR = crate :: BitReader < Rfaem > ; impl RfaemR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Rfaem { match self . bits { false => Rfaem :: Unmasked , true => Rfaem :: Masked , } } # [doc = "Received-alignment-error counter half-full interrupt enabled"] # [inline (always)] pub fn is_unmasked (& self) -> bool { * self == Rfaem :: Unmasked } # [doc = "Received-alignment-error counter half-full interrupt disabled"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Rfaem :: Masked } } # [doc = "Field `RFAEM` writer - Received frames alignment error mask"] pub type RfaemW < 'a , REG > = crate :: BitWriter < 'a , REG , Rfaem > ; impl < 'a , REG > RfaemW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Received-alignment-error counter half-full interrupt enabled"] # [inline (always)] pub fn unmasked (self) -> & 'a mut crate :: W < REG > { self . variant (Rfaem :: Unmasked) } # [doc = "Received-alignment-error counter half-full interrupt disabled"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Rfaem :: Masked) } } # [doc = "Received good Unicast frames mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Rgufm { # [doc = "0: Received-good-unicast counter half-full interrupt enabled"] Unmasked = 0 , # [doc = "1: Received-good-unicast counter half-full interrupt disabled"] Masked = 1 , } impl From < Rgufm > for bool { # [inline (always)] fn from (variant : Rgufm) -> Self { variant as u8 != 0 } } # [doc = "Field `RGUFM` reader - Received good Unicast frames mask"] pub type RgufmR = crate :: BitReader < Rgufm > ; impl RgufmR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Rgufm { match self . bits { false => Rgufm :: Unmasked , true => Rgufm :: Masked , } } # [doc = "Received-good-unicast counter half-full interrupt enabled"] # [inline (always)] pub fn is_unmasked (& self) -> bool { * self == Rgufm :: Unmasked } # [doc = "Received-good-unicast counter half-full interrupt disabled"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Rgufm :: Masked } } # [doc = "Field `RGUFM` writer - Received good Unicast frames mask"] pub type RgufmW < 'a , REG > = crate :: BitWriter < 'a , REG , Rgufm > ; impl < 'a , REG > RgufmW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Received-good-unicast counter half-full interrupt enabled"] # [inline (always)] pub fn unmasked (self) -> & 'a mut crate :: W < REG > { self . variant (Rgufm :: Unmasked) } # [doc = "Received-good-unicast counter half-full interrupt disabled"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Rgufm :: Masked) } } impl R { # [doc = "Bit 5 - Received frame CRC error mask"] # [inline (always)] pub fn rfcem (& self) -> RfcemR { RfcemR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Received frames alignment error mask"] # [inline (always)] pub fn rfaem (& self) -> RfaemR { RfaemR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 17 - Received good Unicast frames mask"] # [inline (always)] pub fn rgufm (& self) -> RgufmR { RgufmR :: new (((self . bits >> 17) & 1) != 0) } } impl W { # [doc = "Bit 5 - Received frame CRC error mask"] # [inline (always)] pub fn rfcem (& mut self) -> RfcemW < MmcrimrSpec > { RfcemW :: new (self , 5) } # [doc = "Bit 6 - Received frames alignment error mask"] # [inline (always)] pub fn rfaem (& mut self) -> RfaemW < MmcrimrSpec > { RfaemW :: new (self , 6) } # [doc = "Bit 17 - Received good Unicast frames mask"] # [inline (always)] pub fn rgufm (& mut self) -> RgufmW < MmcrimrSpec > { RgufmW :: new (self , 17) } } # [doc = "Ethernet MMC receive interrupt mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`mmcrimr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`mmcrimr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MmcrimrSpec ; impl crate :: RegisterSpec for MmcrimrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`mmcrimr::R`](R) reader structure"] impl crate :: Readable for MmcrimrSpec { } # [doc = "`write(|w| ..)` method takes [`mmcrimr::W`](W) writer structure"] impl crate :: Writable for MmcrimrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets MMCRIMR to value 0"] impl crate :: Resettable for MmcrimrSpec { }