# [doc = "Register `MMCTIR` reader"] pub type R = crate :: R < MmctirSpec > ; # [doc = "Field `TGFSCS` reader - Transmitted good frames single collision status"] pub type TgfscsR = crate :: BitReader ; # [doc = "Field `TGFMSCS` reader - Transmitted good frames more than single collision status"] pub type TgfmscsR = crate :: BitReader ; # [doc = "Field `TGFS` reader - Transmitted good frames status"] pub type TgfsR = crate :: BitReader ; impl R { # [doc = "Bit 14 - Transmitted good frames single collision status"] # [inline (always)] pub fn tgfscs (& self) -> TgfscsR { TgfscsR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Transmitted good frames more than single collision status"] # [inline (always)] pub fn tgfmscs (& self) -> TgfmscsR { TgfmscsR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 21 - Transmitted good frames status"] # [inline (always)] pub fn tgfs (& self) -> TgfsR { TgfsR :: new (((self . bits >> 21) & 1) != 0) } } # [doc = "Ethernet MMC transmit interrupt register\n\nYou can [`read`](crate::Reg::read) this register and get [`mmctir::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MmctirSpec ; impl crate :: RegisterSpec for MmctirSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`mmctir::R`](R) reader structure"] impl crate :: Readable for MmctirSpec { } # [doc = "`reset()` method sets MMCTIR to value 0"] impl crate :: Resettable for MmctirSpec { }