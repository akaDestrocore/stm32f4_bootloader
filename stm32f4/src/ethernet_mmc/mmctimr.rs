# [doc = "Register `MMCTIMR` reader"] pub type R = crate :: R < MmctimrSpec > ; # [doc = "Register `MMCTIMR` writer"] pub type W = crate :: W < MmctimrSpec > ; # [doc = "Transmitted good frames single collision mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tgfscm { # [doc = "0: Transmitted-good-single-collision half-full interrupt enabled"] Unmasked = 0 , # [doc = "1: Transmitted-good-single-collision half-full interrupt disabled"] Masked = 1 , } impl From < Tgfscm > for bool { # [inline (always)] fn from (variant : Tgfscm) -> Self { variant as u8 != 0 } } # [doc = "Field `TGFSCM` reader - Transmitted good frames single collision mask"] pub type TgfscmR = crate :: BitReader < Tgfscm > ; impl TgfscmR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Tgfscm { match self . bits { false => Tgfscm :: Unmasked , true => Tgfscm :: Masked , } } # [doc = "Transmitted-good-single-collision half-full interrupt enabled"] # [inline (always)] pub fn is_unmasked (& self) -> bool { * self == Tgfscm :: Unmasked } # [doc = "Transmitted-good-single-collision half-full interrupt disabled"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Tgfscm :: Masked } } # [doc = "Field `TGFSCM` writer - Transmitted good frames single collision mask"] pub type TgfscmW < 'a , REG > = crate :: BitWriter < 'a , REG , Tgfscm > ; impl < 'a , REG > TgfscmW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Transmitted-good-single-collision half-full interrupt enabled"] # [inline (always)] pub fn unmasked (self) -> & 'a mut crate :: W < REG > { self . variant (Tgfscm :: Unmasked) } # [doc = "Transmitted-good-single-collision half-full interrupt disabled"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Tgfscm :: Masked) } } # [doc = "Transmitted good frames more than single collision mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tgfmscm { # [doc = "0: Transmitted-good-multiple-collision half-full interrupt enabled"] Unmasked = 0 , # [doc = "1: Transmitted-good-multiple-collision half-full interrupt disabled"] Masked = 1 , } impl From < Tgfmscm > for bool { # [inline (always)] fn from (variant : Tgfmscm) -> Self { variant as u8 != 0 } } # [doc = "Field `TGFMSCM` reader - Transmitted good frames more than single collision mask"] pub type TgfmscmR = crate :: BitReader < Tgfmscm > ; impl TgfmscmR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Tgfmscm { match self . bits { false => Tgfmscm :: Unmasked , true => Tgfmscm :: Masked , } } # [doc = "Transmitted-good-multiple-collision half-full interrupt enabled"] # [inline (always)] pub fn is_unmasked (& self) -> bool { * self == Tgfmscm :: Unmasked } # [doc = "Transmitted-good-multiple-collision half-full interrupt disabled"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Tgfmscm :: Masked } } # [doc = "Field `TGFMSCM` writer - Transmitted good frames more than single collision mask"] pub type TgfmscmW < 'a , REG > = crate :: BitWriter < 'a , REG , Tgfmscm > ; impl < 'a , REG > TgfmscmW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Transmitted-good-multiple-collision half-full interrupt enabled"] # [inline (always)] pub fn unmasked (self) -> & 'a mut crate :: W < REG > { self . variant (Tgfmscm :: Unmasked) } # [doc = "Transmitted-good-multiple-collision half-full interrupt disabled"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Tgfmscm :: Masked) } } # [doc = "Transmitted good frames mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tgfm { # [doc = "0: Transmitted-good counter half-full interrupt enabled"] Unmasked = 0 , # [doc = "1: Transmitted-good counter half-full interrupt disabled"] Masked = 1 , } impl From < Tgfm > for bool { # [inline (always)] fn from (variant : Tgfm) -> Self { variant as u8 != 0 } } # [doc = "Field `TGFM` reader - Transmitted good frames mask"] pub type TgfmR = crate :: BitReader < Tgfm > ; impl TgfmR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Tgfm { match self . bits { false => Tgfm :: Unmasked , true => Tgfm :: Masked , } } # [doc = "Transmitted-good counter half-full interrupt enabled"] # [inline (always)] pub fn is_unmasked (& self) -> bool { * self == Tgfm :: Unmasked } # [doc = "Transmitted-good counter half-full interrupt disabled"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Tgfm :: Masked } } # [doc = "Field `TGFM` writer - Transmitted good frames mask"] pub type TgfmW < 'a , REG > = crate :: BitWriter < 'a , REG , Tgfm > ; impl < 'a , REG > TgfmW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Transmitted-good counter half-full interrupt enabled"] # [inline (always)] pub fn unmasked (self) -> & 'a mut crate :: W < REG > { self . variant (Tgfm :: Unmasked) } # [doc = "Transmitted-good counter half-full interrupt disabled"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Tgfm :: Masked) } } impl R { # [doc = "Bit 14 - Transmitted good frames single collision mask"] # [inline (always)] pub fn tgfscm (& self) -> TgfscmR { TgfscmR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Transmitted good frames more than single collision mask"] # [inline (always)] pub fn tgfmscm (& self) -> TgfmscmR { TgfmscmR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 21 - Transmitted good frames mask"] # [inline (always)] pub fn tgfm (& self) -> TgfmR { TgfmR :: new (((self . bits >> 21) & 1) != 0) } } impl W { # [doc = "Bit 14 - Transmitted good frames single collision mask"] # [inline (always)] pub fn tgfscm (& mut self) -> TgfscmW < MmctimrSpec > { TgfscmW :: new (self , 14) } # [doc = "Bit 15 - Transmitted good frames more than single collision mask"] # [inline (always)] pub fn tgfmscm (& mut self) -> TgfmscmW < MmctimrSpec > { TgfmscmW :: new (self , 15) } # [doc = "Bit 21 - Transmitted good frames mask"] # [inline (always)] pub fn tgfm (& mut self) -> TgfmW < MmctimrSpec > { TgfmW :: new (self , 21) } } # [doc = "Ethernet MMC transmit interrupt mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`mmctimr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`mmctimr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MmctimrSpec ; impl crate :: RegisterSpec for MmctimrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`mmctimr::R`](R) reader structure"] impl crate :: Readable for MmctimrSpec { } # [doc = "`write(|w| ..)` method takes [`mmctimr::W`](W) writer structure"] impl crate :: Writable for MmctimrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets MMCTIMR to value 0"] impl crate :: Resettable for MmctimrSpec { }