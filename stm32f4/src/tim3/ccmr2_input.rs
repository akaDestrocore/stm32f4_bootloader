# [doc = "Register `CCMR2_Input` reader"] pub type R = crate :: R < Ccmr2InputSpec > ; # [doc = "Register `CCMR2_Input` writer"] pub type W = crate :: W < Ccmr2InputSpec > ; # [doc = "Capture/compare 3 selection\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Cc3s { # [doc = "1: CC3 channel is configured as input, IC3 is mapped on TI3"] Ti3 = 1 , # [doc = "2: CC3 channel is configured as input, IC3 is mapped on TI4"] Ti4 = 2 , # [doc = "3: CC3 channel is configured as input, IC3 is mapped on TRC"] Trc = 3 , } impl From < Cc3s > for u8 { # [inline (always)] fn from (variant : Cc3s) -> Self { variant as _ } } impl crate :: FieldSpec for Cc3s { type Ux = u8 ; } impl crate :: IsEnum for Cc3s { } # [doc = "Field `CC3S` reader - Capture/compare 3 selection"] pub type Cc3sR = crate :: FieldReader < Cc3s > ; impl Cc3sR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Cc3s > { match self . bits { 1 => Some (Cc3s :: Ti3) , 2 => Some (Cc3s :: Ti4) , 3 => Some (Cc3s :: Trc) , _ => None , } } # [doc = "CC3 channel is configured as input, IC3 is mapped on TI3"] # [inline (always)] pub fn is_ti3 (& self) -> bool { * self == Cc3s :: Ti3 } # [doc = "CC3 channel is configured as input, IC3 is mapped on TI4"] # [inline (always)] pub fn is_ti4 (& self) -> bool { * self == Cc3s :: Ti4 } # [doc = "CC3 channel is configured as input, IC3 is mapped on TRC"] # [inline (always)] pub fn is_trc (& self) -> bool { * self == Cc3s :: Trc } } # [doc = "Field `CC3S` writer - Capture/compare 3 selection"] pub type Cc3sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , Cc3s > ; impl < 'a , REG > Cc3sW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "CC3 channel is configured as input, IC3 is mapped on TI3"] # [inline (always)] pub fn ti3 (self) -> & 'a mut crate :: W < REG > { self . variant (Cc3s :: Ti3) } # [doc = "CC3 channel is configured as input, IC3 is mapped on TI4"] # [inline (always)] pub fn ti4 (self) -> & 'a mut crate :: W < REG > { self . variant (Cc3s :: Ti4) } # [doc = "CC3 channel is configured as input, IC3 is mapped on TRC"] # [inline (always)] pub fn trc (self) -> & 'a mut crate :: W < REG > { self . variant (Cc3s :: Trc) } } # [doc = "Input capture %s prescaler"] pub use super :: ccmr1_input :: Icprescaler as Icprescaler ; # [doc = "Field `ICPSC(3-4)` reader - Input capture %s prescaler"] pub use super :: ccmr1_input :: IcpscR as IcpscR ; # [doc = "Field `ICPSC(3-4)` writer - Input capture %s prescaler"] pub use super :: ccmr1_input :: IcpscW as IcpscW ; # [doc = "Input capture %s filter"] pub use super :: ccmr1_input :: Icfilter as Icfilter ; # [doc = "Field `ICF(3-4)` reader - Input capture %s filter"] pub use super :: ccmr1_input :: IcfR as IcfR ; # [doc = "Field `ICF(3-4)` writer - Input capture %s filter"] pub use super :: ccmr1_input :: IcfW as IcfW ; # [doc = "Capture/Compare 4 selection\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Cc4s { # [doc = "1: CC4 channel is configured as input, IC4 is mapped on TI4"] Ti4 = 1 , # [doc = "2: CC4 channel is configured as input, IC4 is mapped on TI3"] Ti3 = 2 , # [doc = "3: CC4 channel is configured as input, IC4 is mapped on TRC"] Trc = 3 , } impl From < Cc4s > for u8 { # [inline (always)] fn from (variant : Cc4s) -> Self { variant as _ } } impl crate :: FieldSpec for Cc4s { type Ux = u8 ; } impl crate :: IsEnum for Cc4s { } # [doc = "Field `CC4S` reader - Capture/Compare 4 selection"] pub type Cc4sR = crate :: FieldReader < Cc4s > ; impl Cc4sR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Cc4s > { match self . bits { 1 => Some (Cc4s :: Ti4) , 2 => Some (Cc4s :: Ti3) , 3 => Some (Cc4s :: Trc) , _ => None , } } # [doc = "CC4 channel is configured as input, IC4 is mapped on TI4"] # [inline (always)] pub fn is_ti4 (& self) -> bool { * self == Cc4s :: Ti4 } # [doc = "CC4 channel is configured as input, IC4 is mapped on TI3"] # [inline (always)] pub fn is_ti3 (& self) -> bool { * self == Cc4s :: Ti3 } # [doc = "CC4 channel is configured as input, IC4 is mapped on TRC"] # [inline (always)] pub fn is_trc (& self) -> bool { * self == Cc4s :: Trc } } # [doc = "Field `CC4S` writer - Capture/Compare 4 selection"] pub type Cc4sW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , Cc4s > ; impl < 'a , REG > Cc4sW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "CC4 channel is configured as input, IC4 is mapped on TI4"] # [inline (always)] pub fn ti4 (self) -> & 'a mut crate :: W < REG > { self . variant (Cc4s :: Ti4) } # [doc = "CC4 channel is configured as input, IC4 is mapped on TI3"] # [inline (always)] pub fn ti3 (self) -> & 'a mut crate :: W < REG > { self . variant (Cc4s :: Ti3) } # [doc = "CC4 channel is configured as input, IC4 is mapped on TRC"] # [inline (always)] pub fn trc (self) -> & 'a mut crate :: W < REG > { self . variant (Cc4s :: Trc) } } impl R { # [doc = "Bits 0:1 - Capture/compare 3 selection"] # [inline (always)] pub fn cc3s (& self) -> Cc3sR { Cc3sR :: new ((self . bits & 3) as u8) } # [doc = "Input capture (3-4) prescaler"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `IC3PSC` field.</div>"] # [inline (always)] pub fn icpsc (& self , n : u8) -> IcpscR { # [allow (clippy :: no_effect)] [() ; 2] [n as usize] ; IcpscR :: new (((self . bits >> (n * 8 + 2)) & 3) as u8) } # [doc = "Iterator for array of:"] # [doc = "Input capture (3-4) prescaler"] # [inline (always)] pub fn icpsc_iter (& self) -> impl Iterator < Item = IcpscR > + '_ { (0 .. 2) . map (move | n | IcpscR :: new (((self . bits >> (n * 8 + 2)) & 3) as u8)) } # [doc = "Bits 2:3 - Input capture 3 prescaler"] # [inline (always)] pub fn ic3psc (& self) -> IcpscR { IcpscR :: new (((self . bits >> 2) & 3) as u8) } # [doc = "Bits 10:11 - Input capture 4 prescaler"] # [inline (always)] pub fn ic4psc (& self) -> IcpscR { IcpscR :: new (((self . bits >> 10) & 3) as u8) } # [doc = "Input capture (3-4) filter"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `IC3F` field.</div>"] # [inline (always)] pub fn icf (& self , n : u8) -> IcfR { # [allow (clippy :: no_effect)] [() ; 2] [n as usize] ; IcfR :: new (((self . bits >> (n * 8 + 4)) & 0x0f) as u8) } # [doc = "Iterator for array of:"] # [doc = "Input capture (3-4) filter"] # [inline (always)] pub fn icf_iter (& self) -> impl Iterator < Item = IcfR > + '_ { (0 .. 2) . map (move | n | IcfR :: new (((self . bits >> (n * 8 + 4)) & 0x0f) as u8)) } # [doc = "Bits 4:7 - Input capture 3 filter"] # [inline (always)] pub fn ic3f (& self) -> IcfR { IcfR :: new (((self . bits >> 4) & 0x0f) as u8) } # [doc = "Bits 12:15 - Input capture 4 filter"] # [inline (always)] pub fn ic4f (& self) -> IcfR { IcfR :: new (((self . bits >> 12) & 0x0f) as u8) } # [doc = "Bits 8:9 - Capture/Compare 4 selection"] # [inline (always)] pub fn cc4s (& self) -> Cc4sR { Cc4sR :: new (((self . bits >> 8) & 3) as u8) } } impl W { # [doc = "Bits 0:1 - Capture/compare 3 selection"] # [inline (always)] pub fn cc3s (& mut self) -> Cc3sW < Ccmr2InputSpec > { Cc3sW :: new (self , 0) } # [doc = "Input capture (3-4) prescaler"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `IC3PSC` field.</div>"] # [inline (always)] pub fn icpsc (& mut self , n : u8) -> IcpscW < Ccmr2InputSpec > { # [allow (clippy :: no_effect)] [() ; 2] [n as usize] ; IcpscW :: new (self , n * 8 + 2) } # [doc = "Bits 2:3 - Input capture 3 prescaler"] # [inline (always)] pub fn ic3psc (& mut self) -> IcpscW < Ccmr2InputSpec > { IcpscW :: new (self , 2) } # [doc = "Bits 10:11 - Input capture 4 prescaler"] # [inline (always)] pub fn ic4psc (& mut self) -> IcpscW < Ccmr2InputSpec > { IcpscW :: new (self , 10) } # [doc = "Input capture (3-4) filter"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `IC3F` field.</div>"] # [inline (always)] pub fn icf (& mut self , n : u8) -> IcfW < Ccmr2InputSpec > { # [allow (clippy :: no_effect)] [() ; 2] [n as usize] ; IcfW :: new (self , n * 8 + 4) } # [doc = "Bits 4:7 - Input capture 3 filter"] # [inline (always)] pub fn ic3f (& mut self) -> IcfW < Ccmr2InputSpec > { IcfW :: new (self , 4) } # [doc = "Bits 12:15 - Input capture 4 filter"] # [inline (always)] pub fn ic4f (& mut self) -> IcfW < Ccmr2InputSpec > { IcfW :: new (self , 12) } # [doc = "Bits 8:9 - Capture/Compare 4 selection"] # [inline (always)] pub fn cc4s (& mut self) -> Cc4sW < Ccmr2InputSpec > { Cc4sW :: new (self , 8) } } # [doc = "capture/compare mode register 2 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`ccmr2_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccmr2_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Ccmr2InputSpec ; impl crate :: RegisterSpec for Ccmr2InputSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ccmr2_input::R`](R) reader structure"] impl crate :: Readable for Ccmr2InputSpec { } # [doc = "`write(|w| ..)` method takes [`ccmr2_input::W`](W) writer structure"] impl crate :: Writable for Ccmr2InputSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CCMR2_Input to value 0"] impl crate :: Resettable for Ccmr2InputSpec { }