# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { power : Power , clkcr : Clkcr , arg : Arg , cmd : Cmd , respcmd : Respcmd , resp : [Resp ; 4] , dtimer : Dtimer , dlen : Dlen , dctrl : Dctrl , dcount : Dcount , sta : Sta , icr : Icr , mask : Mask , _reserved13 : [u8 ; 0x08] , fifocnt : Fifocnt , _reserved14 : [u8 ; 0x34] , fifo : Fifo , } impl RegisterBlock { # [doc = "0x00 - power control register"] # [inline (always)] pub const fn power (& self) -> & Power { & self . power } # [doc = "0x04 - SDI clock control register"] # [inline (always)] pub const fn clkcr (& self) -> & Clkcr { & self . clkcr } # [doc = "0x08 - argument register"] # [inline (always)] pub const fn arg (& self) -> & Arg { & self . arg } # [doc = "0x0c - command register"] # [inline (always)] pub const fn cmd (& self) -> & Cmd { & self . cmd } # [doc = "0x10 - command response register"] # [inline (always)] pub const fn respcmd (& self) -> & Respcmd { & self . respcmd } # [doc = "0x14..0x24 - SDIO response %s register"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is the index of register in the array. `n == 0` corresponds to `RESP1` register.</div>"] # [inline (always)] pub const fn resp (& self , n : usize) -> & Resp { & self . resp [n] } # [doc = "Iterator for array of:"] # [doc = "0x14..0x24 - SDIO response %s register"] # [inline (always)] pub fn resp_iter (& self) -> impl Iterator < Item = & Resp > { self . resp . iter () } # [doc = "0x14 - SDIO response 1 register"] # [inline (always)] pub const fn resp1 (& self) -> & Resp { self . resp (0) } # [doc = "0x18 - SDIO response 2 register"] # [inline (always)] pub const fn resp2 (& self) -> & Resp { self . resp (1) } # [doc = "0x1c - SDIO response 3 register"] # [inline (always)] pub const fn resp3 (& self) -> & Resp { self . resp (2) } # [doc = "0x20 - SDIO response 4 register"] # [inline (always)] pub const fn resp4 (& self) -> & Resp { self . resp (3) } # [doc = "0x24 - data timer register"] # [inline (always)] pub const fn dtimer (& self) -> & Dtimer { & self . dtimer } # [doc = "0x28 - data length register"] # [inline (always)] pub const fn dlen (& self) -> & Dlen { & self . dlen } # [doc = "0x2c - data control register"] # [inline (always)] pub const fn dctrl (& self) -> & Dctrl { & self . dctrl } # [doc = "0x30 - data counter register"] # [inline (always)] pub const fn dcount (& self) -> & Dcount { & self . dcount } # [doc = "0x34 - status register"] # [inline (always)] pub const fn sta (& self) -> & Sta { & self . sta } # [doc = "0x38 - interrupt clear register"] # [inline (always)] pub const fn icr (& self) -> & Icr { & self . icr } # [doc = "0x3c - mask register"] # [inline (always)] pub const fn mask (& self) -> & Mask { & self . mask } # [doc = "0x48 - FIFO counter register"] # [inline (always)] pub const fn fifocnt (& self) -> & Fifocnt { & self . fifocnt } # [doc = "0x80 - data FIFO register"] # [inline (always)] pub const fn fifo (& self) -> & Fifo { & self . fifo } } # [doc = "POWER (rw) register accessor: power control register\n\nYou can [`read`](crate::Reg::read) this register and get [`power::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`power::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@power`] module"] # [doc (alias = "POWER")] pub type Power = crate :: Reg < power :: PowerSpec > ; # [doc = "power control register"] pub mod power ; # [doc = "CLKCR (rw) register accessor: SDI clock control register\n\nYou can [`read`](crate::Reg::read) this register and get [`clkcr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`clkcr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clkcr`] module"] # [doc (alias = "CLKCR")] pub type Clkcr = crate :: Reg < clkcr :: ClkcrSpec > ; # [doc = "SDI clock control register"] pub mod clkcr ; # [doc = "ARG (rw) register accessor: argument register\n\nYou can [`read`](crate::Reg::read) this register and get [`arg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`arg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@arg`] module"] # [doc (alias = "ARG")] pub type Arg = crate :: Reg < arg :: ArgSpec > ; # [doc = "argument register"] pub mod arg ; # [doc = "CMD (rw) register accessor: command register\n\nYou can [`read`](crate::Reg::read) this register and get [`cmd::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmd::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cmd`] module"] # [doc (alias = "CMD")] pub type Cmd = crate :: Reg < cmd :: CmdSpec > ; # [doc = "command register"] pub mod cmd ; # [doc = "RESPCMD (r) register accessor: command response register\n\nYou can [`read`](crate::Reg::read) this register and get [`respcmd::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@respcmd`] module"] # [doc (alias = "RESPCMD")] pub type Respcmd = crate :: Reg < respcmd :: RespcmdSpec > ; # [doc = "command response register"] pub mod respcmd ; # [doc = "RESP (r) register accessor: SDIO response %s register\n\nYou can [`read`](crate::Reg::read) this register and get [`resp::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@resp`] module"] # [doc (alias = "RESP")] pub type Resp = crate :: Reg < resp :: RespSpec > ; # [doc = "SDIO response %s register"] pub mod resp ; # [doc = "DTIMER (rw) register accessor: data timer register\n\nYou can [`read`](crate::Reg::read) this register and get [`dtimer::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dtimer::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dtimer`] module"] # [doc (alias = "DTIMER")] pub type Dtimer = crate :: Reg < dtimer :: DtimerSpec > ; # [doc = "data timer register"] pub mod dtimer ; # [doc = "DLEN (rw) register accessor: data length register\n\nYou can [`read`](crate::Reg::read) this register and get [`dlen::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dlen::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dlen`] module"] # [doc (alias = "DLEN")] pub type Dlen = crate :: Reg < dlen :: DlenSpec > ; # [doc = "data length register"] pub mod dlen ; # [doc = "DCTRL (rw) register accessor: data control register\n\nYou can [`read`](crate::Reg::read) this register and get [`dctrl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dctrl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dctrl`] module"] # [doc (alias = "DCTRL")] pub type Dctrl = crate :: Reg < dctrl :: DctrlSpec > ; # [doc = "data control register"] pub mod dctrl ; # [doc = "DCOUNT (r) register accessor: data counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`dcount::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dcount`] module"] # [doc (alias = "DCOUNT")] pub type Dcount = crate :: Reg < dcount :: DcountSpec > ; # [doc = "data counter register"] pub mod dcount ; # [doc = "STA (r) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`sta::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sta`] module"] # [doc (alias = "STA")] pub type Sta = crate :: Reg < sta :: StaSpec > ; # [doc = "status register"] pub mod sta ; # [doc = "ICR (rw) register accessor: interrupt clear register\n\nYou can [`read`](crate::Reg::read) this register and get [`icr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`icr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@icr`] module"] # [doc (alias = "ICR")] pub type Icr = crate :: Reg < icr :: IcrSpec > ; # [doc = "interrupt clear register"] pub mod icr ; # [doc = "MASK (rw) register accessor: mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`mask::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`mask::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mask`] module"] # [doc (alias = "MASK")] pub type Mask = crate :: Reg < mask :: MaskSpec > ; # [doc = "mask register"] pub mod mask ; # [doc = "FIFOCNT (r) register accessor: FIFO counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`fifocnt::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fifocnt`] module"] # [doc (alias = "FIFOCNT")] pub type Fifocnt = crate :: Reg < fifocnt :: FifocntSpec > ; # [doc = "FIFO counter register"] pub mod fifocnt ; # [doc = "FIFO (rw) register accessor: data FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`fifo::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fifo::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fifo`] module"] # [doc (alias = "FIFO")] pub type Fifo = crate :: Reg < fifo :: FifoSpec > ; # [doc = "data FIFO register"] pub mod fifo ;