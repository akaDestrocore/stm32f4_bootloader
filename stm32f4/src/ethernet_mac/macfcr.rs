# [doc = "Register `MACFCR` reader"] pub type R = crate :: R < MacfcrSpec > ; # [doc = "Register `MACFCR` writer"] pub type W = crate :: W < MacfcrSpec > ; # [doc = "Flow control busy/back pressure activate\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Fcb { # [doc = "0: In half duplex only, deasserts back pressure"] DisableBackPressure = 0 , # [doc = "1: In full duplex, initiate a Pause control frame. In half duplex, assert back pressure"] PauseOrBackPressure = 1 , } impl From < Fcb > for bool { # [inline (always)] fn from (variant : Fcb) -> Self { variant as u8 != 0 } } # [doc = "Field `FCB` reader - Flow control busy/back pressure activate"] pub type FcbR = crate :: BitReader < Fcb > ; impl FcbR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Fcb { match self . bits { false => Fcb :: DisableBackPressure , true => Fcb :: PauseOrBackPressure , } } # [doc = "In half duplex only, deasserts back pressure"] # [inline (always)] pub fn is_disable_back_pressure (& self) -> bool { * self == Fcb :: DisableBackPressure } # [doc = "In full duplex, initiate a Pause control frame. In half duplex, assert back pressure"] # [inline (always)] pub fn is_pause_or_back_pressure (& self) -> bool { * self == Fcb :: PauseOrBackPressure } } # [doc = "Field `FCB` writer - Flow control busy/back pressure activate"] pub type FcbW < 'a , REG > = crate :: BitWriter < 'a , REG , Fcb > ; impl < 'a , REG > FcbW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "In half duplex only, deasserts back pressure"] # [inline (always)] pub fn disable_back_pressure (self) -> & 'a mut crate :: W < REG > { self . variant (Fcb :: DisableBackPressure) } # [doc = "In full duplex, initiate a Pause control frame. In half duplex, assert back pressure"] # [inline (always)] pub fn pause_or_back_pressure (self) -> & 'a mut crate :: W < REG > { self . variant (Fcb :: PauseOrBackPressure) } } # [doc = "Transmit flow control enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tfce { # [doc = "0: In full duplex, flow control is disabled. In half duplex, back pressure is disabled"] Disabled = 0 , # [doc = "1: In full duplex, flow control is enabled. In half duplex, back pressure is enabled"] Enabled = 1 , } impl From < Tfce > for bool { # [inline (always)] fn from (variant : Tfce) -> Self { variant as u8 != 0 } } # [doc = "Field `TFCE` reader - Transmit flow control enable"] pub type TfceR = crate :: BitReader < Tfce > ; impl TfceR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Tfce { match self . bits { false => Tfce :: Disabled , true => Tfce :: Enabled , } } # [doc = "In full duplex, flow control is disabled. In half duplex, back pressure is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Tfce :: Disabled } # [doc = "In full duplex, flow control is enabled. In half duplex, back pressure is enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Tfce :: Enabled } } # [doc = "Field `TFCE` writer - Transmit flow control enable"] pub type TfceW < 'a , REG > = crate :: BitWriter < 'a , REG , Tfce > ; impl < 'a , REG > TfceW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "In full duplex, flow control is disabled. In half duplex, back pressure is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Tfce :: Disabled) } # [doc = "In full duplex, flow control is enabled. In half duplex, back pressure is enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Tfce :: Enabled) } } # [doc = "Receive flow control enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Rfce { # [doc = "0: Pause frames are not decoded"] Disabled = 0 , # [doc = "1: MAC decodes received Pause frames and disables its transmitted for a specified time"] Enabled = 1 , } impl From < Rfce > for bool { # [inline (always)] fn from (variant : Rfce) -> Self { variant as u8 != 0 } } # [doc = "Field `RFCE` reader - Receive flow control enable"] pub type RfceR = crate :: BitReader < Rfce > ; impl RfceR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Rfce { match self . bits { false => Rfce :: Disabled , true => Rfce :: Enabled , } } # [doc = "Pause frames are not decoded"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Rfce :: Disabled } # [doc = "MAC decodes received Pause frames and disables its transmitted for a specified time"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Rfce :: Enabled } } # [doc = "Field `RFCE` writer - Receive flow control enable"] pub type RfceW < 'a , REG > = crate :: BitWriter < 'a , REG , Rfce > ; impl < 'a , REG > RfceW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Pause frames are not decoded"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Rfce :: Disabled) } # [doc = "MAC decodes received Pause frames and disables its transmitted for a specified time"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Rfce :: Enabled) } } # [doc = "Unicast pause frame detect\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Upfd { # [doc = "0: MAC detects only a Pause frame with the multicast address specified in the 802.3x standard"] Disabled = 0 , # [doc = "1: MAC additionally detects Pause frames with the station's unicast address"] Enabled = 1 , } impl From < Upfd > for bool { # [inline (always)] fn from (variant : Upfd) -> Self { variant as u8 != 0 } } # [doc = "Field `UPFD` reader - Unicast pause frame detect"] pub type UpfdR = crate :: BitReader < Upfd > ; impl UpfdR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Upfd { match self . bits { false => Upfd :: Disabled , true => Upfd :: Enabled , } } # [doc = "MAC detects only a Pause frame with the multicast address specified in the 802.3x standard"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Upfd :: Disabled } # [doc = "MAC additionally detects Pause frames with the station's unicast address"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Upfd :: Enabled } } # [doc = "Field `UPFD` writer - Unicast pause frame detect"] pub type UpfdW < 'a , REG > = crate :: BitWriter < 'a , REG , Upfd > ; impl < 'a , REG > UpfdW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "MAC detects only a Pause frame with the multicast address specified in the 802.3x standard"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Upfd :: Disabled) } # [doc = "MAC additionally detects Pause frames with the station's unicast address"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Upfd :: Enabled) } } # [doc = "Pause low threshold\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Plt { # [doc = "0: Pause time minus 4 slot times"] Plt4 = 0 , # [doc = "1: Pause time minus 28 slot times"] Plt28 = 1 , # [doc = "2: Pause time minus 144 slot times"] Plt144 = 2 , # [doc = "3: Pause time minus 256 slot times"] Plt256 = 3 , } impl From < Plt > for u8 { # [inline (always)] fn from (variant : Plt) -> Self { variant as _ } } impl crate :: FieldSpec for Plt { type Ux = u8 ; } impl crate :: IsEnum for Plt { } # [doc = "Field `PLT` reader - Pause low threshold"] pub type PltR = crate :: FieldReader < Plt > ; impl PltR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Plt { match self . bits { 0 => Plt :: Plt4 , 1 => Plt :: Plt28 , 2 => Plt :: Plt144 , 3 => Plt :: Plt256 , _ => unreachable ! () , } } # [doc = "Pause time minus 4 slot times"] # [inline (always)] pub fn is_plt4 (& self) -> bool { * self == Plt :: Plt4 } # [doc = "Pause time minus 28 slot times"] # [inline (always)] pub fn is_plt28 (& self) -> bool { * self == Plt :: Plt28 } # [doc = "Pause time minus 144 slot times"] # [inline (always)] pub fn is_plt144 (& self) -> bool { * self == Plt :: Plt144 } # [doc = "Pause time minus 256 slot times"] # [inline (always)] pub fn is_plt256 (& self) -> bool { * self == Plt :: Plt256 } } # [doc = "Field `PLT` writer - Pause low threshold"] pub type PltW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , Plt , crate :: Safe > ; impl < 'a , REG > PltW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "Pause time minus 4 slot times"] # [inline (always)] pub fn plt4 (self) -> & 'a mut crate :: W < REG > { self . variant (Plt :: Plt4) } # [doc = "Pause time minus 28 slot times"] # [inline (always)] pub fn plt28 (self) -> & 'a mut crate :: W < REG > { self . variant (Plt :: Plt28) } # [doc = "Pause time minus 144 slot times"] # [inline (always)] pub fn plt144 (self) -> & 'a mut crate :: W < REG > { self . variant (Plt :: Plt144) } # [doc = "Pause time minus 256 slot times"] # [inline (always)] pub fn plt256 (self) -> & 'a mut crate :: W < REG > { self . variant (Plt :: Plt256) } } # [doc = "Zero-quanta pause disable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Zqpd { # [doc = "0: Normal operation with automatic zero-quanta pause control frame generation"] Enabled = 0 , # [doc = "1: Automatic generation of zero-quanta pause control frames is disabled"] Disabled = 1 , } impl From < Zqpd > for bool { # [inline (always)] fn from (variant : Zqpd) -> Self { variant as u8 != 0 } } # [doc = "Field `ZQPD` reader - Zero-quanta pause disable"] pub type ZqpdR = crate :: BitReader < Zqpd > ; impl ZqpdR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Zqpd { match self . bits { false => Zqpd :: Enabled , true => Zqpd :: Disabled , } } # [doc = "Normal operation with automatic zero-quanta pause control frame generation"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Zqpd :: Enabled } # [doc = "Automatic generation of zero-quanta pause control frames is disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Zqpd :: Disabled } } # [doc = "Field `ZQPD` writer - Zero-quanta pause disable"] pub type ZqpdW < 'a , REG > = crate :: BitWriter < 'a , REG , Zqpd > ; impl < 'a , REG > ZqpdW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Normal operation with automatic zero-quanta pause control frame generation"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Zqpd :: Enabled) } # [doc = "Automatic generation of zero-quanta pause control frames is disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Zqpd :: Disabled) } } # [doc = "Field `PT` reader - Pause time"] pub type PtR = crate :: FieldReader < u16 > ; # [doc = "Field `PT` writer - Pause time"] pub type PtW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 , crate :: Safe > ; impl R { # [doc = "Bit 0 - Flow control busy/back pressure activate"] # [inline (always)] pub fn fcb (& self) -> FcbR { FcbR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Transmit flow control enable"] # [inline (always)] pub fn tfce (& self) -> TfceR { TfceR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Receive flow control enable"] # [inline (always)] pub fn rfce (& self) -> RfceR { RfceR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Unicast pause frame detect"] # [inline (always)] pub fn upfd (& self) -> UpfdR { UpfdR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bits 4:5 - Pause low threshold"] # [inline (always)] pub fn plt (& self) -> PltR { PltR :: new (((self . bits >> 4) & 3) as u8) } # [doc = "Bit 7 - Zero-quanta pause disable"] # [inline (always)] pub fn zqpd (& self) -> ZqpdR { ZqpdR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bits 16:31 - Pause time"] # [inline (always)] pub fn pt (& self) -> PtR { PtR :: new (((self . bits >> 16) & 0xffff) as u16) } } impl W { # [doc = "Bit 0 - Flow control busy/back pressure activate"] # [inline (always)] pub fn fcb (& mut self) -> FcbW < MacfcrSpec > { FcbW :: new (self , 0) } # [doc = "Bit 1 - Transmit flow control enable"] # [inline (always)] pub fn tfce (& mut self) -> TfceW < MacfcrSpec > { TfceW :: new (self , 1) } # [doc = "Bit 2 - Receive flow control enable"] # [inline (always)] pub fn rfce (& mut self) -> RfceW < MacfcrSpec > { RfceW :: new (self , 2) } # [doc = "Bit 3 - Unicast pause frame detect"] # [inline (always)] pub fn upfd (& mut self) -> UpfdW < MacfcrSpec > { UpfdW :: new (self , 3) } # [doc = "Bits 4:5 - Pause low threshold"] # [inline (always)] pub fn plt (& mut self) -> PltW < MacfcrSpec > { PltW :: new (self , 4) } # [doc = "Bit 7 - Zero-quanta pause disable"] # [inline (always)] pub fn zqpd (& mut self) -> ZqpdW < MacfcrSpec > { ZqpdW :: new (self , 7) } # [doc = "Bits 16:31 - Pause time"] # [inline (always)] pub fn pt (& mut self) -> PtW < MacfcrSpec > { PtW :: new (self , 16) } } # [doc = "Ethernet MAC flow control register\n\nYou can [`read`](crate::Reg::read) this register and get [`macfcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`macfcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MacfcrSpec ; impl crate :: RegisterSpec for MacfcrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`macfcr::R`](R) reader structure"] impl crate :: Readable for MacfcrSpec { } # [doc = "`write(|w| ..)` method takes [`macfcr::W`](W) writer structure"] impl crate :: Writable for MacfcrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets MACFCR to value 0"] impl crate :: Resettable for MacfcrSpec { }