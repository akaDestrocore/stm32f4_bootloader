# [doc = "Register `MACA1HR` reader"] pub type R = crate :: R < Maca1hrSpec > ; # [doc = "Register `MACA1HR` writer"] pub type W = crate :: W < Maca1hrSpec > ; # [doc = "Field `MACA1H` reader - MACA1H"] pub type Maca1hR = crate :: FieldReader < u16 > ; # [doc = "Field `MACA1H` writer - MACA1H"] pub type Maca1hW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 , crate :: Safe > ; # [doc = "Field `MBC` reader - MBC"] pub type MbcR = crate :: FieldReader ; # [doc = "Field `MBC` writer - MBC"] pub type MbcW < 'a , REG > = crate :: FieldWriter < 'a , REG , 6 , u8 , crate :: Safe > ; # [doc = "SA\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Sa { # [doc = "0: This address is used for comparison with DA fields of the received frame"] Destination = 0 , # [doc = "1: This address is used for comparison with SA fields of received frames"] Source = 1 , } impl From < Sa > for bool { # [inline (always)] fn from (variant : Sa) -> Self { variant as u8 != 0 } } # [doc = "Field `SA` reader - SA"] pub type SaR = crate :: BitReader < Sa > ; impl SaR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Sa { match self . bits { false => Sa :: Destination , true => Sa :: Source , } } # [doc = "This address is used for comparison with DA fields of the received frame"] # [inline (always)] pub fn is_destination (& self) -> bool { * self == Sa :: Destination } # [doc = "This address is used for comparison with SA fields of received frames"] # [inline (always)] pub fn is_source (& self) -> bool { * self == Sa :: Source } } # [doc = "Field `SA` writer - SA"] pub type SaW < 'a , REG > = crate :: BitWriter < 'a , REG , Sa > ; impl < 'a , REG > SaW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "This address is used for comparison with DA fields of the received frame"] # [inline (always)] pub fn destination (self) -> & 'a mut crate :: W < REG > { self . variant (Sa :: Destination) } # [doc = "This address is used for comparison with SA fields of received frames"] # [inline (always)] pub fn source (self) -> & 'a mut crate :: W < REG > { self . variant (Sa :: Source) } } # [doc = "AE\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ae { # [doc = "0: Address filters ignore this address"] Disabled = 0 , # [doc = "1: Address filters use this address"] Enabled = 1 , } impl From < Ae > for bool { # [inline (always)] fn from (variant : Ae) -> Self { variant as u8 != 0 } } # [doc = "Field `AE` reader - AE"] pub type AeR = crate :: BitReader < Ae > ; impl AeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Ae { match self . bits { false => Ae :: Disabled , true => Ae :: Enabled , } } # [doc = "Address filters ignore this address"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Ae :: Disabled } # [doc = "Address filters use this address"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Ae :: Enabled } } # [doc = "Field `AE` writer - AE"] pub type AeW < 'a , REG > = crate :: BitWriter < 'a , REG , Ae > ; impl < 'a , REG > AeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Address filters ignore this address"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Ae :: Disabled) } # [doc = "Address filters use this address"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Ae :: Enabled) } } impl R { # [doc = "Bits 0:15 - MACA1H"] # [inline (always)] pub fn maca1h (& self) -> Maca1hR { Maca1hR :: new ((self . bits & 0xffff) as u16) } # [doc = "Bits 24:29 - MBC"] # [inline (always)] pub fn mbc (& self) -> MbcR { MbcR :: new (((self . bits >> 24) & 0x3f) as u8) } # [doc = "Bit 30 - SA"] # [inline (always)] pub fn sa (& self) -> SaR { SaR :: new (((self . bits >> 30) & 1) != 0) } # [doc = "Bit 31 - AE"] # [inline (always)] pub fn ae (& self) -> AeR { AeR :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bits 0:15 - MACA1H"] # [inline (always)] pub fn maca1h (& mut self) -> Maca1hW < Maca1hrSpec > { Maca1hW :: new (self , 0) } # [doc = "Bits 24:29 - MBC"] # [inline (always)] pub fn mbc (& mut self) -> MbcW < Maca1hrSpec > { MbcW :: new (self , 24) } # [doc = "Bit 30 - SA"] # [inline (always)] pub fn sa (& mut self) -> SaW < Maca1hrSpec > { SaW :: new (self , 30) } # [doc = "Bit 31 - AE"] # [inline (always)] pub fn ae (& mut self) -> AeW < Maca1hrSpec > { AeW :: new (self , 31) } } # [doc = "Ethernet MAC address 1 high register\n\nYou can [`read`](crate::Reg::read) this register and get [`maca1hr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`maca1hr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Maca1hrSpec ; impl crate :: RegisterSpec for Maca1hrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`maca1hr::R`](R) reader structure"] impl crate :: Readable for Maca1hrSpec { } # [doc = "`write(|w| ..)` method takes [`maca1hr::W`](W) writer structure"] impl crate :: Writable for Maca1hrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets MACA1HR to value 0xffff"] impl crate :: Resettable for Maca1hrSpec { const RESET_VALUE : u32 = 0xffff ; }