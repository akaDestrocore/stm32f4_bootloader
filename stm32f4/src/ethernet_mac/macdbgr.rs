# [doc = "Register `MACDBGR` reader"] pub type R = crate :: R < MacdbgrSpec > ; # [doc = "Field `MMRPEA` reader - MAC MII receive protocol engine active"] pub type MmrpeaR = crate :: BitReader ; # [doc = "Field `MSFRWCS` reader - MAC small FIFO read/write controllers status"] pub type MsfrwcsR = crate :: FieldReader ; # [doc = "Field `RFWRA` reader - Rx FIFO write controller active"] pub type RfwraR = crate :: BitReader ; # [doc = "Field `RFRCS` reader - Rx FIFO read controller status"] pub type RfrcsR = crate :: FieldReader ; # [doc = "Field `RFFL` reader - Rx FIFO fill level"] pub type RfflR = crate :: FieldReader ; # [doc = "Field `MMTEA` reader - MAC MII transmit engine active"] pub type MmteaR = crate :: BitReader ; # [doc = "Field `MTFCS` reader - MAC transmit frame controller status"] pub type MtfcsR = crate :: FieldReader ; # [doc = "Field `MTP` reader - MAC transmitter in pause"] pub type MtpR = crate :: BitReader ; # [doc = "Field `TFRS` reader - Tx FIFO read status"] pub type TfrsR = crate :: FieldReader ; # [doc = "Field `TFWA` reader - Tx FIFO write active"] pub type TfwaR = crate :: BitReader ; # [doc = "Field `TFNE` reader - Tx FIFO not empty"] pub type TfneR = crate :: BitReader ; # [doc = "Field `TFF` reader - Tx FIFO full"] pub type TffR = crate :: BitReader ; impl R { # [doc = "Bit 0 - MAC MII receive protocol engine active"] # [inline (always)] pub fn mmrpea (& self) -> MmrpeaR { MmrpeaR :: new ((self . bits & 1) != 0) } # [doc = "Bits 1:2 - MAC small FIFO read/write controllers status"] # [inline (always)] pub fn msfrwcs (& self) -> MsfrwcsR { MsfrwcsR :: new (((self . bits >> 1) & 3) as u8) } # [doc = "Bit 4 - Rx FIFO write controller active"] # [inline (always)] pub fn rfwra (& self) -> RfwraR { RfwraR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bits 5:6 - Rx FIFO read controller status"] # [inline (always)] pub fn rfrcs (& self) -> RfrcsR { RfrcsR :: new (((self . bits >> 5) & 3) as u8) } # [doc = "Bits 8:9 - Rx FIFO fill level"] # [inline (always)] pub fn rffl (& self) -> RfflR { RfflR :: new (((self . bits >> 8) & 3) as u8) } # [doc = "Bit 16 - MAC MII transmit engine active"] # [inline (always)] pub fn mmtea (& self) -> MmteaR { MmteaR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bits 17:18 - MAC transmit frame controller status"] # [inline (always)] pub fn mtfcs (& self) -> MtfcsR { MtfcsR :: new (((self . bits >> 17) & 3) as u8) } # [doc = "Bit 19 - MAC transmitter in pause"] # [inline (always)] pub fn mtp (& self) -> MtpR { MtpR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bits 20:21 - Tx FIFO read status"] # [inline (always)] pub fn tfrs (& self) -> TfrsR { TfrsR :: new (((self . bits >> 20) & 3) as u8) } # [doc = "Bit 22 - Tx FIFO write active"] # [inline (always)] pub fn tfwa (& self) -> TfwaR { TfwaR :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 24 - Tx FIFO not empty"] # [inline (always)] pub fn tfne (& self) -> TfneR { TfneR :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - Tx FIFO full"] # [inline (always)] pub fn tff (& self) -> TffR { TffR :: new (((self . bits >> 25) & 1) != 0) } } # [doc = "Ethernet MAC debug register\n\nYou can [`read`](crate::Reg::read) this register and get [`macdbgr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MacdbgrSpec ; impl crate :: RegisterSpec for MacdbgrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`macdbgr::R`](R) reader structure"] impl crate :: Readable for MacdbgrSpec { } # [doc = "`reset()` method sets MACDBGR to value 0"] impl crate :: Resettable for MacdbgrSpec { }