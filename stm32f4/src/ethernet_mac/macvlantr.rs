# [doc = "Register `MACVLANTR` reader"] pub type R = crate :: R < MacvlantrSpec > ; # [doc = "Register `MACVLANTR` writer"] pub type W = crate :: W < MacvlantrSpec > ; # [doc = "Field `VLANTI` reader - VLAN tag identifier (for receive frames)"] pub type VlantiR = crate :: FieldReader < u16 > ; # [doc = "Field `VLANTI` writer - VLAN tag identifier (for receive frames)"] pub type VlantiW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 , crate :: Safe > ; # [doc = "12-bit VLAN tag comparison\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Vlantc { # [doc = "0: Full 16 bit VLAN identifiers are used for comparison and filtering"] Vlantc16 = 0 , # [doc = "1: 12 bit VLAN identifies are used for comparison and filtering"] Vlantc12 = 1 , } impl From < Vlantc > for bool { # [inline (always)] fn from (variant : Vlantc) -> Self { variant as u8 != 0 } } # [doc = "Field `VLANTC` reader - 12-bit VLAN tag comparison"] pub type VlantcR = crate :: BitReader < Vlantc > ; impl VlantcR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Vlantc { match self . bits { false => Vlantc :: Vlantc16 , true => Vlantc :: Vlantc12 , } } # [doc = "Full 16 bit VLAN identifiers are used for comparison and filtering"] # [inline (always)] pub fn is_vlantc16 (& self) -> bool { * self == Vlantc :: Vlantc16 } # [doc = "12 bit VLAN identifies are used for comparison and filtering"] # [inline (always)] pub fn is_vlantc12 (& self) -> bool { * self == Vlantc :: Vlantc12 } } # [doc = "Field `VLANTC` writer - 12-bit VLAN tag comparison"] pub type VlantcW < 'a , REG > = crate :: BitWriter < 'a , REG , Vlantc > ; impl < 'a , REG > VlantcW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Full 16 bit VLAN identifiers are used for comparison and filtering"] # [inline (always)] pub fn vlantc16 (self) -> & 'a mut crate :: W < REG > { self . variant (Vlantc :: Vlantc16) } # [doc = "12 bit VLAN identifies are used for comparison and filtering"] # [inline (always)] pub fn vlantc12 (self) -> & 'a mut crate :: W < REG > { self . variant (Vlantc :: Vlantc12) } } impl R { # [doc = "Bits 0:15 - VLAN tag identifier (for receive frames)"] # [inline (always)] pub fn vlanti (& self) -> VlantiR { VlantiR :: new ((self . bits & 0xffff) as u16) } # [doc = "Bit 16 - 12-bit VLAN tag comparison"] # [inline (always)] pub fn vlantc (& self) -> VlantcR { VlantcR :: new (((self . bits >> 16) & 1) != 0) } } impl W { # [doc = "Bits 0:15 - VLAN tag identifier (for receive frames)"] # [inline (always)] pub fn vlanti (& mut self) -> VlantiW < MacvlantrSpec > { VlantiW :: new (self , 0) } # [doc = "Bit 16 - 12-bit VLAN tag comparison"] # [inline (always)] pub fn vlantc (& mut self) -> VlantcW < MacvlantrSpec > { VlantcW :: new (self , 16) } } # [doc = "Ethernet MAC VLAN tag register\n\nYou can [`read`](crate::Reg::read) this register and get [`macvlantr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`macvlantr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MacvlantrSpec ; impl crate :: RegisterSpec for MacvlantrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`macvlantr::R`](R) reader structure"] impl crate :: Readable for MacvlantrSpec { } # [doc = "`write(|w| ..)` method takes [`macvlantr::W`](W) writer structure"] impl crate :: Writable for MacvlantrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets MACVLANTR to value 0"] impl crate :: Resettable for MacvlantrSpec { }