# [doc = "Register `MACPMTCSR` reader"] pub type R = crate :: R < MacpmtcsrSpec > ; # [doc = "Register `MACPMTCSR` writer"] pub type W = crate :: W < MacpmtcsrSpec > ; # [doc = "Power down\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Pd { # [doc = "1: All received frames will be dropped. Cleared automatically when a magic packet or wakeup frame is received"] Enabled = 1 , } impl From < Pd > for bool { # [inline (always)] fn from (variant : Pd) -> Self { variant as u8 != 0 } } # [doc = "Field `PD` reader - Power down"] pub type PdR = crate :: BitReader < Pd > ; impl PdR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Pd > { match self . bits { true => Some (Pd :: Enabled) , _ => None , } } # [doc = "All received frames will be dropped. Cleared automatically when a magic packet or wakeup frame is received"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Pd :: Enabled } } # [doc = "Field `PD` writer - Power down"] pub type PdW < 'a , REG > = crate :: BitWriter < 'a , REG , Pd > ; impl < 'a , REG > PdW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "All received frames will be dropped. Cleared automatically when a magic packet or wakeup frame is received"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Pd :: Enabled) } } # [doc = "Magic packet enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Mpe { # [doc = "0: No power management event generated due to Magic Packet reception"] Disabled = 0 , # [doc = "1: Enable generation of a power management event due to Magic Packet reception"] Enabled = 1 , } impl From < Mpe > for bool { # [inline (always)] fn from (variant : Mpe) -> Self { variant as u8 != 0 } } # [doc = "Field `MPE` reader - Magic packet enable"] pub type MpeR = crate :: BitReader < Mpe > ; impl MpeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Mpe { match self . bits { false => Mpe :: Disabled , true => Mpe :: Enabled , } } # [doc = "No power management event generated due to Magic Packet reception"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Mpe :: Disabled } # [doc = "Enable generation of a power management event due to Magic Packet reception"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Mpe :: Enabled } } # [doc = "Field `MPE` writer - Magic packet enable"] pub type MpeW < 'a , REG > = crate :: BitWriter < 'a , REG , Mpe > ; impl < 'a , REG > MpeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "No power management event generated due to Magic Packet reception"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Mpe :: Disabled) } # [doc = "Enable generation of a power management event due to Magic Packet reception"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Mpe :: Enabled) } } # [doc = "Wakeup frame enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Wfe { # [doc = "0: No power management event generated due to wakeup frame reception"] Disabled = 0 , # [doc = "1: Enable generation of a power management event due to wakeup frame reception"] Enabled = 1 , } impl From < Wfe > for bool { # [inline (always)] fn from (variant : Wfe) -> Self { variant as u8 != 0 } } # [doc = "Field `WFE` reader - Wakeup frame enable"] pub type WfeR = crate :: BitReader < Wfe > ; impl WfeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Wfe { match self . bits { false => Wfe :: Disabled , true => Wfe :: Enabled , } } # [doc = "No power management event generated due to wakeup frame reception"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Wfe :: Disabled } # [doc = "Enable generation of a power management event due to wakeup frame reception"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Wfe :: Enabled } } # [doc = "Field `WFE` writer - Wakeup frame enable"] pub type WfeW < 'a , REG > = crate :: BitWriter < 'a , REG , Wfe > ; impl < 'a , REG > WfeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "No power management event generated due to wakeup frame reception"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Wfe :: Disabled) } # [doc = "Enable generation of a power management event due to wakeup frame reception"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Wfe :: Enabled) } } # [doc = "Field `MPR` reader - Magic packet received"] pub type MprR = crate :: BitReader ; # [doc = "Field `MPR` writer - Magic packet received"] pub type MprW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `WFR` reader - Wakeup frame received"] pub type WfrR = crate :: BitReader ; # [doc = "Field `WFR` writer - Wakeup frame received"] pub type WfrW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Global unicast\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Gu { # [doc = "0: Normal operation"] Disabled = 0 , # [doc = "1: Any unicast packet filtered by the MAC address recognition may be a wakeup frame"] Enabled = 1 , } impl From < Gu > for bool { # [inline (always)] fn from (variant : Gu) -> Self { variant as u8 != 0 } } # [doc = "Field `GU` reader - Global unicast"] pub type GuR = crate :: BitReader < Gu > ; impl GuR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Gu { match self . bits { false => Gu :: Disabled , true => Gu :: Enabled , } } # [doc = "Normal operation"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Gu :: Disabled } # [doc = "Any unicast packet filtered by the MAC address recognition may be a wakeup frame"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Gu :: Enabled } } # [doc = "Field `GU` writer - Global unicast"] pub type GuW < 'a , REG > = crate :: BitWriter < 'a , REG , Gu > ; impl < 'a , REG > GuW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Normal operation"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Gu :: Disabled) } # [doc = "Any unicast packet filtered by the MAC address recognition may be a wakeup frame"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Gu :: Enabled) } } # [doc = "Wakeup frame filter register pointer reset\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Wffrpr { # [doc = "1: Reset wakeup frame filter register point to 0b000. Automatically cleared"] Reset = 1 , } impl From < Wffrpr > for bool { # [inline (always)] fn from (variant : Wffrpr) -> Self { variant as u8 != 0 } } # [doc = "Field `WFFRPR` reader - Wakeup frame filter register pointer reset"] pub type WffrprR = crate :: BitReader < Wffrpr > ; impl WffrprR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Wffrpr > { match self . bits { true => Some (Wffrpr :: Reset) , _ => None , } } # [doc = "Reset wakeup frame filter register point to 0b000. Automatically cleared"] # [inline (always)] pub fn is_reset (& self) -> bool { * self == Wffrpr :: Reset } } # [doc = "Field `WFFRPR` writer - Wakeup frame filter register pointer reset"] pub type WffrprW < 'a , REG > = crate :: BitWriter < 'a , REG , Wffrpr > ; impl < 'a , REG > WffrprW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Reset wakeup frame filter register point to 0b000. Automatically cleared"] # [inline (always)] pub fn reset (self) -> & 'a mut crate :: W < REG > { self . variant (Wffrpr :: Reset) } } impl R { # [doc = "Bit 0 - Power down"] # [inline (always)] pub fn pd (& self) -> PdR { PdR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Magic packet enable"] # [inline (always)] pub fn mpe (& self) -> MpeR { MpeR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Wakeup frame enable"] # [inline (always)] pub fn wfe (& self) -> WfeR { WfeR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 5 - Magic packet received"] # [inline (always)] pub fn mpr (& self) -> MprR { MprR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Wakeup frame received"] # [inline (always)] pub fn wfr (& self) -> WfrR { WfrR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 9 - Global unicast"] # [inline (always)] pub fn gu (& self) -> GuR { GuR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 31 - Wakeup frame filter register pointer reset"] # [inline (always)] pub fn wffrpr (& self) -> WffrprR { WffrprR :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bit 0 - Power down"] # [inline (always)] pub fn pd (& mut self) -> PdW < MacpmtcsrSpec > { PdW :: new (self , 0) } # [doc = "Bit 1 - Magic packet enable"] # [inline (always)] pub fn mpe (& mut self) -> MpeW < MacpmtcsrSpec > { MpeW :: new (self , 1) } # [doc = "Bit 2 - Wakeup frame enable"] # [inline (always)] pub fn wfe (& mut self) -> WfeW < MacpmtcsrSpec > { WfeW :: new (self , 2) } # [doc = "Bit 5 - Magic packet received"] # [inline (always)] pub fn mpr (& mut self) -> MprW < MacpmtcsrSpec > { MprW :: new (self , 5) } # [doc = "Bit 6 - Wakeup frame received"] # [inline (always)] pub fn wfr (& mut self) -> WfrW < MacpmtcsrSpec > { WfrW :: new (self , 6) } # [doc = "Bit 9 - Global unicast"] # [inline (always)] pub fn gu (& mut self) -> GuW < MacpmtcsrSpec > { GuW :: new (self , 9) } # [doc = "Bit 31 - Wakeup frame filter register pointer reset"] # [inline (always)] pub fn wffrpr (& mut self) -> WffrprW < MacpmtcsrSpec > { WffrprW :: new (self , 31) } } # [doc = "Ethernet MAC PMT control and status register\n\nYou can [`read`](crate::Reg::read) this register and get [`macpmtcsr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`macpmtcsr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MacpmtcsrSpec ; impl crate :: RegisterSpec for MacpmtcsrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`macpmtcsr::R`](R) reader structure"] impl crate :: Readable for MacpmtcsrSpec { } # [doc = "`write(|w| ..)` method takes [`macpmtcsr::W`](W) writer structure"] impl crate :: Writable for MacpmtcsrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets MACPMTCSR to value 0"] impl crate :: Resettable for MacpmtcsrSpec { }