# [doc = "Register `MACHTHR` reader"] pub type R = crate :: R < MachthrSpec > ; # [doc = "Register `MACHTHR` writer"] pub type W = crate :: W < MachthrSpec > ; # [doc = "Field `HTH` reader - Upper 32 bits of hash table"] pub type HthR = crate :: FieldReader < u32 > ; # [doc = "Field `HTH` writer - Upper 32 bits of hash table"] pub type HthW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 , crate :: Safe > ; impl R { # [doc = "Bits 0:31 - Upper 32 bits of hash table"] # [inline (always)] pub fn hth (& self) -> HthR { HthR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - Upper 32 bits of hash table"] # [inline (always)] pub fn hth (& mut self) -> HthW < MachthrSpec > { HthW :: new (self , 0) } } # [doc = "Ethernet MAC hash table high register\n\nYou can [`read`](crate::Reg::read) this register and get [`machthr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`machthr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MachthrSpec ; impl crate :: RegisterSpec for MachthrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`machthr::R`](R) reader structure"] impl crate :: Readable for MachthrSpec { } # [doc = "`write(|w| ..)` method takes [`machthr::W`](W) writer structure"] impl crate :: Writable for MachthrSpec { type Safety = crate :: Safe ; } # [doc = "`reset()` method sets MACHTHR to value 0"] impl crate :: Resettable for MachthrSpec { }