# [doc = "Register `MACIMR` reader"] pub type R = crate :: R < MacimrSpec > ; # [doc = "Register `MACIMR` writer"] pub type W = crate :: W < MacimrSpec > ; # [doc = "PMT interrupt mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Pmtim { # [doc = "0: PMT Status interrupt generation enabled"] Unmasked = 0 , # [doc = "1: PMT Status interrupt generation disabled"] Masked = 1 , } impl From < Pmtim > for bool { # [inline (always)] fn from (variant : Pmtim) -> Self { variant as u8 != 0 } } # [doc = "Field `PMTIM` reader - PMT interrupt mask"] pub type PmtimR = crate :: BitReader < Pmtim > ; impl PmtimR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Pmtim { match self . bits { false => Pmtim :: Unmasked , true => Pmtim :: Masked , } } # [doc = "PMT Status interrupt generation enabled"] # [inline (always)] pub fn is_unmasked (& self) -> bool { * self == Pmtim :: Unmasked } # [doc = "PMT Status interrupt generation disabled"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Pmtim :: Masked } } # [doc = "Field `PMTIM` writer - PMT interrupt mask"] pub type PmtimW < 'a , REG > = crate :: BitWriter < 'a , REG , Pmtim > ; impl < 'a , REG > PmtimW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "PMT Status interrupt generation enabled"] # [inline (always)] pub fn unmasked (self) -> & 'a mut crate :: W < REG > { self . variant (Pmtim :: Unmasked) } # [doc = "PMT Status interrupt generation disabled"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Pmtim :: Masked) } } # [doc = "Time stamp trigger interrupt mask\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tstim { # [doc = "0: Time stamp interrupt generation enabled"] Unmasked = 0 , # [doc = "1: Time stamp interrupt generation disabled"] Masked = 1 , } impl From < Tstim > for bool { # [inline (always)] fn from (variant : Tstim) -> Self { variant as u8 != 0 } } # [doc = "Field `TSTIM` reader - Time stamp trigger interrupt mask"] pub type TstimR = crate :: BitReader < Tstim > ; impl TstimR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Tstim { match self . bits { false => Tstim :: Unmasked , true => Tstim :: Masked , } } # [doc = "Time stamp interrupt generation enabled"] # [inline (always)] pub fn is_unmasked (& self) -> bool { * self == Tstim :: Unmasked } # [doc = "Time stamp interrupt generation disabled"] # [inline (always)] pub fn is_masked (& self) -> bool { * self == Tstim :: Masked } } # [doc = "Field `TSTIM` writer - Time stamp trigger interrupt mask"] pub type TstimW < 'a , REG > = crate :: BitWriter < 'a , REG , Tstim > ; impl < 'a , REG > TstimW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Time stamp interrupt generation enabled"] # [inline (always)] pub fn unmasked (self) -> & 'a mut crate :: W < REG > { self . variant (Tstim :: Unmasked) } # [doc = "Time stamp interrupt generation disabled"] # [inline (always)] pub fn masked (self) -> & 'a mut crate :: W < REG > { self . variant (Tstim :: Masked) } } impl R { # [doc = "Bit 3 - PMT interrupt mask"] # [inline (always)] pub fn pmtim (& self) -> PmtimR { PmtimR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 9 - Time stamp trigger interrupt mask"] # [inline (always)] pub fn tstim (& self) -> TstimR { TstimR :: new (((self . bits >> 9) & 1) != 0) } } impl W { # [doc = "Bit 3 - PMT interrupt mask"] # [inline (always)] pub fn pmtim (& mut self) -> PmtimW < MacimrSpec > { PmtimW :: new (self , 3) } # [doc = "Bit 9 - Time stamp trigger interrupt mask"] # [inline (always)] pub fn tstim (& mut self) -> TstimW < MacimrSpec > { TstimW :: new (self , 9) } } # [doc = "Ethernet MAC interrupt mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`macimr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`macimr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MacimrSpec ; impl crate :: RegisterSpec for MacimrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`macimr::R`](R) reader structure"] impl crate :: Readable for MacimrSpec { } # [doc = "`write(|w| ..)` method takes [`macimr::W`](W) writer structure"] impl crate :: Writable for MacimrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets MACIMR to value 0"] impl crate :: Resettable for MacimrSpec { }