# [doc = "Register `DIER` reader"] pub type R = crate :: R < DierSpec > ; # [doc = "Register `DIER` writer"] pub type W = crate :: W < DierSpec > ; # [doc = "Update interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Uie { # [doc = "0: Update interrupt disabled"] Disabled = 0 , # [doc = "1: Update interrupt enabled"] Enabled = 1 , } impl From < Uie > for bool { # [inline (always)] fn from (variant : Uie) -> Self { variant as u8 != 0 } } # [doc = "Field `UIE` reader - Update interrupt enable"] pub type UieR = crate :: BitReader < Uie > ; impl UieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Uie { match self . bits { false => Uie :: Disabled , true => Uie :: Enabled , } } # [doc = "Update interrupt disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Uie :: Disabled } # [doc = "Update interrupt enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Uie :: Enabled } } # [doc = "Field `UIE` writer - Update interrupt enable"] pub type UieW < 'a , REG > = crate :: BitWriter < 'a , REG , Uie > ; impl < 'a , REG > UieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Update interrupt disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Uie :: Disabled) } # [doc = "Update interrupt enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Uie :: Enabled) } } # [doc = "Capture/Compare %s interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Cc1ie { # [doc = "0: CCx interrupt disabled"] Disabled = 0 , # [doc = "1: CCx interrupt enabled"] Enabled = 1 , } impl From < Cc1ie > for bool { # [inline (always)] fn from (variant : Cc1ie) -> Self { variant as u8 != 0 } } # [doc = "Field `CCIE(1-2)` reader - Capture/Compare %s interrupt enable"] pub type CcieR = crate :: BitReader < Cc1ie > ; impl CcieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Cc1ie { match self . bits { false => Cc1ie :: Disabled , true => Cc1ie :: Enabled , } } # [doc = "CCx interrupt disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Cc1ie :: Disabled } # [doc = "CCx interrupt enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Cc1ie :: Enabled } } # [doc = "Field `CCIE(1-2)` writer - Capture/Compare %s interrupt enable"] pub type CcieW < 'a , REG > = crate :: BitWriter < 'a , REG , Cc1ie > ; impl < 'a , REG > CcieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "CCx interrupt disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Cc1ie :: Disabled) } # [doc = "CCx interrupt enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Cc1ie :: Enabled) } } # [doc = "Trigger interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Tie { # [doc = "0: Trigger interrupt disabled"] Disabled = 0 , # [doc = "1: Trigger interrupt enabled"] Enabled = 1 , } impl From < Tie > for bool { # [inline (always)] fn from (variant : Tie) -> Self { variant as u8 != 0 } } # [doc = "Field `TIE` reader - Trigger interrupt enable"] pub type TieR = crate :: BitReader < Tie > ; impl TieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Tie { match self . bits { false => Tie :: Disabled , true => Tie :: Enabled , } } # [doc = "Trigger interrupt disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Tie :: Disabled } # [doc = "Trigger interrupt enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Tie :: Enabled } } # [doc = "Field `TIE` writer - Trigger interrupt enable"] pub type TieW < 'a , REG > = crate :: BitWriter < 'a , REG , Tie > ; impl < 'a , REG > TieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Trigger interrupt disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Tie :: Disabled) } # [doc = "Trigger interrupt enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Tie :: Enabled) } } impl R { # [doc = "Bit 0 - Update interrupt enable"] # [inline (always)] pub fn uie (& self) -> UieR { UieR :: new ((self . bits & 1) != 0) } # [doc = "Capture/Compare (1-2) interrupt enable"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `CC1IE` field.</div>"] # [inline (always)] pub fn ccie (& self , n : u8) -> CcieR { # [allow (clippy :: no_effect)] [() ; 2] [n as usize] ; CcieR :: new (((self . bits >> (n + 1)) & 1) != 0) } # [doc = "Iterator for array of:"] # [doc = "Capture/Compare (1-2) interrupt enable"] # [inline (always)] pub fn ccie_iter (& self) -> impl Iterator < Item = CcieR > + '_ { (0 .. 2) . map (move | n | CcieR :: new (((self . bits >> (n + 1)) & 1) != 0)) } # [doc = "Bit 1 - Capture/Compare 1 interrupt enable"] # [inline (always)] pub fn cc1ie (& self) -> CcieR { CcieR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Capture/Compare 2 interrupt enable"] # [inline (always)] pub fn cc2ie (& self) -> CcieR { CcieR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 6 - Trigger interrupt enable"] # [inline (always)] pub fn tie (& self) -> TieR { TieR :: new (((self . bits >> 6) & 1) != 0) } } impl W { # [doc = "Bit 0 - Update interrupt enable"] # [inline (always)] pub fn uie (& mut self) -> UieW < DierSpec > { UieW :: new (self , 0) } # [doc = "Capture/Compare (1-2) interrupt enable"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is number of field in register. `n == 0` corresponds to `CC1IE` field.</div>"] # [inline (always)] pub fn ccie (& mut self , n : u8) -> CcieW < DierSpec > { # [allow (clippy :: no_effect)] [() ; 2] [n as usize] ; CcieW :: new (self , n + 1) } # [doc = "Bit 1 - Capture/Compare 1 interrupt enable"] # [inline (always)] pub fn cc1ie (& mut self) -> CcieW < DierSpec > { CcieW :: new (self , 1) } # [doc = "Bit 2 - Capture/Compare 2 interrupt enable"] # [inline (always)] pub fn cc2ie (& mut self) -> CcieW < DierSpec > { CcieW :: new (self , 2) } # [doc = "Bit 6 - Trigger interrupt enable"] # [inline (always)] pub fn tie (& mut self) -> TieW < DierSpec > { TieW :: new (self , 6) } } # [doc = "DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dier::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dier::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DierSpec ; impl crate :: RegisterSpec for DierSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`dier::R`](R) reader structure"] impl crate :: Readable for DierSpec { } # [doc = "`write(|w| ..)` method takes [`dier::W`](W) writer structure"] impl crate :: Writable for DierSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets DIER to value 0"] impl crate :: Resettable for DierSpec { }