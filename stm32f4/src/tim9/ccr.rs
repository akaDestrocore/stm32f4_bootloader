# [doc = "Register `CCR%s` reader"] pub type R = crate :: R < CcrSpec > ; # [doc = "Register `CCR%s` writer"] pub type W = crate :: W < CcrSpec > ; # [doc = "Field `CCR` reader - Capture/Compare value"] pub type CcrR = crate :: FieldReader < u16 > ; # [doc = "Field `CCR` writer - Capture/Compare value"] pub type CcrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 , crate :: Safe > ; impl R { # [doc = "Bits 0:15 - Capture/Compare value"] # [inline (always)] pub fn ccr (& self) -> CcrR { CcrR :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15 - Capture/Compare value"] # [inline (always)] pub fn ccr (& mut self) -> CcrW < CcrSpec > { CcrW :: new (self , 0) } } # [doc = "capture/compare register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CcrSpec ; impl crate :: RegisterSpec for CcrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`ccr::R`](R) reader structure"] impl crate :: Readable for CcrSpec { } # [doc = "`write(|w| ..)` method takes [`ccr::W`](W) writer structure"] impl crate :: Writable for CcrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CCR%s to value 0"] impl crate :: Resettable for CcrSpec { }