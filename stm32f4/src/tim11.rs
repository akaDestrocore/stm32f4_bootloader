# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { cr1 : Cr1 , _reserved1 : [u8 ; 0x08] , dier : Dier , sr : Sr , egr : Egr , _reserved_4_ccmr1 : [u8 ; 0x04] , _reserved5 : [u8 ; 0x04] , ccer : Ccer , cnt : Cnt , psc : Psc , arr : Arr , _reserved9 : [u8 ; 0x04] , ccr : [Ccr ; 1] , _reserved10 : [u8 ; 0x18] , or : Or , } impl RegisterBlock { # [doc = "0x00 - control register 1"] # [inline (always)] pub const fn cr1 (& self) -> & Cr1 { & self . cr1 } # [doc = "0x0c - DMA/Interrupt enable register"] # [inline (always)] pub const fn dier (& self) -> & Dier { & self . dier } # [doc = "0x10 - status register"] # [inline (always)] pub const fn sr (& self) -> & Sr { & self . sr } # [doc = "0x14 - event generation register"] # [inline (always)] pub const fn egr (& self) -> & Egr { & self . egr } # [doc = "0x18 - capture/compare mode register 1 (input mode)"] # [inline (always)] pub const fn ccmr1_input (& self) -> & Ccmr1Input { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } } # [doc = "0x18 - capture/compare mode register 1 (output mode)"] # [inline (always)] pub const fn ccmr1_output (& self) -> & Ccmr1Output { unsafe { & * core :: ptr :: from_ref (self) . cast :: < u8 > () . add (24) . cast () } } # [doc = "0x20 - capture/compare enable register"] # [inline (always)] pub const fn ccer (& self) -> & Ccer { & self . ccer } # [doc = "0x24 - counter"] # [inline (always)] pub const fn cnt (& self) -> & Cnt { & self . cnt } # [doc = "0x28 - prescaler"] # [inline (always)] pub const fn psc (& self) -> & Psc { & self . psc } # [doc = "0x2c - auto-reload register"] # [inline (always)] pub const fn arr (& self) -> & Arr { & self . arr } # [doc = "0x34 - capture/compare register"] # [doc = ""] # [doc = "<div class=\"warning\">`n` is the index of register in the array. `n == 0` corresponds to `CCR1` register.</div>"] # [inline (always)] pub const fn ccr (& self , n : usize) -> & Ccr { & self . ccr [n] } # [doc = "Iterator for array of:"] # [doc = "0x34 - capture/compare register"] # [inline (always)] pub fn ccr_iter (& self) -> impl Iterator < Item = & Ccr > { self . ccr . iter () } # [doc = "0x34 - capture/compare register"] # [inline (always)] pub const fn ccr1 (& self) -> & Ccr { self . ccr (0) } # [doc = "0x50 - option register"] # [inline (always)] pub const fn or (& self) -> & Or { & self . or } } pub use crate :: tim10 :: Cr1 as Cr1 ; pub use crate :: tim10 :: cr1 as cr1 ; pub use crate :: tim10 :: Dier as Dier ; pub use crate :: tim10 :: dier as dier ; pub use crate :: tim10 :: Sr as Sr ; pub use crate :: tim10 :: sr as sr ; pub use crate :: tim10 :: Egr as Egr ; pub use crate :: tim10 :: egr as egr ; pub use crate :: tim10 :: Ccmr1Output as Ccmr1Output ; pub use crate :: tim10 :: ccmr1_output as ccmr1_output ; pub use crate :: tim10 :: Ccmr1Input as Ccmr1Input ; pub use crate :: tim10 :: ccmr1_input as ccmr1_input ; pub use crate :: tim10 :: Ccer as Ccer ; pub use crate :: tim10 :: ccer as ccer ; pub use crate :: tim10 :: Cnt as Cnt ; pub use crate :: tim10 :: cnt as cnt ; pub use crate :: tim10 :: Psc as Psc ; pub use crate :: tim10 :: psc as psc ; pub use crate :: tim10 :: Arr as Arr ; pub use crate :: tim10 :: arr as arr ; # [doc = "CCR (rw) register accessor: capture/compare register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr`] module"] # [doc (alias = "CCR")] pub type Ccr = crate :: Reg < ccr :: CcrSpec > ; # [doc = "capture/compare register"] pub mod ccr ; # [doc = "OR (rw) register accessor: option register\n\nYou can [`read`](crate::Reg::read) this register and get [`or::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`or::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@or`] module"] # [doc (alias = "OR")] pub type Or = crate :: Reg < or :: OrSpec > ; # [doc = "option register"] pub mod or ;