# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { moder : Moder , otyper : Otyper , ospeedr : Ospeedr , pupdr : Pupdr , idr : Idr , odr : Odr , bsrr : Bsrr , lckr : Lckr , afrl : Afrl , afrh : Afrh , } impl RegisterBlock { # [doc = "0x00 - GPIO port mode register"] # [inline (always)] pub const fn moder (& self) -> & Moder { & self . moder } # [doc = "0x04 - GPIO port output type register"] # [inline (always)] pub const fn otyper (& self) -> & Otyper { & self . otyper } # [doc = "0x08 - GPIO port output speed register"] # [inline (always)] pub const fn ospeedr (& self) -> & Ospeedr { & self . ospeedr } # [doc = "0x0c - GPIO port pull-up/pull-down register"] # [inline (always)] pub const fn pupdr (& self) -> & Pupdr { & self . pupdr } # [doc = "0x10 - GPIO port input data register"] # [inline (always)] pub const fn idr (& self) -> & Idr { & self . idr } # [doc = "0x14 - GPIO port output data register"] # [inline (always)] pub const fn odr (& self) -> & Odr { & self . odr } # [doc = "0x18 - GPIO port bit set/reset register"] # [inline (always)] pub const fn bsrr (& self) -> & Bsrr { & self . bsrr } # [doc = "0x1c - GPIO port configuration lock register"] # [inline (always)] pub const fn lckr (& self) -> & Lckr { & self . lckr } # [doc = "0x20 - GPIO alternate function low register"] # [inline (always)] pub const fn afrl (& self) -> & Afrl { & self . afrl } # [doc = "0x24 - GPIO alternate function high register"] # [inline (always)] pub const fn afrh (& self) -> & Afrh { & self . afrh } } # [doc = "MODER (rw) register accessor: GPIO port mode register\n\nYou can [`read`](crate::Reg::read) this register and get [`moder::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`moder::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@moder`] module"] # [doc (alias = "MODER")] pub type Moder = crate :: Reg < moder :: ModerSpec > ; # [doc = "GPIO port mode register"] pub mod moder ; pub use crate :: gpioa :: Otyper as Otyper ; pub use crate :: gpioa :: otyper as otyper ; # [doc = "OSPEEDR (rw) register accessor: GPIO port output speed register\n\nYou can [`read`](crate::Reg::read) this register and get [`ospeedr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ospeedr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ospeedr`] module"] # [doc (alias = "OSPEEDR")] pub type Ospeedr = crate :: Reg < ospeedr :: OspeedrSpec > ; # [doc = "GPIO port output speed register"] pub mod ospeedr ; # [doc = "PUPDR (rw) register accessor: GPIO port pull-up/pull-down register\n\nYou can [`read`](crate::Reg::read) this register and get [`pupdr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pupdr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pupdr`] module"] # [doc (alias = "PUPDR")] pub type Pupdr = crate :: Reg < pupdr :: PupdrSpec > ; # [doc = "GPIO port pull-up/pull-down register"] pub mod pupdr ; pub use crate :: gpioa :: Idr as Idr ; pub use crate :: gpioa :: idr as idr ; pub use crate :: gpioa :: Odr as Odr ; pub use crate :: gpioa :: odr as odr ; pub use crate :: gpioa :: Bsrr as Bsrr ; pub use crate :: gpioa :: bsrr as bsrr ; pub use crate :: gpioa :: Lckr as Lckr ; pub use crate :: gpioa :: lckr as lckr ; pub use crate :: gpioa :: Afrl as Afrl ; pub use crate :: gpioa :: afrl as afrl ; pub use crate :: gpioa :: Afrh as Afrh ; pub use crate :: gpioa :: afrh as afrh ;