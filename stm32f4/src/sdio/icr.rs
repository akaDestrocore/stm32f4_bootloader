# [doc = "Register `ICR` reader"] pub type R = crate :: R < IcrSpec > ; # [doc = "Register `ICR` writer"] pub type W = crate :: W < IcrSpec > ; # [doc = "CCRCFAIL flag clear bit\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ccrcfailcw { # [doc = "1: Clear flag"] Clear = 1 , } impl From < Ccrcfailcw > for bool { # [inline (always)] fn from (variant : Ccrcfailcw) -> Self { variant as u8 != 0 } } # [doc = "Field `CCRCFAILC` reader - CCRCFAIL flag clear bit"] pub type CcrcfailcR = crate :: BitReader < Ccrcfailcw > ; impl CcrcfailcR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Ccrcfailcw > { match self . bits { true => Some (Ccrcfailcw :: Clear) , _ => None , } } # [doc = "Clear flag"] # [inline (always)] pub fn is_clear (& self) -> bool { * self == Ccrcfailcw :: Clear } } # [doc = "Field `CCRCFAILC` writer - CCRCFAIL flag clear bit"] pub type CcrcfailcW < 'a , REG > = crate :: BitWriter < 'a , REG , Ccrcfailcw > ; impl < 'a , REG > CcrcfailcW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Clear flag"] # [inline (always)] pub fn clear (self) -> & 'a mut crate :: W < REG > { self . variant (Ccrcfailcw :: Clear) } } # [doc = "Field `DCRCFAILC` reader - DCRCFAIL flag clear bit"] pub use CcrcfailcR as DcrcfailcR ; # [doc = "Field `DCRCFAILC` writer - DCRCFAIL flag clear bit"] pub use CcrcfailcW as DcrcfailcW ; # [doc = "Field `CTIMEOUTC` reader - CTIMEOUT flag clear bit"] pub use CcrcfailcR as CtimeoutcR ; # [doc = "Field `CTIMEOUTC` writer - CTIMEOUT flag clear bit"] pub use CcrcfailcW as CtimeoutcW ; # [doc = "Field `DTIMEOUTC` reader - DTIMEOUT flag clear bit"] pub use CcrcfailcR as DtimeoutcR ; # [doc = "Field `DTIMEOUTC` writer - DTIMEOUT flag clear bit"] pub use CcrcfailcW as DtimeoutcW ; # [doc = "Field `TXUNDERRC` reader - TXUNDERR flag clear bit"] pub use CcrcfailcR as TxunderrcR ; # [doc = "Field `TXUNDERRC` writer - TXUNDERR flag clear bit"] pub use CcrcfailcW as TxunderrcW ; # [doc = "Field `RXOVERRC` reader - RXOVERR flag clear bit"] pub use CcrcfailcR as RxoverrcR ; # [doc = "Field `RXOVERRC` writer - RXOVERR flag clear bit"] pub use CcrcfailcW as RxoverrcW ; # [doc = "Field `CMDRENDC` reader - CMDREND flag clear bit"] pub use CcrcfailcR as CmdrendcR ; # [doc = "Field `CMDRENDC` writer - CMDREND flag clear bit"] pub use CcrcfailcW as CmdrendcW ; # [doc = "Field `CMDSENTC` reader - CMDSENT flag clear bit"] pub use CcrcfailcR as CmdsentcR ; # [doc = "Field `CMDSENTC` writer - CMDSENT flag clear bit"] pub use CcrcfailcW as CmdsentcW ; # [doc = "Field `DATAENDC` reader - DATAEND flag clear bit"] pub use CcrcfailcR as DataendcR ; # [doc = "Field `DATAENDC` writer - DATAEND flag clear bit"] pub use CcrcfailcW as DataendcW ; # [doc = "Field `STBITERRC` reader - STBITERR flag clear bit"] pub use CcrcfailcR as StbiterrcR ; # [doc = "Field `STBITERRC` writer - STBITERR flag clear bit"] pub use CcrcfailcW as StbiterrcW ; # [doc = "Field `DBCKENDC` reader - DBCKEND flag clear bit"] pub use CcrcfailcR as DbckendcR ; # [doc = "Field `DBCKENDC` writer - DBCKEND flag clear bit"] pub use CcrcfailcW as DbckendcW ; # [doc = "Field `SDIOITC` reader - SDIOIT flag clear bit"] pub use CcrcfailcR as SdioitcR ; # [doc = "Field `SDIOITC` writer - SDIOIT flag clear bit"] pub use CcrcfailcW as SdioitcW ; # [doc = "Field `CEATAENDC` reader - CEATAEND flag clear bit"] pub use CcrcfailcR as CeataendcR ; # [doc = "Field `CEATAENDC` writer - CEATAEND flag clear bit"] pub use CcrcfailcW as CeataendcW ; impl R { # [doc = "Bit 0 - CCRCFAIL flag clear bit"] # [inline (always)] pub fn ccrcfailc (& self) -> CcrcfailcR { CcrcfailcR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - DCRCFAIL flag clear bit"] # [inline (always)] pub fn dcrcfailc (& self) -> DcrcfailcR { DcrcfailcR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - CTIMEOUT flag clear bit"] # [inline (always)] pub fn ctimeoutc (& self) -> CtimeoutcR { CtimeoutcR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - DTIMEOUT flag clear bit"] # [inline (always)] pub fn dtimeoutc (& self) -> DtimeoutcR { DtimeoutcR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - TXUNDERR flag clear bit"] # [inline (always)] pub fn txunderrc (& self) -> TxunderrcR { TxunderrcR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - RXOVERR flag clear bit"] # [inline (always)] pub fn rxoverrc (& self) -> RxoverrcR { RxoverrcR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - CMDREND flag clear bit"] # [inline (always)] pub fn cmdrendc (& self) -> CmdrendcR { CmdrendcR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - CMDSENT flag clear bit"] # [inline (always)] pub fn cmdsentc (& self) -> CmdsentcR { CmdsentcR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - DATAEND flag clear bit"] # [inline (always)] pub fn dataendc (& self) -> DataendcR { DataendcR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - STBITERR flag clear bit"] # [inline (always)] pub fn stbiterrc (& self) -> StbiterrcR { StbiterrcR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - DBCKEND flag clear bit"] # [inline (always)] pub fn dbckendc (& self) -> DbckendcR { DbckendcR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 22 - SDIOIT flag clear bit"] # [inline (always)] pub fn sdioitc (& self) -> SdioitcR { SdioitcR :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - CEATAEND flag clear bit"] # [inline (always)] pub fn ceataendc (& self) -> CeataendcR { CeataendcR :: new (((self . bits >> 23) & 1) != 0) } } impl W { # [doc = "Bit 0 - CCRCFAIL flag clear bit"] # [inline (always)] pub fn ccrcfailc (& mut self) -> CcrcfailcW < IcrSpec > { CcrcfailcW :: new (self , 0) } # [doc = "Bit 1 - DCRCFAIL flag clear bit"] # [inline (always)] pub fn dcrcfailc (& mut self) -> DcrcfailcW < IcrSpec > { DcrcfailcW :: new (self , 1) } # [doc = "Bit 2 - CTIMEOUT flag clear bit"] # [inline (always)] pub fn ctimeoutc (& mut self) -> CtimeoutcW < IcrSpec > { CtimeoutcW :: new (self , 2) } # [doc = "Bit 3 - DTIMEOUT flag clear bit"] # [inline (always)] pub fn dtimeoutc (& mut self) -> DtimeoutcW < IcrSpec > { DtimeoutcW :: new (self , 3) } # [doc = "Bit 4 - TXUNDERR flag clear bit"] # [inline (always)] pub fn txunderrc (& mut self) -> TxunderrcW < IcrSpec > { TxunderrcW :: new (self , 4) } # [doc = "Bit 5 - RXOVERR flag clear bit"] # [inline (always)] pub fn rxoverrc (& mut self) -> RxoverrcW < IcrSpec > { RxoverrcW :: new (self , 5) } # [doc = "Bit 6 - CMDREND flag clear bit"] # [inline (always)] pub fn cmdrendc (& mut self) -> CmdrendcW < IcrSpec > { CmdrendcW :: new (self , 6) } # [doc = "Bit 7 - CMDSENT flag clear bit"] # [inline (always)] pub fn cmdsentc (& mut self) -> CmdsentcW < IcrSpec > { CmdsentcW :: new (self , 7) } # [doc = "Bit 8 - DATAEND flag clear bit"] # [inline (always)] pub fn dataendc (& mut self) -> DataendcW < IcrSpec > { DataendcW :: new (self , 8) } # [doc = "Bit 9 - STBITERR flag clear bit"] # [inline (always)] pub fn stbiterrc (& mut self) -> StbiterrcW < IcrSpec > { StbiterrcW :: new (self , 9) } # [doc = "Bit 10 - DBCKEND flag clear bit"] # [inline (always)] pub fn dbckendc (& mut self) -> DbckendcW < IcrSpec > { DbckendcW :: new (self , 10) } # [doc = "Bit 22 - SDIOIT flag clear bit"] # [inline (always)] pub fn sdioitc (& mut self) -> SdioitcW < IcrSpec > { SdioitcW :: new (self , 22) } # [doc = "Bit 23 - CEATAEND flag clear bit"] # [inline (always)] pub fn ceataendc (& mut self) -> CeataendcW < IcrSpec > { CeataendcW :: new (self , 23) } } # [doc = "interrupt clear register\n\nYou can [`read`](crate::Reg::read) this register and get [`icr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`icr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IcrSpec ; impl crate :: RegisterSpec for IcrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`icr::R`](R) reader structure"] impl crate :: Readable for IcrSpec { } # [doc = "`write(|w| ..)` method takes [`icr::W`](W) writer structure"] impl crate :: Writable for IcrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets ICR to value 0"] impl crate :: Resettable for IcrSpec { }