# [doc = "Register `MASK` reader"] pub type R = crate :: R < MaskSpec > ; # [doc = "Register `MASK` writer"] pub type W = crate :: W < MaskSpec > ; # [doc = "Command CRC fail interrupt enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Ccrcfailie { # [doc = "0: Interrupt disabled"] Disabled = 0 , # [doc = "1: Interrupt enabled"] Enabled = 1 , } impl From < Ccrcfailie > for bool { # [inline (always)] fn from (variant : Ccrcfailie) -> Self { variant as u8 != 0 } } # [doc = "Field `CCRCFAILIE` reader - Command CRC fail interrupt enable"] pub type CcrcfailieR = crate :: BitReader < Ccrcfailie > ; impl CcrcfailieR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Ccrcfailie { match self . bits { false => Ccrcfailie :: Disabled , true => Ccrcfailie :: Enabled , } } # [doc = "Interrupt disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Ccrcfailie :: Disabled } # [doc = "Interrupt enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Ccrcfailie :: Enabled } } # [doc = "Field `CCRCFAILIE` writer - Command CRC fail interrupt enable"] pub type CcrcfailieW < 'a , REG > = crate :: BitWriter < 'a , REG , Ccrcfailie > ; impl < 'a , REG > CcrcfailieW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Interrupt disabled"] # [inline (always)] pub fn disabled (self) -> & 'a mut crate :: W < REG > { self . variant (Ccrcfailie :: Disabled) } # [doc = "Interrupt enabled"] # [inline (always)] pub fn enabled (self) -> & 'a mut crate :: W < REG > { self . variant (Ccrcfailie :: Enabled) } } # [doc = "Field `DCRCFAILIE` reader - Data CRC fail interrupt enable"] pub use CcrcfailieR as DcrcfailieR ; # [doc = "Field `DCRCFAILIE` writer - Data CRC fail interrupt enable"] pub use CcrcfailieW as DcrcfailieW ; # [doc = "Field `CTIMEOUTIE` reader - Command timeout interrupt enable"] pub use CcrcfailieR as CtimeoutieR ; # [doc = "Field `CTIMEOUTIE` writer - Command timeout interrupt enable"] pub use CcrcfailieW as CtimeoutieW ; # [doc = "Field `DTIMEOUTIE` reader - Data timeout interrupt enable"] pub use CcrcfailieR as DtimeoutieR ; # [doc = "Field `DTIMEOUTIE` writer - Data timeout interrupt enable"] pub use CcrcfailieW as DtimeoutieW ; # [doc = "Field `TXUNDERRIE` reader - Tx FIFO underrun error interrupt enable"] pub use CcrcfailieR as TxunderrieR ; # [doc = "Field `TXUNDERRIE` writer - Tx FIFO underrun error interrupt enable"] pub use CcrcfailieW as TxunderrieW ; # [doc = "Field `RXOVERRIE` reader - Rx FIFO overrun error interrupt enable"] pub use CcrcfailieR as RxoverrieR ; # [doc = "Field `RXOVERRIE` writer - Rx FIFO overrun error interrupt enable"] pub use CcrcfailieW as RxoverrieW ; # [doc = "Field `CMDRENDIE` reader - Command response received interrupt enable"] pub use CcrcfailieR as CmdrendieR ; # [doc = "Field `CMDRENDIE` writer - Command response received interrupt enable"] pub use CcrcfailieW as CmdrendieW ; # [doc = "Field `CMDSENTIE` reader - Command sent interrupt enable"] pub use CcrcfailieR as CmdsentieR ; # [doc = "Field `CMDSENTIE` writer - Command sent interrupt enable"] pub use CcrcfailieW as CmdsentieW ; # [doc = "Field `DATAENDIE` reader - Data end interrupt enable"] pub use CcrcfailieR as DataendieR ; # [doc = "Field `DATAENDIE` writer - Data end interrupt enable"] pub use CcrcfailieW as DataendieW ; # [doc = "Field `STBITERRIE` reader - Start bit error interrupt enable"] pub use CcrcfailieR as StbiterrieR ; # [doc = "Field `STBITERRIE` writer - Start bit error interrupt enable"] pub use CcrcfailieW as StbiterrieW ; # [doc = "Field `DBCKENDIE` reader - Data block end interrupt enable"] pub use CcrcfailieR as DbckendieR ; # [doc = "Field `DBCKENDIE` writer - Data block end interrupt enable"] pub use CcrcfailieW as DbckendieW ; # [doc = "Field `CMDACTIE` reader - Command acting interrupt enable"] pub use CcrcfailieR as CmdactieR ; # [doc = "Field `CMDACTIE` writer - Command acting interrupt enable"] pub use CcrcfailieW as CmdactieW ; # [doc = "Field `TXACTIE` reader - Data transmit acting interrupt enable"] pub use CcrcfailieR as TxactieR ; # [doc = "Field `TXACTIE` writer - Data transmit acting interrupt enable"] pub use CcrcfailieW as TxactieW ; # [doc = "Field `RXACTIE` reader - Data receive acting interrupt enable"] pub use CcrcfailieR as RxactieR ; # [doc = "Field `RXACTIE` writer - Data receive acting interrupt enable"] pub use CcrcfailieW as RxactieW ; # [doc = "Field `TXFIFOHEIE` reader - Tx FIFO half empty interrupt enable"] pub use CcrcfailieR as TxfifoheieR ; # [doc = "Field `TXFIFOHEIE` writer - Tx FIFO half empty interrupt enable"] pub use CcrcfailieW as TxfifoheieW ; # [doc = "Field `RXFIFOHFIE` reader - Rx FIFO half full interrupt enable"] pub use CcrcfailieR as RxfifohfieR ; # [doc = "Field `RXFIFOHFIE` writer - Rx FIFO half full interrupt enable"] pub use CcrcfailieW as RxfifohfieW ; # [doc = "Field `TXFIFOFIE` reader - Tx FIFO full interrupt enable"] pub use CcrcfailieR as TxfifofieR ; # [doc = "Field `TXFIFOFIE` writer - Tx FIFO full interrupt enable"] pub use CcrcfailieW as TxfifofieW ; # [doc = "Field `RXFIFOFIE` reader - Rx FIFO full interrupt enable"] pub use CcrcfailieR as RxfifofieR ; # [doc = "Field `RXFIFOFIE` writer - Rx FIFO full interrupt enable"] pub use CcrcfailieW as RxfifofieW ; # [doc = "Field `TXFIFOEIE` reader - Tx FIFO empty interrupt enable"] pub use CcrcfailieR as TxfifoeieR ; # [doc = "Field `TXFIFOEIE` writer - Tx FIFO empty interrupt enable"] pub use CcrcfailieW as TxfifoeieW ; # [doc = "Field `RXFIFOEIE` reader - Rx FIFO empty interrupt enable"] pub use CcrcfailieR as RxfifoeieR ; # [doc = "Field `RXFIFOEIE` writer - Rx FIFO empty interrupt enable"] pub use CcrcfailieW as RxfifoeieW ; # [doc = "Field `TXDAVLIE` reader - Data available in Tx FIFO interrupt enable"] pub use CcrcfailieR as TxdavlieR ; # [doc = "Field `TXDAVLIE` writer - Data available in Tx FIFO interrupt enable"] pub use CcrcfailieW as TxdavlieW ; # [doc = "Field `RXDAVLIE` reader - Data available in Rx FIFO interrupt enable"] pub use CcrcfailieR as RxdavlieR ; # [doc = "Field `RXDAVLIE` writer - Data available in Rx FIFO interrupt enable"] pub use CcrcfailieW as RxdavlieW ; # [doc = "Field `SDIOITIE` reader - SDIO mode interrupt received interrupt enable"] pub use CcrcfailieR as SdioitieR ; # [doc = "Field `SDIOITIE` writer - SDIO mode interrupt received interrupt enable"] pub use CcrcfailieW as SdioitieW ; # [doc = "Field `CEATAENDIE` reader - CE-ATA command completion signal received interrupt enable"] pub use CcrcfailieR as CeataendieR ; # [doc = "Field `CEATAENDIE` writer - CE-ATA command completion signal received interrupt enable"] pub use CcrcfailieW as CeataendieW ; impl R { # [doc = "Bit 0 - Command CRC fail interrupt enable"] # [inline (always)] pub fn ccrcfailie (& self) -> CcrcfailieR { CcrcfailieR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Data CRC fail interrupt enable"] # [inline (always)] pub fn dcrcfailie (& self) -> DcrcfailieR { DcrcfailieR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Command timeout interrupt enable"] # [inline (always)] pub fn ctimeoutie (& self) -> CtimeoutieR { CtimeoutieR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Data timeout interrupt enable"] # [inline (always)] pub fn dtimeoutie (& self) -> DtimeoutieR { DtimeoutieR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Tx FIFO underrun error interrupt enable"] # [inline (always)] pub fn txunderrie (& self) -> TxunderrieR { TxunderrieR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Rx FIFO overrun error interrupt enable"] # [inline (always)] pub fn rxoverrie (& self) -> RxoverrieR { RxoverrieR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Command response received interrupt enable"] # [inline (always)] pub fn cmdrendie (& self) -> CmdrendieR { CmdrendieR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Command sent interrupt enable"] # [inline (always)] pub fn cmdsentie (& self) -> CmdsentieR { CmdsentieR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Data end interrupt enable"] # [inline (always)] pub fn dataendie (& self) -> DataendieR { DataendieR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Start bit error interrupt enable"] # [inline (always)] pub fn stbiterrie (& self) -> StbiterrieR { StbiterrieR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Data block end interrupt enable"] # [inline (always)] pub fn dbckendie (& self) -> DbckendieR { DbckendieR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Command acting interrupt enable"] # [inline (always)] pub fn cmdactie (& self) -> CmdactieR { CmdactieR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Data transmit acting interrupt enable"] # [inline (always)] pub fn txactie (& self) -> TxactieR { TxactieR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Data receive acting interrupt enable"] # [inline (always)] pub fn rxactie (& self) -> RxactieR { RxactieR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Tx FIFO half empty interrupt enable"] # [inline (always)] pub fn txfifoheie (& self) -> TxfifoheieR { TxfifoheieR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Rx FIFO half full interrupt enable"] # [inline (always)] pub fn rxfifohfie (& self) -> RxfifohfieR { RxfifohfieR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Tx FIFO full interrupt enable"] # [inline (always)] pub fn txfifofie (& self) -> TxfifofieR { TxfifofieR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - Rx FIFO full interrupt enable"] # [inline (always)] pub fn rxfifofie (& self) -> RxfifofieR { RxfifofieR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - Tx FIFO empty interrupt enable"] # [inline (always)] pub fn txfifoeie (& self) -> TxfifoeieR { TxfifoeieR :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - Rx FIFO empty interrupt enable"] # [inline (always)] pub fn rxfifoeie (& self) -> RxfifoeieR { RxfifoeieR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - Data available in Tx FIFO interrupt enable"] # [inline (always)] pub fn txdavlie (& self) -> TxdavlieR { TxdavlieR :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - Data available in Rx FIFO interrupt enable"] # [inline (always)] pub fn rxdavlie (& self) -> RxdavlieR { RxdavlieR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - SDIO mode interrupt received interrupt enable"] # [inline (always)] pub fn sdioitie (& self) -> SdioitieR { SdioitieR :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - CE-ATA command completion signal received interrupt enable"] # [inline (always)] pub fn ceataendie (& self) -> CeataendieR { CeataendieR :: new (((self . bits >> 23) & 1) != 0) } } impl W { # [doc = "Bit 0 - Command CRC fail interrupt enable"] # [inline (always)] pub fn ccrcfailie (& mut self) -> CcrcfailieW < MaskSpec > { CcrcfailieW :: new (self , 0) } # [doc = "Bit 1 - Data CRC fail interrupt enable"] # [inline (always)] pub fn dcrcfailie (& mut self) -> DcrcfailieW < MaskSpec > { DcrcfailieW :: new (self , 1) } # [doc = "Bit 2 - Command timeout interrupt enable"] # [inline (always)] pub fn ctimeoutie (& mut self) -> CtimeoutieW < MaskSpec > { CtimeoutieW :: new (self , 2) } # [doc = "Bit 3 - Data timeout interrupt enable"] # [inline (always)] pub fn dtimeoutie (& mut self) -> DtimeoutieW < MaskSpec > { DtimeoutieW :: new (self , 3) } # [doc = "Bit 4 - Tx FIFO underrun error interrupt enable"] # [inline (always)] pub fn txunderrie (& mut self) -> TxunderrieW < MaskSpec > { TxunderrieW :: new (self , 4) } # [doc = "Bit 5 - Rx FIFO overrun error interrupt enable"] # [inline (always)] pub fn rxoverrie (& mut self) -> RxoverrieW < MaskSpec > { RxoverrieW :: new (self , 5) } # [doc = "Bit 6 - Command response received interrupt enable"] # [inline (always)] pub fn cmdrendie (& mut self) -> CmdrendieW < MaskSpec > { CmdrendieW :: new (self , 6) } # [doc = "Bit 7 - Command sent interrupt enable"] # [inline (always)] pub fn cmdsentie (& mut self) -> CmdsentieW < MaskSpec > { CmdsentieW :: new (self , 7) } # [doc = "Bit 8 - Data end interrupt enable"] # [inline (always)] pub fn dataendie (& mut self) -> DataendieW < MaskSpec > { DataendieW :: new (self , 8) } # [doc = "Bit 9 - Start bit error interrupt enable"] # [inline (always)] pub fn stbiterrie (& mut self) -> StbiterrieW < MaskSpec > { StbiterrieW :: new (self , 9) } # [doc = "Bit 10 - Data block end interrupt enable"] # [inline (always)] pub fn dbckendie (& mut self) -> DbckendieW < MaskSpec > { DbckendieW :: new (self , 10) } # [doc = "Bit 11 - Command acting interrupt enable"] # [inline (always)] pub fn cmdactie (& mut self) -> CmdactieW < MaskSpec > { CmdactieW :: new (self , 11) } # [doc = "Bit 12 - Data transmit acting interrupt enable"] # [inline (always)] pub fn txactie (& mut self) -> TxactieW < MaskSpec > { TxactieW :: new (self , 12) } # [doc = "Bit 13 - Data receive acting interrupt enable"] # [inline (always)] pub fn rxactie (& mut self) -> RxactieW < MaskSpec > { RxactieW :: new (self , 13) } # [doc = "Bit 14 - Tx FIFO half empty interrupt enable"] # [inline (always)] pub fn txfifoheie (& mut self) -> TxfifoheieW < MaskSpec > { TxfifoheieW :: new (self , 14) } # [doc = "Bit 15 - Rx FIFO half full interrupt enable"] # [inline (always)] pub fn rxfifohfie (& mut self) -> RxfifohfieW < MaskSpec > { RxfifohfieW :: new (self , 15) } # [doc = "Bit 16 - Tx FIFO full interrupt enable"] # [inline (always)] pub fn txfifofie (& mut self) -> TxfifofieW < MaskSpec > { TxfifofieW :: new (self , 16) } # [doc = "Bit 17 - Rx FIFO full interrupt enable"] # [inline (always)] pub fn rxfifofie (& mut self) -> RxfifofieW < MaskSpec > { RxfifofieW :: new (self , 17) } # [doc = "Bit 18 - Tx FIFO empty interrupt enable"] # [inline (always)] pub fn txfifoeie (& mut self) -> TxfifoeieW < MaskSpec > { TxfifoeieW :: new (self , 18) } # [doc = "Bit 19 - Rx FIFO empty interrupt enable"] # [inline (always)] pub fn rxfifoeie (& mut self) -> RxfifoeieW < MaskSpec > { RxfifoeieW :: new (self , 19) } # [doc = "Bit 20 - Data available in Tx FIFO interrupt enable"] # [inline (always)] pub fn txdavlie (& mut self) -> TxdavlieW < MaskSpec > { TxdavlieW :: new (self , 20) } # [doc = "Bit 21 - Data available in Rx FIFO interrupt enable"] # [inline (always)] pub fn rxdavlie (& mut self) -> RxdavlieW < MaskSpec > { RxdavlieW :: new (self , 21) } # [doc = "Bit 22 - SDIO mode interrupt received interrupt enable"] # [inline (always)] pub fn sdioitie (& mut self) -> SdioitieW < MaskSpec > { SdioitieW :: new (self , 22) } # [doc = "Bit 23 - CE-ATA command completion signal received interrupt enable"] # [inline (always)] pub fn ceataendie (& mut self) -> CeataendieW < MaskSpec > { CeataendieW :: new (self , 23) } } # [doc = "mask register\n\nYou can [`read`](crate::Reg::read) this register and get [`mask::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`mask::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct MaskSpec ; impl crate :: RegisterSpec for MaskSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`mask::R`](R) reader structure"] impl crate :: Readable for MaskSpec { } # [doc = "`write(|w| ..)` method takes [`mask::W`](W) writer structure"] impl crate :: Writable for MaskSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets MASK to value 0"] impl crate :: Resettable for MaskSpec { }