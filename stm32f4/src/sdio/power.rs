# [doc = "Register `POWER` reader"] pub type R = crate :: R < PowerSpec > ; # [doc = "Register `POWER` writer"] pub type W = crate :: W < PowerSpec > ; # [doc = "PWRCTRL\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] # [repr (u8)] pub enum Pwrctrl { # [doc = "0: Power off"] PowerOff = 0 , # [doc = "3: Power on"] PowerOn = 3 , } impl From < Pwrctrl > for u8 { # [inline (always)] fn from (variant : Pwrctrl) -> Self { variant as _ } } impl crate :: FieldSpec for Pwrctrl { type Ux = u8 ; } impl crate :: IsEnum for Pwrctrl { } # [doc = "Field `PWRCTRL` reader - PWRCTRL"] pub type PwrctrlR = crate :: FieldReader < Pwrctrl > ; impl PwrctrlR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Option < Pwrctrl > { match self . bits { 0 => Some (Pwrctrl :: PowerOff) , 3 => Some (Pwrctrl :: PowerOn) , _ => None , } } # [doc = "Power off"] # [inline (always)] pub fn is_power_off (& self) -> bool { * self == Pwrctrl :: PowerOff } # [doc = "Power on"] # [inline (always)] pub fn is_power_on (& self) -> bool { * self == Pwrctrl :: PowerOn } } # [doc = "Field `PWRCTRL` writer - PWRCTRL"] pub type PwrctrlW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 , Pwrctrl > ; impl < 'a , REG > PwrctrlW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , REG :: Ux : From < u8 > { # [doc = "Power off"] # [inline (always)] pub fn power_off (self) -> & 'a mut crate :: W < REG > { self . variant (Pwrctrl :: PowerOff) } # [doc = "Power on"] # [inline (always)] pub fn power_on (self) -> & 'a mut crate :: W < REG > { self . variant (Pwrctrl :: PowerOn) } } impl R { # [doc = "Bits 0:1 - PWRCTRL"] # [inline (always)] pub fn pwrctrl (& self) -> PwrctrlR { PwrctrlR :: new ((self . bits & 3) as u8) } } impl W { # [doc = "Bits 0:1 - PWRCTRL"] # [inline (always)] pub fn pwrctrl (& mut self) -> PwrctrlW < PowerSpec > { PwrctrlW :: new (self , 0) } } # [doc = "power control register\n\nYou can [`read`](crate::Reg::read) this register and get [`power::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`power::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct PowerSpec ; impl crate :: RegisterSpec for PowerSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`power::R`](R) reader structure"] impl crate :: Readable for PowerSpec { } # [doc = "`write(|w| ..)` method takes [`power::W`](W) writer structure"] impl crate :: Writable for PowerSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets POWER to value 0"] impl crate :: Resettable for PowerSpec { }