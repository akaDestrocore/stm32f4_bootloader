# [doc = "Register `OAR2` reader"] pub type R = crate :: R < Oar2Spec > ; # [doc = "Register `OAR2` writer"] pub type W = crate :: W < Oar2Spec > ; # [doc = "Dual addressing mode enable\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Endual { # [doc = "0: Single addressing mode"] Single = 0 , # [doc = "1: Dual addressing mode"] Dual = 1 , } impl From < Endual > for bool { # [inline (always)] fn from (variant : Endual) -> Self { variant as u8 != 0 } } # [doc = "Field `ENDUAL` reader - Dual addressing mode enable"] pub type EndualR = crate :: BitReader < Endual > ; impl EndualR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Endual { match self . bits { false => Endual :: Single , true => Endual :: Dual , } } # [doc = "Single addressing mode"] # [inline (always)] pub fn is_single (& self) -> bool { * self == Endual :: Single } # [doc = "Dual addressing mode"] # [inline (always)] pub fn is_dual (& self) -> bool { * self == Endual :: Dual } } # [doc = "Field `ENDUAL` writer - Dual addressing mode enable"] pub type EndualW < 'a , REG > = crate :: BitWriter < 'a , REG , Endual > ; impl < 'a , REG > EndualW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Single addressing mode"] # [inline (always)] pub fn single (self) -> & 'a mut crate :: W < REG > { self . variant (Endual :: Single) } # [doc = "Dual addressing mode"] # [inline (always)] pub fn dual (self) -> & 'a mut crate :: W < REG > { self . variant (Endual :: Dual) } } # [doc = "Field `ADD2` reader - Interface address"] pub type Add2R = crate :: FieldReader ; # [doc = "Field `ADD2` writer - Interface address"] pub type Add2W < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 , u8 , crate :: Safe > ; impl R { # [doc = "Bit 0 - Dual addressing mode enable"] # [inline (always)] pub fn endual (& self) -> EndualR { EndualR :: new ((self . bits & 1) != 0) } # [doc = "Bits 1:7 - Interface address"] # [inline (always)] pub fn add2 (& self) -> Add2R { Add2R :: new (((self . bits >> 1) & 0x7f) as u8) } } impl W { # [doc = "Bit 0 - Dual addressing mode enable"] # [inline (always)] pub fn endual (& mut self) -> EndualW < Oar2Spec > { EndualW :: new (self , 0) } # [doc = "Bits 1:7 - Interface address"] # [inline (always)] pub fn add2 (& mut self) -> Add2W < Oar2Spec > { Add2W :: new (self , 1) } } # [doc = "Own address register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`oar2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`oar2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Oar2Spec ; impl crate :: RegisterSpec for Oar2Spec { type Ux = u16 ; } # [doc = "`read()` method returns [`oar2::R`](R) reader structure"] impl crate :: Readable for Oar2Spec { } # [doc = "`write(|w| ..)` method takes [`oar2::W`](W) writer structure"] impl crate :: Writable for Oar2Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets OAR2 to value 0"] impl crate :: Resettable for Oar2Spec { }