# [doc = "Register `OAR1` reader"] pub type R = crate :: R < Oar1Spec > ; # [doc = "Register `OAR1` writer"] pub type W = crate :: W < Oar1Spec > ; # [doc = "Field `ADD` reader - Interface address"] pub type AddR = crate :: FieldReader < u16 > ; # [doc = "Field `ADD` writer - Interface address"] pub type AddW < 'a , REG > = crate :: FieldWriter < 'a , REG , 10 , u16 , crate :: Safe > ; # [doc = "Addressing mode (slave mode)\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Addmode { # [doc = "0: 7-bit slave address"] Add7 = 0 , # [doc = "1: 10-bit slave address"] Add10 = 1 , } impl From < Addmode > for bool { # [inline (always)] fn from (variant : Addmode) -> Self { variant as u8 != 0 } } # [doc = "Field `ADDMODE` reader - Addressing mode (slave mode)"] pub type AddmodeR = crate :: BitReader < Addmode > ; impl AddmodeR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Addmode { match self . bits { false => Addmode :: Add7 , true => Addmode :: Add10 , } } # [doc = "7-bit slave address"] # [inline (always)] pub fn is_add7 (& self) -> bool { * self == Addmode :: Add7 } # [doc = "10-bit slave address"] # [inline (always)] pub fn is_add10 (& self) -> bool { * self == Addmode :: Add10 } } # [doc = "Field `ADDMODE` writer - Addressing mode (slave mode)"] pub type AddmodeW < 'a , REG > = crate :: BitWriter < 'a , REG , Addmode > ; impl < 'a , REG > AddmodeW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "7-bit slave address"] # [inline (always)] pub fn add7 (self) -> & 'a mut crate :: W < REG > { self . variant (Addmode :: Add7) } # [doc = "10-bit slave address"] # [inline (always)] pub fn add10 (self) -> & 'a mut crate :: W < REG > { self . variant (Addmode :: Add10) } } impl R { # [doc = "Bits 0:9 - Interface address"] # [inline (always)] pub fn add (& self) -> AddR { AddR :: new (self . bits & 0x03ff) } # [doc = "Bit 15 - Addressing mode (slave mode)"] # [inline (always)] pub fn addmode (& self) -> AddmodeR { AddmodeR :: new (((self . bits >> 15) & 1) != 0) } } impl W { # [doc = "Bits 0:9 - Interface address"] # [inline (always)] pub fn add (& mut self) -> AddW < Oar1Spec > { AddW :: new (self , 0) } # [doc = "Bit 15 - Addressing mode (slave mode)"] # [inline (always)] pub fn addmode (& mut self) -> AddmodeW < Oar1Spec > { AddmodeW :: new (self , 15) } } # [doc = "Own address register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`oar1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`oar1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Oar1Spec ; impl crate :: RegisterSpec for Oar1Spec { type Ux = u16 ; } # [doc = "`read()` method returns [`oar1::R`](R) reader structure"] impl crate :: Readable for Oar1Spec { } # [doc = "`write(|w| ..)` method takes [`oar1::W`](W) writer structure"] impl crate :: Writable for Oar1Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets OAR1 to value 0"] impl crate :: Resettable for Oar1Spec { }