# [doc = "Register `CCR` reader"] pub type R = crate :: R < CcrSpec > ; # [doc = "Register `CCR` writer"] pub type W = crate :: W < CcrSpec > ; # [doc = "Field `CCR` reader - Clock control register in Fast/Standard mode (Master mode)"] pub type CcrR = crate :: FieldReader < u16 > ; # [doc = "Field `CCR` writer - Clock control register in Fast/Standard mode (Master mode)"] pub type CcrW < 'a , REG > = crate :: FieldWriter < 'a , REG , 12 , u16 > ; # [doc = "Fast mode duty cycle\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Duty { # [doc = "0: Duty cycle t_low/t_high = 2/1"] Duty2_1 = 0 , # [doc = "1: Duty cycle t_low/t_high = 16/9"] Duty16_9 = 1 , } impl From < Duty > for bool { # [inline (always)] fn from (variant : Duty) -> Self { variant as u8 != 0 } } # [doc = "Field `DUTY` reader - Fast mode duty cycle"] pub type DutyR = crate :: BitReader < Duty > ; impl DutyR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Duty { match self . bits { false => Duty :: Duty2_1 , true => Duty :: Duty16_9 , } } # [doc = "Duty cycle t_low/t_high = 2/1"] # [inline (always)] pub fn is_duty2_1 (& self) -> bool { * self == Duty :: Duty2_1 } # [doc = "Duty cycle t_low/t_high = 16/9"] # [inline (always)] pub fn is_duty16_9 (& self) -> bool { * self == Duty :: Duty16_9 } } # [doc = "Field `DUTY` writer - Fast mode duty cycle"] pub type DutyW < 'a , REG > = crate :: BitWriter < 'a , REG , Duty > ; impl < 'a , REG > DutyW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Duty cycle t_low/t_high = 2/1"] # [inline (always)] pub fn duty2_1 (self) -> & 'a mut crate :: W < REG > { self . variant (Duty :: Duty2_1) } # [doc = "Duty cycle t_low/t_high = 16/9"] # [inline (always)] pub fn duty16_9 (self) -> & 'a mut crate :: W < REG > { self . variant (Duty :: Duty16_9) } } # [doc = "I2C master mode selection\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum FS { # [doc = "0: Standard mode I2C"] Standard = 0 , # [doc = "1: Fast mode I2C"] Fast = 1 , } impl From < FS > for bool { # [inline (always)] fn from (variant : FS) -> Self { variant as u8 != 0 } } # [doc = "Field `F_S` reader - I2C master mode selection"] pub type FSR = crate :: BitReader < FS > ; impl FSR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> FS { match self . bits { false => FS :: Standard , true => FS :: Fast , } } # [doc = "Standard mode I2C"] # [inline (always)] pub fn is_standard (& self) -> bool { * self == FS :: Standard } # [doc = "Fast mode I2C"] # [inline (always)] pub fn is_fast (& self) -> bool { * self == FS :: Fast } } # [doc = "Field `F_S` writer - I2C master mode selection"] pub type FSW < 'a , REG > = crate :: BitWriter < 'a , REG , FS > ; impl < 'a , REG > FSW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Standard mode I2C"] # [inline (always)] pub fn standard (self) -> & 'a mut crate :: W < REG > { self . variant (FS :: Standard) } # [doc = "Fast mode I2C"] # [inline (always)] pub fn fast (self) -> & 'a mut crate :: W < REG > { self . variant (FS :: Fast) } } impl R { # [doc = "Bits 0:11 - Clock control register in Fast/Standard mode (Master mode)"] # [inline (always)] pub fn ccr (& self) -> CcrR { CcrR :: new (self . bits & 0x0fff) } # [doc = "Bit 14 - Fast mode duty cycle"] # [inline (always)] pub fn duty (& self) -> DutyR { DutyR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - I2C master mode selection"] # [inline (always)] pub fn f_s (& self) -> FSR { FSR :: new (((self . bits >> 15) & 1) != 0) } } impl W { # [doc = "Bits 0:11 - Clock control register in Fast/Standard mode (Master mode)"] # [inline (always)] pub fn ccr (& mut self) -> CcrW < CcrSpec > { CcrW :: new (self , 0) } # [doc = "Bit 14 - Fast mode duty cycle"] # [inline (always)] pub fn duty (& mut self) -> DutyW < CcrSpec > { DutyW :: new (self , 14) } # [doc = "Bit 15 - I2C master mode selection"] # [inline (always)] pub fn f_s (& mut self) -> FSW < CcrSpec > { FSW :: new (self , 15) } } # [doc = "Clock control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ccr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct CcrSpec ; impl crate :: RegisterSpec for CcrSpec { type Ux = u16 ; } # [doc = "`read()` method returns [`ccr::R`](R) reader structure"] impl crate :: Readable for CcrSpec { } # [doc = "`write(|w| ..)` method takes [`ccr::W`](W) writer structure"] impl crate :: Writable for CcrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets CCR to value 0"] impl crate :: Resettable for CcrSpec { }